{
  "1.13": {
    "API Gateway": [],
    "Application Connectivity": [],
    "Console / Microfrontends": [],
    "Core & Supporting": [],
    "Eventing": [],
    "Logging / Tracing / Monitoring": [],
    "Serverless Runtime": [],
    "Service Management": []
  },
  "1.14": {
    "API Gateway": [],
    "Application Connectivity": [],
    "Console / Microfrontends": [],
    "Core & Supporting": [],
    "Eventing": [],
    "Logging / Tracing / Monitoring": [],
    "Serverless Runtime": [],
    "Service Management": []
  },
  "1.15": {
    "API Gateway": [],
    "Application Connectivity": [],
    "Console / Microfrontends": [],
    "Core & Supporting": [],
    "Eventing": [],
    "Logging / Tracing / Monitoring": [],
    "Serverless Runtime": [],
    "Service Management": []
  },
  "Future": {
    "API Gateway": [
      {
        "title": "Dynamic client registration in dex",
        "body": "<!-- Thank you for your contribution. Before you submit the issue:\r\n1. Search open and closed issues for duplicates.\r\n2. Read the contributing guidelines.\r\n-->\r\n\r\n**Description**\r\n\r\nIt should be possible to dynamically register new oauth clients in dex. Admins should have the option to do that via console and (?) via kubectl.\r\n\r\nDex has gRPC API which allows registering clients, see [here](https://github.com/dexidp/dex/blob/master/Documentation/api.md)\r\n\r\nThis is the only way to register client without manipulating configmap and restarting dex.\r\n\r\nRegistration could be done entirely via `console-backend` so that console UI can query that, however, this means users will not be able to do that from the kubectl. Having sth like `ClientRequest` or `Client` crd and an app listening to that CR will allow user to register clients both from console and via kubectl.\r\n\r\n<!-- Provide a clear and concise description of the feature. -->\r\n\r\n**Reasons**\r\n\r\nWe only have static clients in dex, which are hardcoded in the charts frequently. Also, users do not know how to register new ones and this process is a big problem (requires dex restart). This process should be simple, since we already have an API in dex for that.\r\n<!-- Explain why we should add this feature. Provide use cases to illustrate its benefits. -->\r\n\r\n**Attachments**\r\n\r\n<!-- Attach any files, links, code samples, or screenshots that will convince us to your idea. -->\r\n",
        "url": "https://github.com/kyma-project/kyma/issues/4565",
        "number": 4565,
        "labels": [
          "area/security",
          "area/service-mesh",
          "enhancement"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/4565",
        "release": {
          "release_id": 358,
          "start_date": "2020-05-27T09:42:25Z",
          "desired_end_date": null,
          "title": "Future",
          "state": "OPEN"
        },
        "milestone": {
          "title": "Future",
          "number": 358
        },
        "repository": {
          "id": "MDEwOlJlcG9zaXRvcnkxMzk1OTA2MTY=",
          "name": "kyma",
          "issues": []
        },
        "capability": {
          "id": "api-gateway",
          "displayName": "API Gateway",
          "epicsLabels": [
            "area/service-mesh",
            "quality/security"
          ]
        }
      }
    ],
    "Application Connectivity": [],
    "Console / Microfrontends": [],
    "Core & Supporting": [],
    "Eventing": [],
    "Logging / Tracing / Monitoring": [],
    "Serverless Runtime": [],
    "Service Management": []
  },
  "1.16": {
    "API Gateway": [],
    "Application Connectivity": [],
    "Console / Microfrontends": [],
    "Core & Supporting": [],
    "Eventing": [],
    "Logging / Tracing / Monitoring": [],
    "Serverless Runtime": [],
    "Service Management": []
  },
  "1.17": {
    "API Gateway": [],
    "Application Connectivity": [],
    "Console / Microfrontends": [],
    "Core & Supporting": [],
    "Eventing": [],
    "Logging / Tracing / Monitoring": [],
    "Serverless Runtime": [],
    "Service Management": []
  }
}
