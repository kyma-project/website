{
  "2019": {
    "API Gateway": [],
    "Application Connectivity": [],
    "Console / Microfrontends": [],
    "Core & Supporting": [
      {
        "title": "Official testing pipeline and instruction for switching Asset Store Minio into Gateway mode that uses AWS S3",
        "body": "**Description**\r\n\r\n- Get instruction similar https://kyma-project.io/docs/master/components/asset-store/#tutorials-set-minio-to-the-google-cloud-storage-gateway-mode\r\n- Have a testing pipeline that always tests any changes to asset store against gateway mode with AWS S3\r\n\r\n**Reasons**\r\n\r\nWe expect users to use Asset Store with Minio Gateway. Minio supports many providers but we should always make sure they are supported within Asset Store and then we need to officially mention it in documentation",
        "url": "https://github.com/kyma-project/kyma/issues/3974",
        "number": 3974,
        "labels": [
          "area/core-and-supporting",
          "enhancement"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/3974",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2019-12-31T11:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/3974",
        "release": {
          "release_id": "5c5aaf7cdcf5235c1876a507",
          "title": "2019",
          "description": "",
          "start_date": "2019-08-01T10:00:00.000Z",
          "desired_end_date": "2019-12-31T11:00:00.000Z",
          "created_at": "2019-02-06T09:57:16.653Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Core & Supporting",
          "epicsLabels": [
            "area/core-and-supporting"
          ],
          "id": "core-and-supporting"
        }
      },
      {
        "title": "Private buckets support in Asset Store and Headless CMS",
        "body": "**Description**\r\n\r\n- Support private storage in Asset Store\r\n- Support private storage in Asset Store Upload Service\r\n- Support private storage in Headless CMS\r\n- Provide proper documentation/tutorials/diagrams\r\n\r\n**Reasons**\r\n\r\nThere are use cases when you want to use the Asset Store to store files privately. You should be able to store files in a bucket and allow to read it only if the reader is authorized. Some kind of proxy is needed",
        "url": "https://github.com/kyma-project/kyma/issues/4024",
        "number": 4024,
        "labels": [
          "area/core-and-supporting",
          "enhancement"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/4024",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2019-12-31T11:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/4024",
        "release": {
          "release_id": "5c5aaf7cdcf5235c1876a507",
          "title": "2019",
          "description": "",
          "start_date": "2019-08-01T10:00:00.000Z",
          "desired_end_date": "2019-12-31T11:00:00.000Z",
          "created_at": "2019-02-06T09:57:16.653Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Core & Supporting",
          "epicsLabels": [
            "area/core-and-supporting"
          ],
          "id": "core-and-supporting"
        }
      }
    ],
    "Eventing": [],
    "Logging / Tracing / Monitoring": [],
    "Serverless Runtime": [],
    "Service Management": []
  },
  "0.8": {
    "API Gateway": [],
    "Application Connectivity": [],
    "Console / Microfrontends": [],
    "Core & Supporting": [],
    "Eventing": [],
    "Logging / Tracing / Monitoring": [],
    "Serverless Runtime": [],
    "Service Management": []
  },
  "Future": {
    "API Gateway": [
      {
        "title": "Propose solution for global TLS certificate handling in kyma",
        "body": "\r\n\r\n**Description**\r\n\r\nPropose a solution for global handling of tls certificate which includes the ability to upgrade kyma when a component like cert-manager is also installed on a cluster. Basically, TLS certificate should be applied by only one component not many. Kyma should support model with cert-managers installed by the clients.\r\n\r\nWe have to consider using our cert manager(xip-patch is already sort of such thing) or adjust kyma to support pluggable cert-manager allowing the upgrade without any additional needs.\r\nAdditionally, TLS rotation should be independent of the upgrade schedule - currently it is.\r\n\r\n\r\n**Reasons**\r\n\r\nWhen you install kyma with a component like cert-manager, which is taking care about updating TLS certificate, and then you would like to upgrade kyma, you have to manually provide TLS certificate as a part of the kyma installer config, although the cert-manager is already taking care of that. This is inconvenient. \r\n\r\nMoreover, TLS certificate is applied by the `istio-kyma-patch` and in the `application-connector` and in `cluster-essentials` as a secret or patched(created new one) by the `xip-patch`. The source of truth for those secrets are the installer overrides **.Values.global.tlsCrt **  ie. used [here](https://github.com/kyma-project/kyma/blob/master/resources/istio-kyma-patch/templates/istio-ingressgateway-certs.yaml). Then other components like `apiserver-proxy` or `configurations-generator` or `application-connector` are using it referencing created secrets.\r\n\r\nBecause TLS certificate is created in a cluster as a secret to update the secret you have to **manually** edit the secret and restart some of the components or trigger the upgrade, which is also inconvenient. \r\n\r\n\r\n\r\n**Attachments**\r\n\r\n",
        "url": "https://github.com/kyma-project/kyma/issues/2604",
        "number": 2604,
        "labels": [
          "area/installation",
          "area/service-mesh"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/2604",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2020-12-31T11:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/2604",
        "release": {
          "release_id": "5c0791ef1a6a4c6bf4b314ce",
          "title": "Future",
          "description": "Items selected for development but not scheduled yet.",
          "start_date": "2020-01-01T11:00:00.000Z",
          "desired_end_date": "2020-12-31T11:00:00.000Z",
          "created_at": "2018-12-05T08:53:03.286Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "API Gateway",
          "epicsLabels": [
            "area/service-mesh",
            "quality/security"
          ],
          "id": "api-gateway"
        }
      },
      {
        "title": "Authorization server in Kyma",
        "body": "\r\n\r\n**Description**\r\n\r\nCurrently, Kyma supports only API authentication and does not offer authorization. Authentication is covered by istio policy which relies on id tokens validation. API Gateway lacks the feature of applying authorization to an exposed API. Internal communication can be covered with istio RBAC rules but it cannot be applied for incoming requests from external services/applications. For developers creating for example lambdas and exposing them to the public internet, it is beneficial to allow service to service communication with autn and authz in place. Moreover, it's not possible to fetch token in service to service without the context of the user.\r\n\r\nSolutions to investigate :\r\n- OAuth2 server (https://github.com/ory/hydra)\r\n- OPA (https://www.openpolicyagent.org/)\r\n- Integration with istio one of the solutions\r\n- ...\r\n\r\n\r\n\r\n**Reasons**\r\n\r\nEnrich API gateway functionality with authZ capabilities. Allow fetching tokens without the context of the user.\r\n\r\n**Attachments**\r\n\r\n\r\n",
        "url": "https://github.com/kyma-project/kyma/issues/3397",
        "number": 3397,
        "labels": [
          "area/security",
          "area/service-mesh",
          "quality/devx"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/3397",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2020-12-31T11:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/3397",
        "release": {
          "release_id": "5c0791ef1a6a4c6bf4b314ce",
          "title": "Future",
          "description": "Items selected for development but not scheduled yet.",
          "start_date": "2020-01-01T11:00:00.000Z",
          "desired_end_date": "2020-12-31T11:00:00.000Z",
          "created_at": "2018-12-05T08:53:03.286Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "API Gateway",
          "epicsLabels": [
            "area/service-mesh",
            "quality/security"
          ],
          "id": "api-gateway"
        }
      },
      {
        "title": "Istio installation process improvement",
        "body": "\r\n\r\n**Description**\r\nIstio is installed from charts and then is patched by our `istio-kyma-patch`.\r\nThis brings at least two drawbacks:\r\n\r\n- Prolongs istio installation time due to the aditional job running and changing istio configuration + restarting components\r\n- Provides a risk that custom istio installation and existing applications in the cluster will not work after applying our modifications\r\n\r\nWe cannot ensure that patch of every istio instance installed by the users (with own custom configuration) will always work. \r\n\r\nThis can be improved and simplified by doing the following changes:\r\n\r\n- Remove `istio-kyma-patch`\r\n- Move our configuration to istio charts directly\r\n- Introduce tool for checking whether given istio instance complies kyma configuration needs\r\n\r\n\r\n\r\n**Reasons**\r\nShorten istio installation process, bulletproof it and give a tool to developers to do the first \"troubleshooting\" if they istio is not working.\r\n\r\n\r\n\r\n**Attachments**\r\n\r\n\r\n",
        "url": "https://github.com/kyma-project/kyma/issues/4230",
        "number": 4230,
        "labels": [
          "area/service-mesh",
          "enhancement"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/4230",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2020-12-31T11:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/4230",
        "release": {
          "release_id": "5c0791ef1a6a4c6bf4b314ce",
          "title": "Future",
          "description": "Items selected for development but not scheduled yet.",
          "start_date": "2020-01-01T11:00:00.000Z",
          "desired_end_date": "2020-12-31T11:00:00.000Z",
          "created_at": "2018-12-05T08:53:03.286Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "API Gateway",
          "epicsLabels": [
            "area/service-mesh",
            "quality/security"
          ],
          "id": "api-gateway"
        }
      }
    ],
    "Application Connectivity": [
      {
        "title": "Create a suite of end-to-end tests for Application Connector - part 2",
        "body": "**Description**\r\n\r\nThe suite of the end-to-end tests must be created which will ensure the quality of the Application Connector components.\r\n\r\nThe tests must simulate usage of the Application Connector components from the external system point of view.\r\n\r\nThe tests must be integrated with delivery pipelines and smoke tests. The tests must also work in standalone mode for a development.\r\n\r\n**Reasons**\r\n\r\nThe Application Connector components must be well tested to allow smooth usage across all integrated solutions.\r\n\r\n**Language**\r\nThe tests will be implemented using SPOCK.",
        "url": "https://github.com/kyma-project/kyma/issues/2716",
        "number": 2716,
        "labels": [
          "area/application-connector",
          "enhancement"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/2716",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2020-12-31T11:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/2716",
        "release": {
          "release_id": "5c0791ef1a6a4c6bf4b314ce",
          "title": "Future",
          "description": "Items selected for development but not scheduled yet.",
          "start_date": "2020-01-01T11:00:00.000Z",
          "desired_end_date": "2020-12-31T11:00:00.000Z",
          "created_at": "2018-12-05T08:53:03.286Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Application Connectivity",
          "epicsLabels": [
            "area/application-connector"
          ],
          "id": "application-connectivity"
        }
      },
      {
        "title": "Application Connector Gateway extensions and stabilization",
        "body": "**Description**\r\n\r\nThat epic is grouping issues around improvement in Application Connector and Application Gateway for increasing functionality and stabilizes support.\r\n\r\n**Reasons**\r\n\r\nThe enablement team requires a new feature to support integrations.\r\n",
        "url": "https://github.com/kyma-project/kyma/issues/3449",
        "number": 3449,
        "labels": [
          "area/application-connector",
          "area/documentation",
          "enhancement"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/3449",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2020-12-31T11:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/3449",
        "release": {
          "release_id": "5c0791ef1a6a4c6bf4b314ce",
          "title": "Future",
          "description": "Items selected for development but not scheduled yet.",
          "start_date": "2020-01-01T11:00:00.000Z",
          "desired_end_date": "2020-12-31T11:00:00.000Z",
          "created_at": "2018-12-05T08:53:03.286Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Application Connectivity",
          "epicsLabels": [
            "area/application-connector"
          ],
          "id": "application-connectivity"
        }
      },
      {
        "title": "Application Connector test coverage improvements.",
        "body": "**Description**\r\n\r\nWe need to take and improve all our tests. The main part is to have a test increasing our confidence in delivery.\r\n\r\nThere are different kind of tests which we need to provide or improve:\r\n- Backup tests\r\n- Upgradability tests\r\n- E2E Test\r\n\r\nWe also need to increase test visibility by finalizing: https://github.wdf.sap.corp/framefrog/documentation/blob/master/tests-in-kyma.md\r\n\r\n**Reasons**\r\n\r\nThe Application Connector must be covered with tests.\r\n\r\n\r\n**Acceptance criteria**\r\n- Good plan for improvements in the test done\r\n- Test implemented\r\n\r\nPlease bear in mind that we need to use Octopus tests.",
        "url": "https://github.com/kyma-project/kyma/issues/3519",
        "number": 3519,
        "labels": [
          "area/application-connector",
          "enhancement",
          "quality/testability"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/3519",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2020-12-31T11:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/3519",
        "release": {
          "release_id": "5c0791ef1a6a4c6bf4b314ce",
          "title": "Future",
          "description": "Items selected for development but not scheduled yet.",
          "start_date": "2020-01-01T11:00:00.000Z",
          "desired_end_date": "2020-12-31T11:00:00.000Z",
          "created_at": "2018-12-05T08:53:03.286Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Application Connectivity",
          "epicsLabels": [
            "area/application-connector"
          ],
          "id": "application-connectivity"
        }
      }
    ],
    "Console / Microfrontends": [
      {
        "title": "Make sure all views in console use console-backend-service",
        "body": "**Description**\r\n\r\n- Implement missing queries\r\n- Change UI to call the graphql layer\r\n\r\n**Reasons**\r\n\r\n- We agreed https://github.com/kyma-project/community/blob/master/sig-and-wg/sig-core/decisions/dr-007-GraphQL_as_API_facade_for_UI.md that all Console views should use `ui-api-layer` as a backed, for reasons described in the decision.\r\n- Don't use kubernetes-dashboard as dependency to the UI as this is going to be a blocker for https://github.com/kyma-project/kyma/issues/926 as kubernetes is an addon that should be optional",
        "url": "https://github.com/kyma-project/console/issues/202",
        "number": 202,
        "labels": [
          "area/console",
          "enhancement"
        ],
        "githubUrl": "https://github.com/kyma-project/console/issues/202",
        "repository": {
          "name": "console",
          "id": 139590577,
          "issues": []
        },
        "dueDate": "2020-12-31T11:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/console/202",
        "release": {
          "release_id": "5c0791ef1a6a4c6bf4b314ce",
          "title": "Future",
          "description": "Items selected for development but not scheduled yet.",
          "start_date": "2020-01-01T11:00:00.000Z",
          "desired_end_date": "2020-12-31T11:00:00.000Z",
          "created_at": "2018-12-05T08:53:03.286Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Console / Microfrontends",
          "epicsLabels": [
            "area/console",
            "area/luigi"
          ],
          "id": "console-microfrontends"
        }
      },
      {
        "title": "Enrich Micro frontend CRD",
        "body": "**Description**\r\n\r\nRecently we have found 2 additional parameteres that could be passed to console via spec of Microfrontend CRD:\r\n\r\n - `settings` field - to pass setting object to the luigi client context\r\n - `requiredBackendModules` - a list of modules required for a MF to show up in the navigation\r\n\r\nWe should move them to microfrontend, clustermicrofrontend spec and document their purpose\r\n",
        "url": "https://github.com/kyma-project/console/issues/638",
        "number": 638,
        "labels": [
          "area/console",
          "enhancement"
        ],
        "githubUrl": "https://github.com/kyma-project/console/issues/638",
        "repository": {
          "name": "console",
          "id": 139590577,
          "issues": []
        },
        "dueDate": "2020-12-31T11:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/console/638",
        "release": {
          "release_id": "5c0791ef1a6a4c6bf4b314ce",
          "title": "Future",
          "description": "Items selected for development but not scheduled yet.",
          "start_date": "2020-01-01T11:00:00.000Z",
          "desired_end_date": "2020-12-31T11:00:00.000Z",
          "created_at": "2018-12-05T08:53:03.286Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Console / Microfrontends",
          "epicsLabels": [
            "area/console",
            "area/luigi"
          ],
          "id": "console-microfrontends"
        }
      },
      {
        "title": "Display details of service classes provided by a given application",
        "body": "**Description**\r\n\r\nAdd a service class detail view (API swagger, events) for service classes of a given application \r\n\r\n**Reasons**\r\n\r\nAllow inspecting APIs, events and documentation of a given service class BEFORE user activates the service class in his namespace.\r\n\r\n\r\n",
        "url": "https://github.com/kyma-project/console/issues/868",
        "number": 868,
        "labels": [
          "WIP",
          "area/console",
          "enhancement"
        ],
        "githubUrl": "https://github.com/kyma-project/console/issues/868",
        "repository": {
          "name": "console",
          "id": 139590577,
          "issues": []
        },
        "dueDate": "2020-12-31T11:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/console/868",
        "release": {
          "release_id": "5c0791ef1a6a4c6bf4b314ce",
          "title": "Future",
          "description": "Items selected for development but not scheduled yet.",
          "start_date": "2020-01-01T11:00:00.000Z",
          "desired_end_date": "2020-12-31T11:00:00.000Z",
          "created_at": "2018-12-05T08:53:03.286Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Console / Microfrontends",
          "epicsLabels": [
            "area/console",
            "area/luigi"
          ],
          "id": "console-microfrontends"
        }
      }
    ],
    "Core & Supporting": [
      {
        "title": "Add support for files creation in AssetStore with ConfigMap",
        "body": "**Description**\r\n\r\n- extend CRDs with support for ConfigMap referencing\r\n- check how we can make sure that only ConfigMaps that specify a file can be used. Have validation and meaningful status\r\n- proper documentation/tutorial/example\r\n- check if it makes sense to support it as `alternative` to source approach so that you do not have to provide an external source but just a few ConfigMaps with assets\r\n\r\n**Reasons**\r\n\r\nBe more flexible for different use cases for Asset Store, like adding a config file to a website stored with Asset Store. User should be able to specify that specific assets should be enhanced with additional files defined with ConfigMap. This was a part of initial proposal https://github.com/kyma-project/community/blob/master/sig-and-wg/sig-core/proposals/asset-store-proposal.md#solution",
        "url": "https://github.com/kyma-project/kyma/issues/3976",
        "number": 3976,
        "labels": [
          "area/core-and-supporting",
          "enhancement"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/3976",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2020-12-31T11:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/3976",
        "release": {
          "release_id": "5c0791ef1a6a4c6bf4b314ce",
          "title": "Future",
          "description": "Items selected for development but not scheduled yet.",
          "start_date": "2020-01-01T11:00:00.000Z",
          "desired_end_date": "2020-12-31T11:00:00.000Z",
          "created_at": "2018-12-05T08:53:03.286Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Core & Supporting",
          "epicsLabels": [
            "area/core-and-supporting"
          ],
          "id": "core-and-supporting"
        }
      },
      {
        "title": "Support static Website hosting with Asset Store on AWS S3",
        "body": "**Description**\r\n\r\n- Make sure it works on AWS S3\r\n- Extend Bucket CRD spec with info how to enable it. It should be possible to be able to specify a different entry point than just index.html in a root. \r\n- Have proper error handling with clear information in the CR that the following functionality doesn't work for a given mode because it is not yet implemented\r\n- Provide proper documentation/tutorials/example\r\n- All Kyma UIs should be enabled to use this new hosting\r\n\r\n**Reasons**\r\n\r\nAsset Store can be used for many different use cases, not only for Headless CMS but also for cases like website hosting. If this is enabled hosting of static pages like Console UI or others will be trivial without a need of learning and hosting separate nginx servers for each UI",
        "url": "https://github.com/kyma-project/kyma/issues/3977",
        "number": 3977,
        "labels": [
          "area/core-and-supporting",
          "enhancement"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/3977",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2020-12-31T11:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/3977",
        "release": {
          "release_id": "5c0791ef1a6a4c6bf4b314ce",
          "title": "Future",
          "description": "Items selected for development but not scheduled yet.",
          "start_date": "2020-01-01T11:00:00.000Z",
          "desired_end_date": "2020-12-31T11:00:00.000Z",
          "created_at": "2018-12-05T08:53:03.286Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Core & Supporting",
          "epicsLabels": [
            "area/core-and-supporting"
          ],
          "id": "core-and-supporting"
        }
      },
      {
        "title": "Support static Website hosting with Asset Store on Azure Blob",
        "body": "**Description**\r\n\r\n- Make sure it works on Azure\r\n- Extend Bucket CRD spec with info how to enable it. It should be possible to be able to specify a different entry point than just index.html in a root. \r\n- Have proper error handling with clear information in the CR that the following functionality doesn't work for a given mode because it is not yet implemented\r\n- Provide proper documentation/tutorials/example\r\n- All Kyma UIs should be enabled to use this new hosting\r\n\r\n**Reasons**\r\n\r\nAsset Store can be used for many different use cases, not only for Headless CMS but also for cases like website hosting. If this is enabled hosting of static pages like Console UI or others will be trivial without a need of learning and hosting separate nginx servers for each UI",
        "url": "https://github.com/kyma-project/kyma/issues/3978",
        "number": 3978,
        "labels": [
          "area/core-and-supporting",
          "enhancement"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/3978",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2020-12-31T11:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/3978",
        "release": {
          "release_id": "5c0791ef1a6a4c6bf4b314ce",
          "title": "Future",
          "description": "Items selected for development but not scheduled yet.",
          "start_date": "2020-01-01T11:00:00.000Z",
          "desired_end_date": "2020-12-31T11:00:00.000Z",
          "created_at": "2018-12-05T08:53:03.286Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Core & Supporting",
          "epicsLabels": [
            "area/core-and-supporting"
          ],
          "id": "core-and-supporting"
        }
      },
      {
        "title": "Support static Website hosting with Asset Store on Google Cloud Storage",
        "body": "**Description**\r\n\r\n- Make sure it works on GCS\r\n- Extend Bucket CRD spec with info how to enable it. It should be possible to be able to specify a different entry point than just index.html in a root. \r\n- Have proper error handling with clear information in the CR that the following functionality doesn't work for a given mode because it is not yet implemented\r\n- Provide proper documentation/tutorials/example\r\n- All Kyma UIs should be enabled to use this new hosting\r\n\r\n**Reasons**\r\n\r\nAsset Store can be used for many different use cases, not only for Headless CMS but also for cases like website hosting. If this is enabled hosting of static pages like Console UI or others will be trivial without a need of learning and hosting separate nginx servers for each UI",
        "url": "https://github.com/kyma-project/kyma/issues/3979",
        "number": 3979,
        "labels": [
          "area/core-and-supporting",
          "enhancement"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/3979",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2020-12-31T11:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/3979",
        "release": {
          "release_id": "5c0791ef1a6a4c6bf4b314ce",
          "title": "Future",
          "description": "Items selected for development but not scheduled yet.",
          "start_date": "2020-01-01T11:00:00.000Z",
          "desired_end_date": "2020-12-31T11:00:00.000Z",
          "created_at": "2018-12-05T08:53:03.286Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Core & Supporting",
          "epicsLabels": [
            "area/core-and-supporting"
          ],
          "id": "core-and-supporting"
        }
      },
      {
        "title": "Research and enable for Minikube support for static Website hosting with Asset Store",
        "body": "**Description**\r\n\r\n- Make sure it works on Minikube\r\n- Extend Bucket CRD spec with info how to enable it. It should be possible to be able to specify a different entry point than just index.html in a root. It should be based on research on how that is supported technically in specific supported gateway providers. In the end, I guess all providers do it differently and we will simply need to have an entry in the spec that has different values depending on the specified provider, like local/gcs/azure_blob/aws_s3\r\n- Have proper error handling with clear information in the CR that the following functionality doesn't work for a given mode because it is not yet implemented\r\n- Provide proper documentation/tutorials/example\r\n- All Kyma UIs should be migrated to this new solution. Check if it is possible to do it with proper templating in Helm, that gradually they are switched only for Minikube and then gateway modes once we provide more functionality\r\n\r\n**Reasons**\r\n\r\nAsset Store can be used for many different use cases, not only for Headless CMS but also for cases like website hosting. If this is enabled hosting of static pages like Console UI or others will be trivial without a need of learning and hosting separate nginx servers for each UI",
        "url": "https://github.com/kyma-project/kyma/issues/3980",
        "number": 3980,
        "labels": [
          "area/core-and-supporting",
          "enhancement"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/3980",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2020-12-31T11:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/3980",
        "release": {
          "release_id": "5c0791ef1a6a4c6bf4b314ce",
          "title": "Future",
          "description": "Items selected for development but not scheduled yet.",
          "start_date": "2020-01-01T11:00:00.000Z",
          "desired_end_date": "2020-12-31T11:00:00.000Z",
          "created_at": "2018-12-05T08:53:03.286Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Core & Supporting",
          "epicsLabels": [
            "area/core-and-supporting"
          ],
          "id": "core-and-supporting"
        }
      },
      {
        "title": "Add support for files creation in Headless CMS with ConfigMap",
        "body": "**Description**\r\n\r\n- Clearly explain the limits of ConfigMaps\r\n- Extend spec to support it and make sure controller adds proper info in the Asset\r\n- Add documentation/tutorials/examples\r\n\r\n**Reasons**\r\n\r\nUsing Asset Store functionality, enable a user to specify an additional location of the content without a need of hosting it or loading with API but just putting it in the ConfigMap in the cluster. This adds more flexibility to the solution.",
        "url": "https://github.com/kyma-project/kyma/issues/3981",
        "number": 3981,
        "labels": [
          "area/core-and-supporting",
          "enhancement"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/3981",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2020-12-31T11:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/3981",
        "release": {
          "release_id": "5c0791ef1a6a4c6bf4b314ce",
          "title": "Future",
          "description": "Items selected for development but not scheduled yet.",
          "start_date": "2020-01-01T11:00:00.000Z",
          "desired_end_date": "2020-12-31T11:00:00.000Z",
          "created_at": "2018-12-05T08:53:03.286Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Core & Supporting",
          "epicsLabels": [
            "area/core-and-supporting"
          ],
          "id": "core-and-supporting"
        }
      },
      {
        "title": "Creation of Bucket as part of Asset resource in AssetStore",
        "body": "**Description**\r\n\r\n- Asset spec should make it possible for a user to specify that he wants a default bucket created for him, so he doesn't have to do it on his own by creating Bucket CR\r\n- Evaluate how such automated bucket creation might look like, to what extent. Maybe only for public buckets as for private the definition would be too complicated?\r\n- Should we define a specific field in a spec or maybe best practice is to use spec.template standard and specify that the user can provide a full Bucket definition?\r\n\r\n**Reasons**\r\n\r\nSometimes you just need to store 1 or 2 assets using an application and creating a bucket separately might be overhead.",
        "url": "https://github.com/kyma-project/kyma/issues/4026",
        "number": 4026,
        "labels": [
          "area/core-and-supporting",
          "enhancement"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/4026",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2020-12-31T11:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/4026",
        "release": {
          "release_id": "5c0791ef1a6a4c6bf4b314ce",
          "title": "Future",
          "description": "Items selected for development but not scheduled yet.",
          "start_date": "2020-01-01T11:00:00.000Z",
          "desired_end_date": "2020-12-31T11:00:00.000Z",
          "created_at": "2018-12-05T08:53:03.286Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Core & Supporting",
          "epicsLabels": [
            "area/core-and-supporting"
          ],
          "id": "core-and-supporting"
        }
      }
    ],
    "Eventing": [
      {
        "title": "Enable using a default messaging middleware other than NATS Streaming for Kyma eventing",
        "body": "**Description**\nAs an operator, I want to configure a default messaging middleware that my Kyma cluster should use for eventing.\n\nAs a developer, I want to configure a subscription for an event type from a source in Kyma. I don't want to care about the underlying details.\n\nPlease refer to the [proposal](https://github.com/kyma-project/community/blob/master/sig-and-wg/sig-core/proposals/knative-eventing-default-pubsub.md) for further details.",
        "url": "https://github.com/kyma-project/kyma/issues/3847",
        "number": 3847,
        "labels": [
          "area/eventing",
          "enhancement"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/3847",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2020-12-31T11:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/3847",
        "release": {
          "release_id": "5c0791ef1a6a4c6bf4b314ce",
          "title": "Future",
          "description": "Items selected for development but not scheduled yet.",
          "start_date": "2020-01-01T11:00:00.000Z",
          "desired_end_date": "2020-12-31T11:00:00.000Z",
          "created_at": "2018-12-05T08:53:03.286Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Eventing",
          "epicsLabels": [
            "area/eventing"
          ],
          "id": "eventing"
        }
      },
      {
        "title": "Align with Open standards for Kyma eventing interfaces",
        "body": "## CloudEvents\nKyma eventing interfaces were designed with a pre-release version of [CloudEvents Specification](https://github.com/cloudevents/spec). Over a period of time this specification has evolved and we should have the Kyma eventing interfaces aligned with the latest stable specifications of CloudEvents.\n\nSupporting CloudEvents specification would imply:\n- [ ] One should be able to use a CloudEvents based SDK to send events to Kyma\n- [ ] One should be able to send an event over HTTP that conforms to CloudEvents specification. For this we need to support both:\n  - [ ] Structured mode\n  - [ ] Binary mode\n- [ ] One should be able to use a CloudEvents based SDK to consume an event",
        "url": "https://github.com/kyma-project/kyma/issues/3849",
        "number": 3849,
        "labels": [
          "area/eventing",
          "enhancement"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/3849",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2020-12-31T11:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/3849",
        "release": {
          "release_id": "5c0791ef1a6a4c6bf4b314ce",
          "title": "Future",
          "description": "Items selected for development but not scheduled yet.",
          "start_date": "2020-01-01T11:00:00.000Z",
          "desired_end_date": "2020-12-31T11:00:00.000Z",
          "created_at": "2018-12-05T08:53:03.286Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Eventing",
          "epicsLabels": [
            "area/eventing"
          ],
          "id": "eventing"
        }
      },
      {
        "title": "Provide support for data events in Kyma eventing",
        "body": "**Description**\nThe current Kyma eventing model semantics fits better for business events which contain minimalistic data such as object-ids and then the serverless pulls the data from the application.\n\nThere could be other scenarios where the application would like to send data events that contain the full object e.g. a `purchase order`. Such events can be used to synchronize among various applications connected via Kyma. In such scenarios, we will need additional semantics that fits with data events such as `correlation-ids` and other business metadata (possibly as headers) that might be required by the receiver to identify the source and other domain information.",
        "url": "https://github.com/kyma-project/kyma/issues/3854",
        "number": 3854,
        "labels": [
          "area/eventing",
          "enhancement"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/3854",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2020-12-31T11:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/3854",
        "release": {
          "release_id": "5c0791ef1a6a4c6bf4b314ce",
          "title": "Future",
          "description": "Items selected for development but not scheduled yet.",
          "start_date": "2020-01-01T11:00:00.000Z",
          "desired_end_date": "2020-12-31T11:00:00.000Z",
          "created_at": "2018-12-05T08:53:03.286Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Eventing",
          "epicsLabels": [
            "area/eventing"
          ],
          "id": "eventing"
        }
      },
      {
        "title": "Provide support for in-cluster events",
        "body": "**Description**\nAs a developer, I should be able to define and generate internal events to trigger asynchronous business workflows.\n\nAt present, the eventing in Kyma is tightly coupled with the aspect of events being sent by an external solution. e.g. `source-id` which identifies the external solution is used as a part of publishing an event in Kyma.\n\nFor events generated inside Kyma, the following open questions or design details needs to be answered:\n\n* How the origin of the internal event is identified? (events originated from the Kyma environments???)\n* How the event schema will be published?\n* How the event schema will be made available to the developers?\n* Do we need concepts such as event activation for internal events?",
        "url": "https://github.com/kyma-project/kyma/issues/3855",
        "number": 3855,
        "labels": [
          "area/eventing",
          "enhancement"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/3855",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2020-12-31T11:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/3855",
        "release": {
          "release_id": "5c0791ef1a6a4c6bf4b314ce",
          "title": "Future",
          "description": "Items selected for development but not scheduled yet.",
          "start_date": "2020-01-01T11:00:00.000Z",
          "desired_end_date": "2020-12-31T11:00:00.000Z",
          "created_at": "2018-12-05T08:53:03.286Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Eventing",
          "epicsLabels": [
            "area/eventing"
          ],
          "id": "eventing"
        }
      },
      {
        "title": "Improve UX for Kyma eventing",
        "body": "**Description**\nAs an operator, I will need to do minimal configurations to get the desired tuning and setup of eventing. I would expect most of the knobs already fine-tuned OOB.\n\nAs a developer, I should be able to focus only on writing the serverless for my business use cases and would not be required to worry about the Eventing internals.\n\nAs a support person, I should have the right set of alerting, metrics and monitoring available to me to fix any issues related to eventing",
        "url": "https://github.com/kyma-project/kyma/issues/3857",
        "number": 3857,
        "labels": [
          "area/eventing"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/3857",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2020-12-31T11:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/3857",
        "release": {
          "release_id": "5c0791ef1a6a4c6bf4b314ce",
          "title": "Future",
          "description": "Items selected for development but not scheduled yet.",
          "start_date": "2020-01-01T11:00:00.000Z",
          "desired_end_date": "2020-12-31T11:00:00.000Z",
          "created_at": "2018-12-05T08:53:03.286Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Eventing",
          "epicsLabels": [
            "area/eventing"
          ],
          "id": "eventing"
        }
      }
    ],
    "Logging / Tracing / Monitoring": [
      {
        "title": "Monitor all existing Kyma components",
        "body": "As an administrator (e.g. SRE Team) I need insights (metrics) and alerts of all kyma components to ensure a stable environment and investigate critical situations.\n\nAnalysis of components by the teams: \nhttps://github.wdf.sap.corp/SAP-CP-Extension-Factory/community/blob/master/sig-and-wg/sig-production/investigations/nfr_components.md\n\nPreparation epic resulting in guidelines for controller/ui/services:\n#1879\n\nMonitoring Documentation:\n- [Metrics](https://github.com/kyma-project/examples/tree/master/monitoring-custom-metrics)\n- [Alerting](https://github.com/kyma-project/examples/tree/master/monitoring-alert-rules)\n- [Dashboards](https://github.com/kyma-project/kyma/tree/master/resources/monitoring/charts/grafana#making-a-dashboard-part-of-kyma-installation)\n\nAC:\nAll Kyma Components the team is maintaining and which will stay in mid-term future are monitored\n- Metrics exposed and documented\n- alerts are configured - part of the alert is a short description, whats wrong and how to fix it (or an link to the documentation) to bring the product support in a position to react on the problem without knowing the details\n- grafana dashboards are configured\n- Make the steps part of your DoD",
        "url": "https://github.com/kyma-project/kyma/issues/376",
        "number": 376,
        "labels": [
          "area/monitoring",
          "quality/observability"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/376",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2020-12-31T11:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/376",
        "release": {
          "release_id": "5c0791ef1a6a4c6bf4b314ce",
          "title": "Future",
          "description": "Items selected for development but not scheduled yet.",
          "start_date": "2020-01-01T11:00:00.000Z",
          "desired_end_date": "2020-12-31T11:00:00.000Z",
          "created_at": "2018-12-05T08:53:03.286Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Logging / Tracing / Monitoring",
          "epicsLabels": [
            "area/logging",
            "area/tracing",
            "area/monitoring"
          ],
          "id": "logging-tracing-monitoring"
        }
      },
      {
        "title": "Minimal monitoring setup for kyma",
        "body": "As an operator I need insights (metrics) and notifications for all kyma components and the kubernetes cluster itself to ensure a stable environment and investigate critical situations.\r\nTo have a first meaningful improvement in that area following things should be done:\r\n- have example monitoring setups for every type of component\r\n- have alerts for basic system metrics\r\n- assure usability of reports\r\n\r\nIn concrete that actions should be done:\r\n- Enable alerting and grafana dashboard entries for **namespace-controller**, alerting should be based on golang specific metrics and [USE](http://www.brendangregg.com/usemethod.html) metrics\r\n- Enable alerting and grafana dashboard entries for **application-registry**, alerting should be based on golang specific metrics and [RED](https://www.weave.works/blog/the-red-method-key-metrics-for-microservices-architecture/) metrics\r\n- Enable alerting and grafana dashboard entries for **lambda-ui**, alerting should be based on [RED](https://www.weave.works/blog/the-red-method-key-metrics-for-microservices-architecture/) metrics\r\n- Propose general grafana dashboard structure and naming\r\n- Define alert rules for generic system metrics - CPU, memory, PVC\r\n\r\n\r\nMonitoring Documentation:\r\n- [Metrics](https://github.com/kyma-project/examples/tree/master/monitoring-custom-metrics)\r\n- [Alerting](https://github.com/kyma-project/examples/tree/master/monitoring-alert-rules)\r\n- [Dashboards](https://github.com/kyma-project/kyma/tree/master/resources/monitoring/charts/grafana#making-a-dashboard-part-of-kyma-installation)",
        "url": "https://github.com/kyma-project/kyma/issues/1879",
        "number": 1879,
        "labels": [
          "area/monitoring",
          "quality/observability"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/1879",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2020-12-31T11:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/1879",
        "release": {
          "release_id": "5c0791ef1a6a4c6bf4b314ce",
          "title": "Future",
          "description": "Items selected for development but not scheduled yet.",
          "start_date": "2020-01-01T11:00:00.000Z",
          "desired_end_date": "2020-12-31T11:00:00.000Z",
          "created_at": "2018-12-05T08:53:03.286Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Logging / Tracing / Monitoring",
          "epicsLabels": [
            "area/logging",
            "area/tracing",
            "area/monitoring"
          ],
          "id": "logging-tracing-monitoring"
        }
      },
      {
        "title": "Monitor Knative Function Controller",
        "body": "As a operator I like to know if my function controller is working like expected to react on issues.\n\nAC:\n- Monitoring for Functions\n  - Running Functions\n  - Deploying Functions\n  - Deployment errors",
        "url": "https://github.com/kyma-project/kyma/issues/2251",
        "number": 2251,
        "labels": [
          "area/monitoring",
          "area/serverless",
          "enhancement",
          "quality/observability"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/2251",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2020-12-31T11:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/2251",
        "release": {
          "release_id": "5c0791ef1a6a4c6bf4b314ce",
          "title": "Future",
          "description": "Items selected for development but not scheduled yet.",
          "start_date": "2020-01-01T11:00:00.000Z",
          "desired_end_date": "2020-12-31T11:00:00.000Z",
          "created_at": "2018-12-05T08:53:03.286Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Logging / Tracing / Monitoring",
          "epicsLabels": [
            "area/logging",
            "area/tracing",
            "area/monitoring"
          ],
          "id": "logging-tracing-monitoring"
        }
      }
    ],
    "Serverless Runtime": [
      {
        "title": "Improve Debug-ability of Functions",
        "body": "As a Developer I like to know if my Functions are doing what they supposed to do, to get my work done.",
        "url": "https://github.com/kyma-project/kyma/issues/1618",
        "number": 1618,
        "labels": [
          "area/serverless"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/1618",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2020-12-31T11:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/1618",
        "release": {
          "release_id": "5c0791ef1a6a4c6bf4b314ce",
          "title": "Future",
          "description": "Items selected for development but not scheduled yet.",
          "start_date": "2020-01-01T11:00:00.000Z",
          "desired_end_date": "2020-12-31T11:00:00.000Z",
          "created_at": "2018-12-05T08:53:03.286Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Serverless Runtime",
          "id": "serverless",
          "epicsLabels": [
            "area/serverless"
          ]
        }
      },
      {
        "title": "Migrate Kubeless to knative",
        "body": "This is an overarching epic to track all the activities of this move.\n\nThis epic is not meant to be part of a Milestone as the topic is to big for one iteration.,",
        "url": "https://github.com/kyma-project/kyma/issues/1878",
        "number": 1878,
        "labels": [
          "area/serverless"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/1878",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2020-12-31T11:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/1878",
        "release": {
          "release_id": "5c0791ef1a6a4c6bf4b314ce",
          "title": "Future",
          "description": "Items selected for development but not scheduled yet.",
          "start_date": "2020-01-01T11:00:00.000Z",
          "desired_end_date": "2020-12-31T11:00:00.000Z",
          "created_at": "2018-12-05T08:53:03.286Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Serverless Runtime",
          "id": "serverless",
          "epicsLabels": [
            "area/serverless"
          ]
        }
      },
      {
        "title": "Knative Function Controler Deploymen Status",
        "body": "**Description**\nAs a Function Developer I like to know the status of my deployment to check if a deployment was successful. \n\nAC:\n- Display the following status: DEPLOYING, UPDATING, RUNNING and ERROR\n- Give Additional details about the status in a Description field\n\n**Reasons**\nAS a developer I need feedback if my deployment is working like expected to fix it if it is not working.\n",
        "url": "https://github.com/kyma-project/kyma/issues/2250",
        "number": 2250,
        "labels": [
          "area/serverless",
          "enhancement"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/2250",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2020-12-31T11:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/2250",
        "release": {
          "release_id": "5c0791ef1a6a4c6bf4b314ce",
          "title": "Future",
          "description": "Items selected for development but not scheduled yet.",
          "start_date": "2020-01-01T11:00:00.000Z",
          "desired_end_date": "2020-12-31T11:00:00.000Z",
          "created_at": "2018-12-05T08:53:03.286Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Serverless Runtime",
          "id": "serverless",
          "epicsLabels": [
            "area/serverless"
          ]
        }
      },
      {
        "title": "Monitor Knative Function Controller",
        "body": "As a operator I like to know if my function controller is working like expected to react on issues.\n\nAC:\n- Monitoring for Functions\n  - Running Functions\n  - Deploying Functions\n  - Deployment errors",
        "url": "https://github.com/kyma-project/kyma/issues/2251",
        "number": 2251,
        "labels": [
          "area/monitoring",
          "area/serverless",
          "enhancement",
          "quality/observability"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/2251",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2020-12-31T11:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/2251",
        "release": {
          "release_id": "5c0791ef1a6a4c6bf4b314ce",
          "title": "Future",
          "description": "Items selected for development but not scheduled yet.",
          "start_date": "2020-01-01T11:00:00.000Z",
          "desired_end_date": "2020-12-31T11:00:00.000Z",
          "created_at": "2018-12-05T08:53:03.286Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Serverless Runtime",
          "id": "serverless",
          "epicsLabels": [
            "area/serverless"
          ]
        }
      }
    ],
    "Service Management": []
  },
  "1.1": {
    "API Gateway": [],
    "Application Connectivity": [],
    "Console / Microfrontends": [],
    "Core & Supporting": [],
    "Eventing": [],
    "Logging / Tracing / Monitoring": [],
    "Serverless Runtime": [],
    "Service Management": []
  },
  "1.2": {
    "API Gateway": [
      {
        "title": "Troubleshooting guide for installation and service-mesh",
        "body": "\r\n\r\n**Description**\r\n\r\nRecently we observed many topics related to installation which are duplicates, however, valid and we do not have documentation for it. For example problems with tiller and `transport is closing` and istio crds not being visible. Creating a troubleshooting guide with the most common topics which occur in the community will help developers and will help us with giving help on community channels.\r\n\r\nAC: \r\n\r\nNew documentation topic displayed on kyma-project.io in area installation and service-mesh covering most common topics such as tiller certificates, installer logs/retires, istio crds not being visibile.\r\n\r\n\r\n**Reasons**\r\nImprove developer experience by giving easy access to documentation describing most common states that may occur, but are not a bug itself.\r\n\r\n\r\n**Attachments**\r\n\r\n\r\n",
        "url": "https://github.com/kyma-project/kyma/issues/3940",
        "number": 3940,
        "labels": [
          "area/documentation",
          "area/installation",
          "area/service-mesh",
          "enhancement"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/3940",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2019-06-07T10:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/3940",
        "release": {
          "release_id": "5cb59383709ee87123145468",
          "title": "1.2",
          "description": "Release 1.2 - Istanbul",
          "start_date": "2019-05-13T10:00:00.000Z",
          "desired_end_date": "2019-06-07T10:00:00.000Z",
          "created_at": "2019-04-16T08:34:11.381Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "API Gateway",
          "epicsLabels": [
            "area/service-mesh",
            "quality/security"
          ],
          "id": "api-gateway"
        }
      }
    ],
    "Application Connectivity": [],
    "Console / Microfrontends": [
      {
        "title": "Test view for lambdas",
        "body": "**Description**\r\nTest lambda view should contain:\r\n- choice how to invoke lambda (http request / event)\r\n- event selector - you  can pick what event you want to test\r\n- the input data editor with templates updated when you switch the trigger (request/event/event type)\r\n- log live preview\r\n- test button (invoke lambda with input data)\r\n\r\nTest view should check if lambda is exposed (mandatory). Test button should call lambda through API gateway (exposed), pass the input data and display response.\r\n\r\n\r\n**Reasons**\r\nDevelopers want to test their lambdas easily.\r\n\r\n**Attachments**\r\nYou can simulate event triggers sending event content as http request body. This is the way how event trigger works:\r\n- event payload is received pushed to kubeless as a request body: https://github.com/kyma-project/kyma/blob/22675d2a177e945e23ae384f6017e3096edbdb74/components/event-bus/internal/push/handlers/message_handler.go#L53\r\n- kubeless extracts body and sends it to lambda function as event.data:\r\nhttps://github.com/kubeless/runtimes/blob/bdee7792a6d265a719a75e886071cbc4fb5f7295/stable/nodejs/kubeless.js#L66\r\n\r\nTo test it please you can create a lambda with 2 triggers (http and event) with following code:\r\n```\r\nmodule.exports = { main: function (event, context) {\r\n    console.log(JSON.stringify(event.data));\r\n} }\r\n```\r\nYou can invoke lambda with the event (use application mock) or call it with http request:\r\n```\r\ncurl https://your-lambda-url -d '{\"prop\":\"value\"}'\r\n```\r\nBoth triggers will set event.data object.\r\n\r\n",
        "url": "https://github.com/kyma-project/console/issues/780",
        "number": 780,
        "labels": [
          "area/console",
          "area/serverless",
          "enhancement",
          "quality/devx"
        ],
        "githubUrl": "https://github.com/kyma-project/console/issues/780",
        "repository": {
          "name": "console",
          "id": 139590577,
          "issues": []
        },
        "dueDate": "2019-06-07T10:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/console/780",
        "release": {
          "release_id": "5cb59383709ee87123145468",
          "title": "1.2",
          "description": "Release 1.2 - Istanbul",
          "start_date": "2019-05-13T10:00:00.000Z",
          "desired_end_date": "2019-06-07T10:00:00.000Z",
          "created_at": "2019-04-16T08:34:11.381Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Console / Microfrontends",
          "epicsLabels": [
            "area/console",
            "area/luigi"
          ],
          "id": "console-microfrontends"
        }
      },
      {
        "title": "Create Namespace Wizard",
        "body": "**Description**\n\nAs a user I want to create namespace.\n\nAC:\n\n- User can define name & labels\n- User can define resource quotas and limit ranges\n- User can decide if istio sidecar should be enabled for the namespace\n",
        "url": "https://github.com/kyma-project/console/issues/819",
        "number": 819,
        "labels": [
          "area/console"
        ],
        "githubUrl": "https://github.com/kyma-project/console/issues/819",
        "repository": {
          "name": "console",
          "id": 139590577,
          "issues": []
        },
        "dueDate": "2019-06-07T10:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/console/819",
        "release": {
          "release_id": "5cb59383709ee87123145468",
          "title": "1.2",
          "description": "Release 1.2 - Istanbul",
          "start_date": "2019-05-13T10:00:00.000Z",
          "desired_end_date": "2019-06-07T10:00:00.000Z",
          "created_at": "2019-04-16T08:34:11.381Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Console / Microfrontends",
          "epicsLabels": [
            "area/console",
            "area/luigi"
          ],
          "id": "console-microfrontends"
        }
      },
      {
        "title": "APIs view improvements",
        "body": "**Description**\r\n\r\nThe user should be able to see APIs including API status. The APIs ui should be responsive and provide live feedback (websockets) after API creation, deletion, status change.\r\n\r\n\r\nAC:\r\n\r\n- API status is shown on the list and API details view\r\n- APIs are fetched, updated, created, deleted via gql\r\n- User should be able to manage whether API should be with or w/o mTLS.\r\n- User should be able to copy exposed API url to clipboard\r\n\r\n",
        "url": "https://github.com/kyma-project/kyma/issues/3822",
        "number": 3822,
        "labels": [
          "area/console"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/3822",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2019-06-07T10:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/3822",
        "release": {
          "release_id": "5cb59383709ee87123145468",
          "title": "1.2",
          "description": "Release 1.2 - Istanbul",
          "start_date": "2019-05-13T10:00:00.000Z",
          "desired_end_date": "2019-06-07T10:00:00.000Z",
          "created_at": "2019-04-16T08:34:11.381Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Console / Microfrontends",
          "epicsLabels": [
            "area/console",
            "area/luigi"
          ],
          "id": "console-microfrontends"
        }
      }
    ],
    "Core & Supporting": [],
    "Eventing": [],
    "Logging / Tracing / Monitoring": [],
    "Serverless Runtime": [
      {
        "title": "Test view for lambdas",
        "body": "**Description**\r\nTest lambda view should contain:\r\n- choice how to invoke lambda (http request / event)\r\n- event selector - you  can pick what event you want to test\r\n- the input data editor with templates updated when you switch the trigger (request/event/event type)\r\n- log live preview\r\n- test button (invoke lambda with input data)\r\n\r\nTest view should check if lambda is exposed (mandatory). Test button should call lambda through API gateway (exposed), pass the input data and display response.\r\n\r\n\r\n**Reasons**\r\nDevelopers want to test their lambdas easily.\r\n\r\n**Attachments**\r\nYou can simulate event triggers sending event content as http request body. This is the way how event trigger works:\r\n- event payload is received pushed to kubeless as a request body: https://github.com/kyma-project/kyma/blob/22675d2a177e945e23ae384f6017e3096edbdb74/components/event-bus/internal/push/handlers/message_handler.go#L53\r\n- kubeless extracts body and sends it to lambda function as event.data:\r\nhttps://github.com/kubeless/runtimes/blob/bdee7792a6d265a719a75e886071cbc4fb5f7295/stable/nodejs/kubeless.js#L66\r\n\r\nTo test it please you can create a lambda with 2 triggers (http and event) with following code:\r\n```\r\nmodule.exports = { main: function (event, context) {\r\n    console.log(JSON.stringify(event.data));\r\n} }\r\n```\r\nYou can invoke lambda with the event (use application mock) or call it with http request:\r\n```\r\ncurl https://your-lambda-url -d '{\"prop\":\"value\"}'\r\n```\r\nBoth triggers will set event.data object.\r\n\r\n",
        "url": "https://github.com/kyma-project/console/issues/780",
        "number": 780,
        "labels": [
          "area/console",
          "area/serverless",
          "enhancement",
          "quality/devx"
        ],
        "githubUrl": "https://github.com/kyma-project/console/issues/780",
        "repository": {
          "name": "console",
          "id": 139590577,
          "issues": []
        },
        "dueDate": "2019-06-07T10:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/console/780",
        "release": {
          "release_id": "5cb59383709ee87123145468",
          "title": "1.2",
          "description": "Release 1.2 - Istanbul",
          "start_date": "2019-05-13T10:00:00.000Z",
          "desired_end_date": "2019-06-07T10:00:00.000Z",
          "created_at": "2019-04-16T08:34:11.381Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Serverless Runtime",
          "id": "serverless",
          "epicsLabels": [
            "area/serverless"
          ]
        }
      },
      {
        "title": "Update controller implementation to latest knative standards",
        "body": "**Description**\nService should not implement a BuildSpec anymore. As the current implementation heavily relies on that functionality parts of the controller need to be reimplemented\n\n**Acceptance:**\n* factor Buildspec out of servicespec\n* create new buildspec and service in controller\n\n ",
        "url": "https://github.com/kyma-project/kyma/issues/3993",
        "number": 3993,
        "labels": [
          "area/serverless"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/3993",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2019-06-07T10:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/3993",
        "release": {
          "release_id": "5cb59383709ee87123145468",
          "title": "1.2",
          "description": "Release 1.2 - Istanbul",
          "start_date": "2019-05-13T10:00:00.000Z",
          "desired_end_date": "2019-06-07T10:00:00.000Z",
          "created_at": "2019-04-16T08:34:11.381Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Serverless Runtime",
          "id": "serverless",
          "epicsLabels": [
            "area/serverless"
          ]
        }
      }
    ],
    "Service Management": []
  },
  "1.3": {
    "API Gateway": [
      {
        "title": "Handle Authentication in paths in API Gateway",
        "body": "\r\n\r\n**Description**\r\n\r\nPreviously istio supported authentication for the whole service, however, it is possible to select or exclude paths for which authentication should take place.\r\n\r\nIn the kyma, exposed API is secured with all paths/endpoints and users should be able to select the option of their choice. \r\n\r\nMore information here https://istio.io/docs/tasks/security/authn-policy/#disable-end-user-authentication-for-specific-paths\r\n\r\nAPI controller should support this in API CR and console UI should have views for that as well.\r\n\r\n\r\n**Reasons**\r\nAllows selective path authentication for APIs\r\n\r\n\r\n\r\n**Attachments**\r\n\r\n\r\n",
        "url": "https://github.com/kyma-project/kyma/issues/4262",
        "number": 4262,
        "labels": [
          "area/service-mesh",
          "enhancement"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/4262",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2019-07-05T10:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/4262",
        "release": {
          "release_id": "5cb593dfe89c9c3b0c58d7c7",
          "title": "1.3",
          "description": "Release 1.3 - Jakarta",
          "start_date": "2019-06-10T10:00:00.000Z",
          "desired_end_date": "2019-07-05T10:00:00.000Z",
          "created_at": "2019-04-16T08:35:43.047Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "API Gateway",
          "epicsLabels": [
            "area/service-mesh",
            "quality/security"
          ],
          "id": "api-gateway"
        }
      },
      {
        "title": "WebSocket support in API Gateway",
        "body": "\r\n\r\n**Description**\r\n\r\nUsers are also creating APIs that allows communication over websocket. API gateway should support that as well and console UI should allow to set it in the API view.\r\n\r\nAPI CR should be extended with \"websocketUpgrade\" property with value \"true/false\".\r\nDocumentation for API controller and API Gateway should cover this change as well.\r\nAdditionally, we should think of some example for that.\r\n\r\n\r\n\r\n**Reasons**\r\n\r\nEnable WebSocket APIs in the kyma\r\n\r\n\r\n**Attachments**\r\n\r\n\r\n",
        "url": "https://github.com/kyma-project/kyma/issues/4275",
        "number": 4275,
        "labels": [
          "area/service-mesh",
          "enhancement"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/4275",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2019-07-05T10:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/4275",
        "release": {
          "release_id": "5cb593dfe89c9c3b0c58d7c7",
          "title": "1.3",
          "description": "Release 1.3 - Jakarta",
          "start_date": "2019-06-10T10:00:00.000Z",
          "desired_end_date": "2019-07-05T10:00:00.000Z",
          "created_at": "2019-04-16T08:35:43.047Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "API Gateway",
          "epicsLabels": [
            "area/service-mesh",
            "quality/security"
          ],
          "id": "api-gateway"
        }
      }
    ],
    "Application Connectivity": [],
    "Console / Microfrontends": [
      {
        "title": "Lambdas Testable from Console UI - usability improvements ( part 1 )",
        "body": "**Description**\r\n\r\nImplement low hanging usability improvement that would encourage developers to use log UI when developing and testing a lambda.\r\n\r\nThe main objectives here would be :\r\n - opening logs in a way that developers can watch them as they go on with development\r\n - simple auto-refresh of the log streams\r\n - filtering out log data which pollutes the streams\r\n - enabling new function \"size\" - limited to one replica - giving the developer only one log stream source \r\n - Hiding (by default) log streams from old versions of the lambda\r\n \r\n\r\n",
        "url": "https://github.com/kyma-project/console/issues/882",
        "number": 882,
        "labels": [
          "area/console",
          "area/serverless",
          "quality/devx"
        ],
        "githubUrl": "https://github.com/kyma-project/console/issues/882",
        "repository": {
          "name": "console",
          "id": 139590577,
          "issues": []
        },
        "dueDate": "2019-07-05T10:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/console/882",
        "release": {
          "release_id": "5cb593dfe89c9c3b0c58d7c7",
          "title": "1.3",
          "description": "Release 1.3 - Jakarta",
          "start_date": "2019-06-10T10:00:00.000Z",
          "desired_end_date": "2019-07-05T10:00:00.000Z",
          "created_at": "2019-04-16T08:35:43.047Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Console / Microfrontends",
          "epicsLabels": [
            "area/console",
            "area/luigi"
          ],
          "id": "console-microfrontends"
        }
      }
    ],
    "Core & Supporting": [
      {
        "title": "Adjust style of components that renders specifications so they are consistent with each other",
        "body": "**Description**\r\n\r\n- Customize OpenAPI rendering component https://github.com/swagger-api/swagger-ui/blob/master/docs/customization/custom-layout.md\r\n- Adjust existing AsyncAPI and OData components that we own\r\n- Follow https://github.com/SAP/fundamental\r\n\r\n**Reasons**\r\n\r\nBest experience of the user is not only if all the features are available in the context, but also if they all are consistently following feel&look of entire Web site. This is why we should make sure that the open source component that we integrated in the Console, to render OpenAPI, is consistent in style with the rest of the UI\r\n\r\n**Attachments**\r\n\r\nHow it looks like now in Console UI in Catalog view:\r\n![image (7)](https://user-images.githubusercontent.com/6995927/54260825-5cf63500-456a-11e9-9640-c695ce6797b0.png)\r\n\r\n\r\nThis is how it will look like:\r\n\r\nOData:\r\n<img width=\"622\" alt=\"Screen Shot 2019-05-19 at 08 42 16\" src=\"https://user-images.githubusercontent.com/6995927/57978657-1b728200-7a12-11e9-9ee9-cb6aa7b7218f.png\">\r\n\r\nOpenAPI:\r\n![Kyma_Catalog_API-Specs_Header_General-Infos](https://user-images.githubusercontent.com/6995927/57978663-2d542500-7a12-11e9-9483-12cec2a77d94.png)\r\n",
        "url": "https://github.com/kyma-project/console/issues/684",
        "number": 684,
        "labels": [
          "area/core-and-supporting",
          "enhancement"
        ],
        "githubUrl": "https://github.com/kyma-project/console/issues/684",
        "repository": {
          "name": "console",
          "id": 139590577,
          "issues": []
        },
        "dueDate": "2019-07-05T10:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/console/684",
        "release": {
          "release_id": "5cb593dfe89c9c3b0c58d7c7",
          "title": "1.3",
          "description": "Release 1.3 - Jakarta",
          "start_date": "2019-06-10T10:00:00.000Z",
          "desired_end_date": "2019-07-05T10:00:00.000Z",
          "created_at": "2019-04-16T08:35:43.047Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Core & Supporting",
          "epicsLabels": [
            "area/core-and-supporting"
          ],
          "id": "core-and-supporting"
        }
      },
      {
        "title": "Support for metadata on a source level in HeadlessCMS custom resources",
        "body": "**Description**\r\n\r\n- Make sure proper support for it is in DocsTopic and ClusterDocsTopic \r\n- Do we need explicit support in AssetStore? \r\n- Proper documentation/tutorial/example\r\n- Support in Kyma Console UI Backend\r\n- Support in the markdown rendering components in Kyma:\r\n  - Agree on contract, what keys can be provided in metadata\r\n  - Document them and support in UI\r\n\r\n**Reasons**\r\n\r\nUsers must be able to specify some additional, custom metadata for a specific source of content. Later, the presentation layer can read this metadata and react properly. For example, it could be:\r\n```\r\nsources:\r\n    - type: markdown\r\n      name: markdown-slack\r\n      mode: single\r\n      url: https://raw.githubusercontent.com/slackapi/slack-api-specs/master/README.md\r\n      metadata: \r\n        disableRelativeLinks: true\r\n        disableAbsoluteLinks: true\r\n        disableHTML: true\r\n```",
        "url": "https://github.com/kyma-project/kyma/issues/3989",
        "number": 3989,
        "labels": [
          "area/core-and-supporting",
          "enhancement"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/3989",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2019-07-05T10:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/3989",
        "release": {
          "release_id": "5cb593dfe89c9c3b0c58d7c7",
          "title": "1.3",
          "description": "Release 1.3 - Jakarta",
          "start_date": "2019-06-10T10:00:00.000Z",
          "desired_end_date": "2019-07-05T10:00:00.000Z",
          "created_at": "2019-04-16T08:35:43.047Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Core & Supporting",
          "epicsLabels": [
            "area/core-and-supporting"
          ],
          "id": "core-and-supporting"
        }
      },
      {
        "title": "Markdown documentation component for reuse in any UI",
        "body": "**Description**\r\n\r\n- component with left nav and right nav -> displayable only if needed\r\n- the middle part should support all standard markdown functionalities and if possible the others should be supported through a kind of extensions\r\n- props for the component should support the user to provide multiple markdown files to be rendered on one view\r\n- should we do react like in case of all the other components?\r\n- can we make it a separate npm package, is it doable?\r\n\r\nTODO: Action point once we are done with the component -> work on designs on how context help `slider` would look like in console UI and how it would be configured. Probably microfrontend CR could be extended.\r\n\r\n**Reasons**\r\n\r\nCurrent Docs UI view in Console is great but easily replaceable by kyma-project.io that soon will have search. Big advantage of headless cms in kyma is that Kyma Consol has access to Kyma documentation all the time, and can access it in any context of the user. We should take advantage of this functionality and display documentation about Service Catalog in Service Catalog view in Console.",
        "url": "https://github.com/kyma-project/kyma/issues/4025",
        "number": 4025,
        "labels": [
          "area/core-and-supporting",
          "enhancement"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/4025",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2019-07-05T10:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/4025",
        "release": {
          "release_id": "5cb593dfe89c9c3b0c58d7c7",
          "title": "1.3",
          "description": "Release 1.3 - Jakarta",
          "start_date": "2019-06-10T10:00:00.000Z",
          "desired_end_date": "2019-07-05T10:00:00.000Z",
          "created_at": "2019-04-16T08:35:43.047Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Core & Supporting",
          "epicsLabels": [
            "area/core-and-supporting"
          ],
          "id": "core-and-supporting"
        }
      }
    ],
    "Eventing": [],
    "Logging / Tracing / Monitoring": [],
    "Serverless Runtime": [
      {
        "title": "Lambdas Testable from Console UI - usability improvements ( part 1 )",
        "body": "**Description**\r\n\r\nImplement low hanging usability improvement that would encourage developers to use log UI when developing and testing a lambda.\r\n\r\nThe main objectives here would be :\r\n - opening logs in a way that developers can watch them as they go on with development\r\n - simple auto-refresh of the log streams\r\n - filtering out log data which pollutes the streams\r\n - enabling new function \"size\" - limited to one replica - giving the developer only one log stream source \r\n - Hiding (by default) log streams from old versions of the lambda\r\n \r\n\r\n",
        "url": "https://github.com/kyma-project/console/issues/882",
        "number": 882,
        "labels": [
          "area/console",
          "area/serverless",
          "quality/devx"
        ],
        "githubUrl": "https://github.com/kyma-project/console/issues/882",
        "repository": {
          "name": "console",
          "id": 139590577,
          "issues": []
        },
        "dueDate": "2019-07-05T10:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/console/882",
        "release": {
          "release_id": "5cb593dfe89c9c3b0c58d7c7",
          "title": "1.3",
          "description": "Release 1.3 - Jakarta",
          "start_date": "2019-06-10T10:00:00.000Z",
          "desired_end_date": "2019-07-05T10:00:00.000Z",
          "created_at": "2019-04-16T08:35:43.047Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Serverless Runtime",
          "id": "serverless",
          "epicsLabels": [
            "area/serverless"
          ]
        }
      },
      {
        "title": "Service Binding on knative Functions",
        "body": "**Description**\n\nAdd a list of service bindings and binding parameters to the knative function crd. Create ServiceBinding and ServiceBindingUsage based on the list.\n\n**Reasons**\n\nAs a function developer I like to consume Services. They should be part of the CRD as the binding might need some extra work, when the function is deployed outside of kyma on a 3rd party system\n",
        "url": "https://github.com/kyma-project/kyma/issues/4316",
        "number": 4316,
        "labels": [
          "area/serverless",
          "enhancement"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/4316",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2019-07-05T10:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/4316",
        "release": {
          "release_id": "5cb593dfe89c9c3b0c58d7c7",
          "title": "1.3",
          "description": "Release 1.3 - Jakarta",
          "start_date": "2019-06-10T10:00:00.000Z",
          "desired_end_date": "2019-07-05T10:00:00.000Z",
          "created_at": "2019-04-16T08:35:43.047Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Serverless Runtime",
          "id": "serverless",
          "epicsLabels": [
            "area/serverless"
          ]
        }
      }
    ],
    "Service Management": []
  },
  "1.0": {
    "API Gateway": [],
    "Application Connectivity": [],
    "Console / Microfrontends": [],
    "Core & Supporting": [],
    "Eventing": [],
    "Logging / Tracing / Monitoring": [],
    "Serverless Runtime": [],
    "Service Management": []
  },
  "1.4": {
    "API Gateway": [],
    "Application Connectivity": [],
    "Console / Microfrontends": [],
    "Core & Supporting": [
      {
        "title": "Create new component for rendering OData EDM in Data Model visualization ",
        "body": "**Description**\r\n\r\n- Create a new component that can be used anywhere\r\n- Check if the best location is some official OData organization on GitHub, or better keep it in Console\r\n- Have good communication about the new component, examples and a blog\r\n- Follow https://github.com/SAP/fundamental\r\n\r\n**Reasons**\r\n\r\nBecause of the nature of OData, users prefer to not just see raw reference documentation but also a visual representation of the data model described by the EDMX files that describe OData\r\n\r\n**Attachments**\r\n\r\n![Kyma_Catalog_API-Specs_Header_General-Infos- Data Modul](https://user-images.githubusercontent.com/6995927/57978747-31cd0d80-7a13-11e9-815d-2ad3b146c992.png)\r\n",
        "url": "https://github.com/kyma-project/console/issues/821",
        "number": 821,
        "labels": [
          "area/core-and-supporting",
          "enhancement"
        ],
        "githubUrl": "https://github.com/kyma-project/console/issues/821",
        "repository": {
          "name": "console",
          "id": 139590577,
          "issues": []
        },
        "dueDate": "2019-08-02T10:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/console/821",
        "release": {
          "release_id": "5cd88a49145f41296ed5194a",
          "title": "1.4",
          "description": "Release 1.4 - Kyoto",
          "start_date": "2019-07-07T10:00:00.000Z",
          "desired_end_date": "2019-08-02T10:00:00.000Z",
          "created_at": "2019-05-12T21:04:09.833Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Core & Supporting",
          "epicsLabels": [
            "area/core-and-supporting"
          ],
          "id": "core-and-supporting"
        }
      },
      {
        "title": "Official testing pipeline and instruction for switching Asset Store Minio into Gateway mode that uses Azure Blob",
        "body": "**Description**\r\n\r\n- Get instruction similar https://kyma-project.io/docs/master/components/asset-store/#tutorials-set-minio-to-the-google-cloud-storage-gateway-mode\r\n- Make sure in docs we only mention GCS and Azure Blog as the only tested and supported gateway modes\r\n- Have a testing pipeline that always tests any changes to asset store against gateway mode with Azure Blob\r\n\r\n\r\n**Reasons**\r\n\r\nWe expect users to use Asset Store with Minio Gateway. Minio supports many providers but we should always make sure they are supported within Asset Store and then we need to officially mention it in documentation",
        "url": "https://github.com/kyma-project/kyma/issues/3973",
        "number": 3973,
        "labels": [
          "area/core-and-supporting",
          "enhancement"
        ],
        "githubUrl": "https://github.com/kyma-project/kyma/issues/3973",
        "repository": {
          "name": "kyma",
          "id": 139590616,
          "issues": []
        },
        "dueDate": "2019-08-02T10:00:00.000Z",
        "zenHubUrl": "https://app.zenhub.com/workspaces/kyma---all-repositories-5b6d5985084045741e744dea/issues/kyma-project/kyma/3973",
        "release": {
          "release_id": "5cd88a49145f41296ed5194a",
          "title": "1.4",
          "description": "Release 1.4 - Kyoto",
          "start_date": "2019-07-07T10:00:00.000Z",
          "desired_end_date": "2019-08-02T10:00:00.000Z",
          "created_at": "2019-05-12T21:04:09.833Z",
          "closed_at": null,
          "state": "open"
        },
        "capability": {
          "displayName": "Core & Supporting",
          "epicsLabels": [
            "area/core-and-supporting"
          ],
          "id": "core-and-supporting"
        }
      }
    ],
    "Eventing": [],
    "Logging / Tracing / Monitoring": [],
    "Serverless Runtime": [],
    "Service Management": []
  }
}
