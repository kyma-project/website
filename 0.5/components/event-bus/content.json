{
  "id": "event-bus",
  "displayName": "Event Bus",
  "description": "Overall documentation for Event Bus",
  "type": "Components",
  "docs": [
    {
      "order": "001-overview-event-bus",
      "title": "Overview",
      "source": "<p>Kyma Event Bus enables the integration of various external solutions with Kyma. The integration is achieved using the <code>publish-subscribe</code> messaging pattern that allows Kyma to receive business Events from different solutions, enrich them, and trigger business flows using lambdas or services defined in Kyma.</p>\n<p>To learn how to write an HTTP service or Lambda in Kyma, and handle the Event Bus published Events, check the Services Programming Model <a href=\"013-details-service-programming-model.md\">guide</a> and the Lambda Programming Model <a href=\"../../serverless/docs/035-programming-model.md\">guide</a>.</p>\n<blockquote>\n<p><strong>NOTE:</strong> The Event Bus is based on the <a href=\"https://github.com/nats-io/nats-streaming-server/releases\" target=\"_blank\">NATS Streaming</a> open source log-based streaming system for cloud-native applications, which is a brokered messaging middleware. The Event Bus provides <strong>at-least-once</strong> delivery guarantees.</p>\n</blockquote>\n"
    },
    {
      "order": "010-details-concepts",
      "title": "Basic concepts",
      "type": "Details",
      "source": "<p>The following resources are involved in Event transfer and validation in Kyma:</p>\n<ul>\n<li><p><strong>EventActivation</strong> is a custom resource controller that the Remote Environment Broker (REB) creates. Its purpose is to define Event availability in a given Environment.</p>\n</li>\n<li><p><strong>NATS Streaming</strong> is an open source, log-based streaming system that serves as a database allowing the Event Bus to store and transfer the Events on a large scale.</p>\n</li>\n<li><p><strong>Persistence</strong> is a back-end storage volume for NATS Streaming that stores Events. When the Event flow fails, the Event Bus can resume the process using the Events saved in Persistence.</p>\n</li>\n<li><p><strong>Publish</strong> is an internal Event Bus service that transfers the enriched Event from a given external solution to NATS Streaming.</p>\n</li>\n<li><p><strong>Push</strong> is an application responsible for receiving Events from NATS Streaming in the Event Bus. Additionally, it delivers the validated Events to the lambda or the service, following the trigger from the Subscription custom resource. The Events are delivered to the lambda or the service through the Envoy proxy sidecar with mTLS enabled.</p>\n</li>\n<li><p><strong>Subscription</strong> is a custom resource that the lambda or service creator defines to subscribe a given lambda or a service to particular types of Events.</p>\n</li>\n<li><p><strong>Sub-validator</strong> is a Kubernetes deployment. It updates the status of the Subscription custom resource with the EventActivation status. Depending on the status, <code>push</code> starts or stops delivering Events to the lambda or the service webhook.</p>\n</li>\n</ul>\n"
    },
    {
      "order": "011-details-event-flow-requirements",
      "title": "Event flow requirements",
      "type": "Details",
      "source": "<p>The Event Bus enables a successful flow of the Events in Kyma when:</p>\n<ul>\n<li>The <a href=\"#activate-events\">EventActivation</a> is in place.</li>\n<li>You create a <a href=\"#consume-events\">Subscription</a> Kubernetes custom resource and register the webhook for the lambda or a service to consume the Events.</li>\n<li>The Events are <a href=\"#event-publishing\">published</a>.</li>\n</ul>\n<h2 id=\"details\">Details</h2>\n<p>See the following subsections for details on each requirement.</p>\n<h3 id=\"activate-events\">Activate Events</h3>\n<p>To receive Events, use EventActivation between the Environment and the Remote Environment.</p>\n<p>For example, if you define the lambda in the <code>test123</code> Environment and want to receive the <code>order-created</code> Event type from the <code>ec-qa</code> Remote Environment, you need to enable the EventActivation between the <code>test123</code> Environment and the <code>ec-qa</code> Remote Environment. Otherwise, the lambda cannot receive the <code>order-created</code> Event type.</p>\n<p><img src=\"assets/event-activation.png\" alt=\"EventActivation.png\"></p>\n<h3 id=\"consume-events\">Consume Events</h3>\n<p>Enable lambdas and services to consume Events in Kyma between any Environment and the Remote Environment using <code>push</code>. Deliver Events to the lambda or the service by registering a webhook for it. Create a Subscription Kubernetes custom resource to register the webhook.</p>\n<p>See the table for the explanation of parameters in the Subscription custom resource.</p>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>include_subscription_name_header</strong></td>\n<td>It indicates whether the lambda or the service includes the name of the Subscription when receiving an Event.</td>\n</tr>\n<tr>\n<td><strong>max_inflight</strong></td>\n<td>It indicates the maximum number of Events which can be delivered concurrently. The final value is the <strong>max_inflight</strong> number multiplied by the number of the <code>push</code> applications.</td>\n</tr>\n<tr>\n<td><strong>push_request_timeout_ms</strong></td>\n<td>It indicates the time for which the <code>push</code> waits for the response when delivering an Event to the lambda or the service. After the specified time passes, the request times out and the Event Bus retries delivering the Event. Setting the <strong>minimum</strong> parameter to <code>0</code> applies the default value of 1000ms.</td>\n</tr>\n<tr>\n<td><strong>event_type</strong></td>\n<td>The name of the Event type. For example, <code>order-created</code>.</td>\n</tr>\n<tr>\n<td><strong>event_type_version</strong></td>\n<td>The version of the Event type. For example, <code>v1</code>.</td>\n</tr>\n<tr>\n<td><strong>source</strong></td>\n<td>Details of the remote environment that the Event originates from.</td>\n</tr>\n<tr>\n<td><strong>source_environment</strong></td>\n<td>The environment of the Event source. For example, <code>ec-qa</code>.</td>\n</tr>\n<tr>\n<td><strong>source_namespace</strong></td>\n<td>The parameter that uniquely identifies the organization publishing the Event.</td>\n</tr>\n<tr>\n<td><strong>source_type</strong></td>\n<td>The type of the Event source. For example, <code>commerce</code>.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"event-publishing\">Event publishing</h3>\n<p>Make sure that the external solution sends Events to Kyma.</p>\n"
    },
    {
      "order": "013-details-service-programming-model",
      "title": "Service Programming Model",
      "type": "Details",
      "source": "<p>You can configure a microservice deployed in Kyma to receive Events from the Event Bus by creating a subscription custom resource. Find various configuration options in the Consume Events section.</p>\n<h2 id=\"event-delivery\">Event Delivery</h2>\n<p>The Event is delivered as an <code>HTTP POST</code> request. Event Metadata is a part of an HTTP request Headers. Event Payload is the body of the request.</p>\n<p><img src=\"assets/service-programming-model.png\" alt=\"TEST\"></p>\n<p>The Event Delivery workflow is as follows:</p>\n<ol>\n<li>The Event is published to the Kyma Event Bus from an external system instance in a bound Remote Environment.</li>\n<li>The Event Bus checks for the Event subscription and activation. It creates an <code>HTTP POST</code> request using Event Payload and Metadata.</li>\n<li>The Service receives the <code>HTTP POST</code> request. The Event Metadata is represented in the <code>HTTP Request Headers</code> request and the Event Payload is represented in the <code>HTTP Request Body</code>.</li>\n</ol>\n<h2 id=\"event-metadata\">Event Metadata</h2>\n<p>The following HTTP Headers provide information about the Event Metadata.</p>\n<table>\n<thead>\n<tr>\n<th>Header</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>kyma-event-id</strong></td>\n<td>Business Event&#39;s ID delivered to the microservice.</td>\n</tr>\n<tr>\n<td><strong>kyma-event-time</strong></td>\n<td>Business Event&#39;s time delivered to the microservice.</td>\n</tr>\n<tr>\n<td><strong>kyma-event-type</strong></td>\n<td>Business Event&#39;s type delivered to the microservice.</td>\n</tr>\n<tr>\n<td><strong>kyma-event-type-version</strong></td>\n<td>Business Event&#39;s version delivered to the microservice.</td>\n</tr>\n<tr>\n<td><strong>kyma-source-environment</strong></td>\n<td>Business Event&#39;s source environment delivered to the microservice.</td>\n</tr>\n<tr>\n<td><strong>kyma-source-namespace</strong></td>\n<td>Business Event&#39;s source Namespace delivered to the microservice.</td>\n</tr>\n<tr>\n<td><strong>kyma-source-type</strong></td>\n<td>Business Event&#39;s source type delivered to the microservice.</td>\n</tr>\n<tr>\n<td><strong>kyma-subscription</strong></td>\n<td>Subscription name defined in the subscription contract, or in a CRD. This business Event is published to its subscribers.</td>\n</tr>\n<tr>\n<td><strong>x-b3-flags</strong></td>\n<td>Header used by the Zipkin tracer in Envoy. It encodes one or more options. See more on Zipkin tracing <a href=\"https://github.com/openzipkin/b3-propagation\" target=\"_blank\">here</a>.</td>\n</tr>\n<tr>\n<td><strong>x-b3-parentspanid</strong></td>\n<td>Header used by the Zipkin tracer in Envoy. The <strong>ParentSpanId</strong> is 64-bit in length and indicates the position of the parent operation in the trace tree. When the span is the root of the trace tree, the <strong>ParentSpanId</strong> is absent.</td>\n</tr>\n<tr>\n<td><strong>x-b3-sampled</strong></td>\n<td>Header used by the Zipkin tracer in Envoy. When the <strong>Sampled</strong> flag is either not specified or set to <code>1</code>, the span is reported to the tracing system. Once <strong>Sampled</strong> is set to <code>0</code> or <code>1</code>, the same value should be consistently sent downstream.</td>\n</tr>\n<tr>\n<td><strong>x-b3-spanid</strong></td>\n<td>Header used by the Zipkin tracer in Envoy. The <strong>SpanId</strong> is 64-bit in length and indicates the position of the current operation in the trace tree. The value should not be interpreted. It may or may not be derived from the value of the <strong>TraceId</strong>.</td>\n</tr>\n<tr>\n<td><strong>x-b3-traceid</strong></td>\n<td>Header used by the Zipkin tracer in Envoy. The <strong>TraceId</strong> is 64-bit in length and indicates the overall ID of the trace. Every span in a trace shares this ID.</td>\n</tr>\n<tr>\n<td><strong>x-request-id</strong></td>\n<td>Randomly generated ID which identifies the HTTP request delivering the business Event.</td>\n</tr>\n<tr>\n<td><strong>x-envoy-decorator-operation</strong></td>\n<td>If this header is present in Ingress requests, its value overrides any locally defined operation (span) name on the server span generated by the tracing mechanism. If this header is present in an Egress response, its value overrides any locally defined operation (span) name on the client span.</td>\n</tr>\n<tr>\n<td><strong>x-envoy-expected-rq-timeout-ms</strong></td>\n<td>Time in milliseconds in which the router expects the request to be completed. Envoy sets this header so that the upstream host receiving the request can make decisions based on the request timeout. It is set on internal requests and is either taken from the <strong>x-envoy-upstream-rq-timeout-ms</strong> header or from the route timeout.</td>\n</tr>\n<tr>\n<td><strong>x-istio-attributes</strong></td>\n<td>Istio specific metadata.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"event-payload\">Event Payload</h2>\n<p>The Event Payload is delivered as the body of the HTTP Request in JSON format. The JSON schema is available in the Service Catalog in the registered service for the remote Events.</p>\n<h2 id=\"event-payload-example\">Event Payload Example</h2>\n<p>In this example, you write a service for an <code>order.created</code> Event published by the external solution service. The published Event schema looks as follows:</p>\n<pre><code class=\"lang-json\">{\n  &quot;example&quot;: {\n    &quot;orderCode&quot;: &quot;4caad296-e0c5-491e-98ac-0ed118f9474e&quot;\n  },\n  &quot;properties&quot;: {\n    &quot;orderCode&quot;: {\n      &quot;description&quot;: &quot;Resource identifier&quot;,\n      &quot;title&quot;: &quot;OrderCode&quot;,\n      &quot;type&quot;: &quot;string&quot;\n    }\n  },\n  &quot;type&quot;: &quot;object&quot;\n}\n</code></pre>\n<p>The HTTP POST request payload is a JSON object:</p>\n<pre><code class=\"lang-json\">{&quot;orderCode&quot;: &quot;4caad296-e0c5-491e-98ac-0ed118f9474e&quot;}\n</code></pre>\n<h2 id=\"successful-delivery\">Successful Delivery</h2>\n<p>A message delivered to a subscriber is considered successfully consumed if the service&#39;s HTTP response status code is <code>2xx</code>. If the status code is not <code>2xx</code> (&lt; 200 or &gt;= 300), it means that a message consumption is not successful and that the message delivery is re-tried. This implies <strong>At-least-once</strong> delivery guarantee.</p>\n<h2 id=\"event-subscription-service-example\">Event Subscription Service Example</h2>\n<p>Refer to <a href=\"https://github.com/kyma-project/examples/tree/master/event-subscription/service\" target=\"_blank\">this</a> example to find a complete scenario for implementing a subscriber service to a business Event.</p>\n"
    },
    {
      "order": "020-architecture-event-bus",
      "title": "Architecture",
      "source": "<p>See the diagram and steps for an overview of the basic Event Bus flow:</p>\n<p><img src=\"assets/event-bus-architecture.png\" alt=\"Event Bus architecture\"></p>\n<h2 id=\"event-flow\">Event flow</h2>\n<ol>\n<li><p>The external solution integrated with Kyma makes a REST API call to the Application Connector to indicate that a new Event is available.</p>\n</li>\n<li><p>The Application Connector enriches the Event with the details of its source.</p>\n</li>\n</ol>\n<blockquote>\n<p><strong>NOTE:</strong> There is always one dedicated instance of the Application Connector for every instance of an external solution connected to Kyma.</p>\n</blockquote>\n<ol start=\"3\">\n<li><p>The Application Connector makes a REST API call to <code>publish</code> and sends the enriched Event.</p>\n</li>\n<li><p><code>publish</code> saves the information in the NATS Streaming database.</p>\n</li>\n<li><p>NATS Streaming stores the Event details in the Persistence storage volume to ensure the data is not lost if the NATS Streaming crashes.</p>\n</li>\n<li><p>If the Subscription <a href=\"#event-validation\">validation process</a> completes successfully, <code>push</code> consumes the Event from NATS Streaming.</p>\n</li>\n<li><p><code>push</code> delivers the Event to the lambda or the service.</p>\n</li>\n</ol>\n<h2 id=\"event-validation\">Event validation</h2>\n<p>The Event Bus performs Event validation before it allows Event consumption.</p>\n<h3 id=\"validation-details\">Validation details</h3>\n<p>When you create a lambda or a service to perform a given business functionality, you also need to define which Events trigger it. Define triggers by creating the Subscription custom resource in which you register with the Event Bus to forward the Events of a particular type, such as <code>order-created</code>, to your lambda or a service. Whenever the <code>order-created</code> Event comes in, the Event Bus consumes it by saving it in NATS Streaming and Persistence, and sends it to the correct receiver specified in the Subscription definition.</p>\n<blockquote>\n<p><strong>NOTE:</strong> The Event Bus creates a separate Event Trigger for each Subscription.</p>\n</blockquote>\n<p>Before the Event Bus forwards the Event to the receiver, the sub-validator performs a security check to verify the permissions for this Event in a given Environment. It reads all new Subscription resources and refers to the EventActivation resource to check whether a particular Event type is enabled in a given Environment. If the Event is enabled for an Environment, it updates the Subscription resource with the information. Based on the information, <code>push</code> sends the Event to the lambda or the service.</p>\n<h3 id=\"validation-flow\">Validation flow</h3>\n<p>See the diagram and a step-by-step description of the Event verification process.</p>\n<p><img src=\"assets/event-validation.png\" alt=\"Event validation process\"></p>\n<ol>\n<li>Kyma user defines a lambda or a service.</li>\n<li>Kyma user creates a Subscription custom resource.</li>\n<li>The sub-validator reads the new Subscription.</li>\n<li>The sub-validator refers to the EventActivation resource to check if the Event in the Subscription is activated for the given Environment.</li>\n<li>The sub-validator updates the Subscription resource accordingly.</li>\n</ol>\n"
    },
    {
      "order": "030-cr-subscription",
      "title": "Subscription",
      "type": "Custom Resource",
      "source": "<p>The <code>subscriptions.eventing.kyma.cx</code> Custom Resource Definition (CRD) is a detailed description of the kind of data and the format used to create an event trigger for lambda or microservice in Kyma. After creating a new custom resource, the event trigger is registered in the event bus and events are delivered to the endpoint specified in the custom resource.</p>\n<p>To get the up-to-date CRD and show the output in the <code>yaml</code> format, run this command:</p>\n<pre><code>kubectl get crd subscriptions.eventing.kyma.cx -o yaml\n</code></pre><h2 id=\"sample-custom-resource\">Sample custom resource</h2>\n<p>This is a sample resource that creates an event trigger for a lambda with <code>order.created</code> event.</p>\n<pre><code class=\"lang-yaml\">apiVersion: eventing.kyma.cx/v1alpha1\nkind: Subscription\nmetadata:\n  name: hello-with-data-subscription\n  labels:\n    example: event-bus-lambda-subscription\nspec:\n  endpoint: http://hello-with-data.&lt;environment&gt;:8080/\n  push_request_timeout_ms: 2000\n  max_inflight: 400\n  include_subscription_name_header: true\n  event_type: order.created\n  event_type_version: v1\n  source_id: stage.commerce.kyma.local\n</code></pre>\n<h2 id=\"custom-resource-parameters\">Custom resource parameters</h2>\n<p>This table lists all the possible parameters of a given resource together with their descriptions:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Parameter</th>\n<th style=\"text-align:center\">Mandatory</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>metadata.name</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specifies the name of the CR.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.endpoint</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">The HTTP endpoint to which events are delivered as a POST request.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.push_request_timeout_ms</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">The HTTP request timeout. After the timeout has expired, event are redelivered.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.max_inflight</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">The maximum number of concurrent HTTP requests to deliver events.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.include_subscription_name_header</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Boolean flag indicating if the name of the subscription should be included in the HTTP headers while delivering the event.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.event_type</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">The event type to which the event trigger is registered.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.event_type_version</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">The version of the event type.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.source_id</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Identifies the external the external solution which sent the event to Kyma.</td>\n</tr>\n</tbody>\n</table>\n"
    },
    {
      "order": "031-cli-reference",
      "title": "CLI reference",
      "source": "<p> Management of the Event Bus is based on the custom resources specifically defined for Kyma. Manage all of these resources through <a href=\"https://kubernetes.io/docs/reference/kubectl/overview/\" target=\"_blank\">kubectl</a>.</p>\n<h2 id=\"details\">Details</h2>\n<p>This section describes the resource names to use in the kubectl command line, the command syntax, and examples of use.</p>\n<h3 id=\"resource-types\">Resource types</h3>\n<p>Event Bus operations use the following resources:</p>\n<table>\n<thead>\n<tr>\n<th>Singular name</th>\n<th>Plural name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>subscription</td>\n<td>subscriptions</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"syntax\">Syntax</h3>\n<p>Follow the <code>kubectl</code> syntax, <code>kubectl {command} {type} {name} {flags}</code>, where:</p>\n<ul>\n<li>{command} is any command, such as <code>describe</code>.</li>\n<li>{type} is a resource type, such as <code>clusterserviceclass</code>.</li>\n<li>{name} is the name of a given resource type. Use {name} to make the command return the details of a given resource.</li>\n<li>{flags} specifies the scope of the information. For example, use flags to define the Namespace from which to get the information.</li>\n</ul>\n<h3 id=\"examples\">Examples</h3>\n<p>The following examples show how to create new Subscriptions, list them, and obtain detailed information on their statuses.</p>\n<ul>\n<li>Create a new Subscription directly from the terminal:</li>\n</ul>\n<pre><code>   cat &lt;&lt;EOF | kubectl create -f -\n   apiVersion: eventing.kyma.cx/v1alpha1\n   kind: Subscription\n   metadata:\n     name: my-subscription\n     namespace: stage\n   spec:\n     endpoint: http://testjs.default:8080/\n     push_request_timeout_ms: 2000\n     max_inflight: 400\n     include_subscription_name_header: true\n     event_type: order_created\n     event_type_version: v1\n     source_id: stage.commerce.kyma.local\nEOF\n</code></pre><ul>\n<li>Get the list of all Subscriptions:</li>\n</ul>\n<pre><code>kubectl get subscription --all-namespaces\n</code></pre><ul>\n<li>Get the list of all Subscriptions with detailed information on the Subscription status:</li>\n</ul>\n<pre><code>kubectl get subscriptions -n stage -o=custom-columns=NAME:.metadata.name,STATUS:.status.conditions[*].status,STATUS TYPE:.status.conditions[*].type\n</code></pre>"
    },
    {
      "order": "040-details-troubleshooting",
      "title": "Troubleshooting",
      "type": "Details",
      "source": "<p>In some cases, you can encounter some problems related to eventing. This\ndocument introduces several ways to troubleshoot such problems.</p>\n<h2 id=\"general-troubleshooting-guidelines\">General Troubleshooting Guidelines</h2>\n<ul>\n<li><p>If the lambda or the service does not receive any Events, check the following:</p>\n<ul>\n<li>Confirm that the EventActivation custom resource is in place.</li>\n<li>Ensure that the webhook defined for the lambda or the service is up and\nrunning.</li>\n<li>Make sure the Events are published.</li>\n</ul>\n</li>\n<li><p>If errors appear while sending Events:</p>\n<ul>\n<li>Check if the <code>publish</code> application is up and running.</li>\n<li>Make sure that NATS Streaming is up and running.</li>\n</ul>\n<p>If these general guidelines do not help, go to the next section of this\ndocument.</p>\n</li>\n</ul>\n<h2 id=\"search-by-tags\">Search by tags</h2>\n<p>You can search traces using tags. Tags are key-value pairs configured for each service.</p>\n<p>See the full list of tags for a service from the details of that service&#39;s span.</p>\n<p>For example, these are the tags for the <code>publish-service</code>:</p>\n<ul>\n<li><code>event-type</code></li>\n<li><code>event-type-ver</code></li>\n<li><code>event-id</code></li>\n<li><code>source-id</code></li>\n</ul>\n<p>To search the traces, you can use either a single tag such as <code>event-type=&quot;order.created&quot;</code>, or multiple tags such as <code>event-type=&quot;order.created&quot; event-type-ver=&quot;v1&quot;</code>.</p>\n<h2 id=\"troubleshooting-using-kyma-tracing\">Troubleshooting using Kyma Tracing</h2>\n<p>Tracing allows you to troubleshoot different problems that you might encounter\nwhile using Kyma. Understanding the common scenarios and how the expected traces\nlook like gives you a better grasp on how to quickly use Kyma tracing\ncapabilities to pinpoint the root cause. See the exemplary scenario for\nreference.</p>\n<h3 id=\"scenario-i-have-no-microservice-or-lambda-configured-to-receive-an-event\">Scenario: I have no microservice or lambda configured to receive an Event</h3>\n<p>This scenario assumes that there is an Event sent from the external system but\nthere is no lambda or microservice configured with the Event trigger.</p>\n<p>As a result, only the trace for the <code>publish</code> and initial services are visible.</p>\n<p><img src=\"assets/troubleshoot-only-publish-overview.png\" alt=\"\"></p>\n<p>In the trace details, you can see the tags for the <code>publish-service</code>.</p>\n<p><img src=\"assets/troubleshoot-only-publish-detail.png\" alt=\"\"></p>\n<h3 id=\"scenario-configured-microservice-or-lambda-returns-an-error\">Scenario: Configured microservice or lambda returns an error</h3>\n<p>This scenario assumes that there is a microservice or lambda configured to recieve\nthe event trigger. However, due to a bug in the code, the microservice or lambda \nfailed to process the Event.</p>\n<p>As a result, you can see the <code>webhook</code>, <code>push</code>, and <code>name-of-lambda</code> services in the trace and they are marked with error.</p>\n<p><img src=\"assets/troubleshoot-error-in-lambda.png\" alt=\"\"></p>\n<p>To see the error details, click on one of the service spans. For example, choose the span for the <code>push</code> service.\n<img src=\"assets/troubleshoot-error-in-lambda-details.png\" alt=\"\"></p>\n<p>Since the Event Bus keeps on retrying to deliver the Event until it is successful, you \ncan see multiple spans for the <code>webhook-service</code>.</p>\n<p><img src=\"assets/troubleshoot-error-multiple-spans.png\" alt=\"\"></p>\n"
    },
    {
      "order": "050-subscription-updates",
      "title": "Subscription updates",
      "type": "Details",
      "source": "<p>To update the subscription CRD, run this command:</p>\n<p><code>kubectl edit crd subscriptions.eventing.kyma.cx</code></p>\n<p>The Event Bus reacts to the changes in subscription CRD, and updates the corresponding NATS-Streaming subscription accordingly.</p>\n<blockquote>\n<p><strong>Note</strong>: The current subscription update mechanism recreates a subscription with new specifications. This may result in the loss of messages delivered during the recreation process.</p>\n</blockquote>\n"
    }
  ]
}
