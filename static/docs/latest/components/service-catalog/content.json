{
  "id": "service-catalog",
  "displayName": "Service Catalog",
  "description": "Overal documentation for Service Catalog",
  "type": "Components",
  "docs": [
    {
      "order": "001-overview-service-catalog",
      "title": "Overview",
      "type": "Overview",
      "source":
        "<p>The Service Catalog is a grouping of reusable, integrated services from all Service Brokers registered in Kyma. Its purpose is to provide an easy way for Kyma users to access services that the Service Brokers manage and use them in their applications.</p>\n<p>Due to the fact that Kyma runs on Kubernetes, you can easily run, in Kyma, a service that a third party provides and maintains, such as a database. Without extensive knowledge about the clustering of such a datastore service and the responsibility for its upgrades and maintenance, you can easily provision an instance of the software offering that a Service Broker registered in Kyma exposes, and bind it with an application running in the Kyma cluster.</p>\n<h2 id=\"operations\">Operations</h2>\n<p>You can perform the following cluster-wide operations in the Service Catalog:</p>\n<ul>\n<li>Expose the consumable services by listing them with all the details, including the documentation and the consumption plans.</li>\n<li>Consume the services by provisioning them in a given Environment, which is Kyma&#39;s representation of the Kubernetes Namespace.</li>\n<li>Bind the services to the applications through Secrets.</li>\n</ul>\n"
    },
    {
      "order": "010-details-resources",
      "title": "Resources",
      "type": "Details",
      "source":
        "<p>This document includes an overview of resources that the Kyma Service Catalog provides.</p>\n<blockquote>\n<p><strong>NOTE:</strong> The &quot;Cluster&quot; prefix in front of resources means they are cluster-wide. The corresponding resources without the prefix refer to the Environment scope.   </p>\n</blockquote>\n<ul>\n<li><p><strong>ClusterServiceBroker</strong> is an endpoint for a set of managed services that a third party offers and maintains.</p>\n</li>\n<li><p><strong>ClusterServiceClass</strong> is a managed service exposed by a given ClusterServiceBroker. When a cluster administrator registers a new Service Broker in the Service Catalog, the Service Catalog controller obtains new services exposed by the Service Broker and renders them in the cluster as ClusterServiceClasses. A ClusterServiceClass is synonymous with a service in the Service Catalog.</p>\n</li>\n<li><p><strong>ClusterServicePlan</strong> is a variation of a ClusterServiceClass that offers different levels of quality, configuration options, and the cost of a given service. Contrary to the ClusterServiceClass, which is purely descriptive, the ClusterServicePlan provides technical information to the ClusterServiceBroker on this part of the service that the ClusterServiceBroker can expose.</p>\n</li>\n<li><p><strong>Secret</strong> is a basic resource to transfer logins and passwords to the Deployment. The service binding process leads to the creation of a Secret.</p>\n</li>\n<li><p><strong>ServiceBinding</strong> is a link between a ServiceInstance and an application that cluster users create to obtain access credentials for their applications.</p>\n</li>\n<li><p><strong>ServiceBindingUsage</strong> is a Kyma custom resource that allows the ServiceBindingUsage controller to inject Secrets into a given application.</p>\n</li>\n<li><p><strong>ServiceInstance</strong> is a provisioned instance of a ClusterServiceClass to use in one or more cluster applications.</p>\n</li>\n<li><p><strong>UsageKind</strong> is a Kyma custom resource that allows you to bind a ServiceInstance to any resource.</p>\n</li>\n</ul>\n"
    },
    {
      "order": "011-details-add-service-to-the-catalog",
      "title": "Add a service to the Catalog",
      "type": "Details",
      "source":
        "<p>In general, the Service Catalog can expose a service from any Service Broker that is registered in Kyma in accordance with the <a href=\"https://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md\" target=\"_blank\">Open Service Broker API</a> specification.</p>\n<p>The Kyma Service Catalog is currently integrated with the following Service Brokers:</p>\n<ul>\n<li>Azure Broker</li>\n<li>Remote Environment Broker</li>\n<li>Helm Broker (experimental)</li>\n</ul>\n<p>For details on how to build and register your own Service Broker to expose more services and plans to the cluster users, see the Service Brokers <strong>Overview</strong> document.</p>\n<blockquote>\n<p><strong>NOTE:</strong> The Service Catalog has the Istio sidecar injected. To enable the communication between the Service Catalog and Service Brokers, either inject Istio sidecar into all brokers or disable mutual TLS authentication.</p>\n</blockquote>\n"
    },
    {
      "order": "012-details-provisioning-and-binding",
      "title": "Provisioning and binding",
      "type": "Details",
      "source":
        "<h2 id=\"overview\">Overview</h2>\n<p>Provisioning a service means creating an instance of a service. When you consume a specific ClusterServiceClass and the system provisions a ServiceInstance, you need credentials for this service. To obtain credentials, create a ServiceBinding resource using the API of the Service Catalog. One instance can have numerous bindings to use in the Deployment or Function. When you raise a binding request, the system returns the credentials in the form of a Secret. The system creates a Secret in a given Environment.</p>\n<blockquote>\n<p><strong>NOTE:</strong> The security in Kyma relies on the Kubernetes concept of a <a href=\"https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\" target=\"_blank\">Namespace</a>. Kyma Environment is a security boundary. If the Secret exists in the Environment, the administrator can inject it to any Deployment. The Service Broker cannot prevent other applications from consuming a created Secret. Therefore, to ensure a stronger level of isolation and security, use a dedicated Environment and request separate bindings for each Deployment.</p>\n</blockquote>\n<p>The Secret allows you to run the service successfully. However, a problem appears each time you need to change the definition of the <code>yaml</code> file in the Deployment to specify the Secrets&#39; usage. The manual process of editing the file is tedious and time-consuming. Kyma handles it by offering a custom resource called ServiceBindingUsage. This custom resource applies the Kubernetes <a href=\"https://kubernetes.io/docs/concepts/workloads/pods/podpreset/\" target=\"_blank\">PodPreset</a> resource and allows you to enforce an automated flow in which the ServiceBindingUsage controller injects ServiceBindings into a given Application or Function.</p>\n<h2 id=\"details\">Details</h2>\n<p>This section provides a simplified, graphic representation of the basic operations in the Service Catalog.</p>\n<h3 id=\"provisioning-and-binding-flow\">Provisioning and binding flow</h3>\n<p>The diagram shows an overview of interactions between all resources related to Kyma provisioning and binding, and the reverting, deprovisioning, and unbinding operations.</p>\n<p><img src=\"assets/provisioning-and-binding.png\" alt=\"Kyma provisioning and binding\"></p>\n<p>The process of provisioning and binding invokes the creation of three custom resources:</p>\n<ul>\n<li>ServiceInstance</li>\n<li>ServiceBinding</li>\n<li>ServiceBindingUsage</li>\n</ul>\n<p>The system allows you to create these custom resources in any order, but within a timeout period.</p>\n<p>When you invoke the deprovisioning and unbinding actions, the system deletes all three custom resources. Similar to the creation process dependencies, the system allows you to delete ServiceInstance and ServiceBinding in any order, but within a timeout period. However, before you delete the ServiceBinding, make sure you remove the ServiceBindingUsage first. For more details, see the <a href=\"#delete-a-servicebinding\">section</a> on deleting a ServiceBinding.</p>\n<h3 id=\"provision-a-service\">Provision a service</h3>\n<p>To provision a service, create a ServiceInstance custom resource. Generally speaking, provisioning is a process in which the Service Broker creates a new instance of a service. The form and scope of this instance depends on the Service Broker.</p>\n<p><img src=\"assets/provisioning.png\" alt=\"Kyma provisioning\"></p>\n<h3 id=\"deprovision-a-service\">Deprovision a service</h3>\n<p>To deprovision a given service, delete the ServiceInstance custom resource. As part of this operation, the Service Broker deletes any resources created during the provisioning. When the process completes, the service becomes unavailable.</p>\n<p><img src=\"assets/deprovisioning.png\" alt=\"Kyma deprovisioning\"></p>\n<blockquote>\n<p><strong>NOTE:</strong> You can deprovision a service only if no corresponding ServiceBinding for a given ServiceInstance exists.</p>\n</blockquote>\n<h3 id=\"create-a-servicebinding\">Create a ServiceBinding</h3>\n<p>Kyma binding operation consists of two phases:</p>\n<ul>\n<li>The system gathers the information necessary to connect to the ServiceInstance and authenticate it. The Service Catalog handles this phase directly, without the use of any additional Kyma custom resources.</li>\n<li>The system must make the information it collected available to the application. Since the Service Catalog does not provide this functionality, you must create a ServiceBindingUsage custom resource.</li>\n</ul>\n<p><img src=\"assets/binding.png\" alt=\"Kyma binding\"></p>\n<blockquote>\n<p><strong>NOTE:</strong> The system allows you to create the ServiceBinding and ServiceBindingUsage resources at the same time.</p>\n</blockquote>\n<h3 id=\"bind-with-other-resources\">Bind with other resources</h3>\n<p>The UsageKind is a cluster-wide custom resource which allows you to bind a ServiceInstance to any resource. By default, Kyma provides two UsageKinds which enable binding either to a Deployment or Function. You can add more UsageKinds if you want to bind your ServiceInstance to other types of resources. The UsageKind contains information on the way in which binding to this custom resource is conducted. The ServiceBindingUsage uses this information to inject Secrets to the Application.</p>\n<p><img src=\"assets/usagekind.png\" alt=\"Kyma UsageKind\"></p>\n<h3 id=\"delete-a-servicebinding\">Delete a ServiceBinding</h3>\n<p>Kyma unbinding operation consists of two phases:</p>\n<ol>\n<li>Delete the ServiceBindingUsage.</li>\n<li>Delete the ServiceBinding.</li>\n</ol>\n<p><img src=\"assets/unbinding.png\" alt=\"Kyma unbinding\"></p>\n<blockquote>\n<p><strong>NOTE:</strong> The order in which you delete the two resources is important because the ServiceBindingUsage depends on the ServiceBinding. As long as the System Catalog does not automatically block deletions of the ServiceBinding with the ServiceBindingUsage connected to it, follow the recommended deletion order.</p>\n</blockquote>\n<p>See the <a href=\"013-details-unbinding-corner-case.md\">Corner Case</a> document that explains the consequences of deleting a ServiceBinding for an existing ServieBindingUsage.</p>\n"
    },
    {
      "order": "013-details-unbinding-corner-case",
      "title": "Unbinding corner case",
      "type": "Details",
      "source":
        "<p>As mentioned in the <strong>Provisioning and binding</strong> document, it is crucial that you follow the order in which you delete the ServiceBindingUsage and the ServiceBinding resources from the Service Catalog during the unbinding operation. According to the deletion process, you must delete the ServiceBindingUsage first and the ServiceBinding afterward, due to dependencies between the two resources.</p>\n<p>This diagram shows the consequences of deleting the ServiceBinding for the existing ServiceBindingUsage:</p>\n<p><img src=\"assets/unbinding-corner-case.png\" alt=\"Unbinding Corner case\"></p>\n<p>When you delete a ServiceBinding, the Service Catalog does not populate this information to the ServiceBindingUsage. It is possible that after you delete the ServiceBinding, the Service Catalog does not clearly show that the ServiceBindingUsage no longer works properly.</p>\n<p>After you remove the resources in an incorrect order, the application which consumes the resources that are linked using ServiceBindingUsage can be in one of the following states:</p>\n<ul>\n<li>If you do not restart the application, it still works correctly if the Service Broker does not discredit the injected information.</li>\n<li>If you do not restart the application, it can stop working correctly if the Service Broker discredits the injected information.</li>\n<li>If you restart the application, it does not start again because of the missing Secrets.</li>\n</ul>\n"
    },
    {
      "order": "014-details-etcd-database",
      "title": "Etcd Database",
      "type": "Details",
      "source":
        "<h2 id=\"overview\">Overview</h2>\n<p>The Service Catalog requires an <code>etcd</code> database cluster for a production use. \nIt has a separate <code>etcd</code> cluster defined in the Service Catalog <a href=\"https://github.com/kyma-project/kyma/blob/master/resources/core/charts/service-catalog/charts/etcd/templates/etcd-cluster.yaml\" target=\"_blank\">etcd</a> sub-chart. \nThe <a href=\"https://github.com/coreos/etcd-operator\" target=\"_blank\">etcd-operator</a> installs and manages the <code>etcd</code> clusters deployed to Kubernetes,\nand also automates tasks related to operating an <code>etcd</code> cluster, for example executing <a href=\"https://github.com/coreos/etcd-operator/blob/master/doc/user/walkthrough/backup-operator.md\" target=\"_blank\">backup</a> and <a href=\"https://github.com/coreos/etcd-operator/blob/master/doc/user/walkthrough/restore-operator.md\" target=\"_blank\">restore</a> procedures. </p>\n<blockquote>\n<p><strong>NOTE:</strong> The <a href=\"https://github.com/coreos/etcd-operator\" target=\"_blank\">etcd-operator</a> is Namespace-scoped and is installed only in <code>kyma-system</code> Namespace.</p>\n</blockquote>\n<h2 id=\"details\">Details</h2>\n<p>This section describes the backup and restore processes of the <code>etcd</code> cluster for the Service Catalog.</p>\n<h3 id=\"backup\">Backup</h3>\n<p>To execute the backup process, you must set the following values in the <a href=\"https://github.com/kyma-project/kyma/blob/master/resources/core/values.yaml\" target=\"_blank\">core</a> chart:</p>\n<table>\n<thead>\n<tr>\n<th>Property name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>etcd-operator.backupOperator.enabled</strong></td>\n<td>If set to true, the <a href=\"https://github.com/kyma-project/kyma/blob/master/resources/core/charts/service-catalog/charts/etcd\" target=\"_blank\">etcd-operator</a> chart installs the <a href=\"https://github.com/kyma-project/kyma/blob/master/resources/core/charts/etcd-operator/templates/backup-deployment.yaml\" target=\"_blank\">etcd-backup-operator</a>. The etcd-operator also creates the <a href=\"https://github.com/kyma-project/kyma/blob/master/resources/core/charts/etcd-operator/templates/etcd-backup-abs-storage-secret.yaml\" target=\"_blank\">Secret</a> with the <strong>storage-account</strong> and <strong>storage-key</strong> keys.</td>\n</tr>\n<tr>\n<td><strong>etcd-operator.backupOperator.abs.storageAccount</strong></td>\n<td>The name of the storage account for the Azure Blob Storage (ABS). It stores the value for the <strong>storage-account</strong> Secret key.</td>\n</tr>\n<tr>\n<td><strong>etcd-operator.backupOperator.abs.storageKey</strong></td>\n<td>The key value of the storage account for the ABS. It stores the value for the <strong>storage-key</strong> Secret key.</td>\n</tr>\n<tr>\n<td><strong>global.etcdBackupABS.containerName</strong></td>\n<td>The ABS container to store the backup. If set, the Service Catalog <a href=\"https://github.com/kyma-project/kyma/blob/master/resources/core/charts/service-catalog/charts/etcd/templates/backup-job.yaml\" target=\"_blank\">sub-chart</a> installs the CronJob which executes periodically the <a href=\"https://github.com/kyma-project/kyma/blob/master/tools/etcd-backup\" target=\"_blank\">Etcd Backup</a> application. For more information on how to configure the backup CronJob, see the <a href=\"https://github.com/kyma-project/kyma/blob/master/tools/etcd-backup/README.md\" target=\"_blank\">Etcd Backup</a> documentation.</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>NOTE:</strong> If you set the <strong>storageAccount</strong>, <strong>storageKey</strong>, and <strong>containerName</strong> properties, the <strong>etcd-operator.backupOperator.enabled</strong> must be set to <code>true</code>. </p>\n</blockquote>\n<h3 id=\"restore\">Restore</h3>\n<p>Follow this instruction to restore an <code>etcd</code> cluster from the existing backup.\nExecute all restore commands in the <code>docs/service-catalog/docs</code> directory.</p>\n<blockquote>\n<p><strong>NOTE:</strong> You must have the backup files created by the CronJob backup application from the previous section.</p>\n</blockquote>\n<ol>\n<li><p>Install the etcd-restore-operator:</p>\n<pre><code class=\"lang-bash\">kubectl create -f assets/etcd-restore/operator-deploy.yaml\n</code></pre>\n</li>\n<li><p>Create the EtcdRestore Custom Resource Definition:</p>\n<pre><code class=\"lang-bash\">kubectl create -f assets/etcd-restore/restore-crd.yaml\n</code></pre>\n</li>\n<li><p>Export the <strong>ABS_PATH</strong> environment variable with the path to the last successful backup file.</p>\n<pre><code class=\"lang-bash\">export ABS_PATH=$(kubectl get cm -n kyma-system sc-recorded-etcd-backup-data -o=jsonpath=&#39;{.data.abs-backup-file-path-from-last-success}&#39;)\n</code></pre>\n</li>\n</ol>\n<blockquote>\n<p><strong>NOTE:</strong> The ConfigMap name is defined <a href=\"https://github.com/kyma-project/kyma/blob/master/resources/core/charts/service-catalog/charts/etcd/templates/backup-job.yaml\" target=\"_blank\">here</a> as the <strong>APP_BACKUP_CONFIG_MAP_NAME_FOR_TRACING</strong>.</p>\n</blockquote>\n<ol>\n<li>Export the <strong>SECRET_NAME</strong> environment variable with the Secret name to the ABS:<pre><code class=\"lang-bash\">export SECRET_NAME=etcd-backup-abs-credentials\n</code></pre>\n</li>\n</ol>\n<blockquote>\n<p><strong>NOTE:</strong> The Secret name is defined <a href=\"https://github.com/kyma-project/kyma/blob/master/resources/core/values.yaml\" target=\"_blank\">here</a> under the <strong>global.etcdBackupABS.secretName</strong> property.</p>\n</blockquote>\n<ol>\n<li>Create the EtcdRestore Custom Resource which triggers a restore process:<pre><code class=\"lang-bash\">sed -e &quot;s|&lt;full-abs-path&gt;|$ABS_PATH|g&quot;     -e &quot;s|&lt;abs-secret&gt;|$SECRET_NAME|g&quot;     assets/etcd-restore/restore-cr.tpl.yaml     | kubectl create -f -\n</code></pre>\n</li>\n</ol>\n<p>Now the etcd-restore-operator restores a new cluster from the backup.</p>\n<ol>\n<li>See the status of the Pods and wait until all of them are ready:<pre><code class=\"lang-bash\">watch -n 1 kubectl get pod -n kyma-system -l app=etcd,etcd_cluster=core-service-catalog-etcd\n</code></pre>\n</li>\n</ol>\n<p>Before going to the next step, check the number of the Pods which should be in the<code>RUNNING</code> state.\nRun this command:</p>\n<pre><code class=\"lang-bash\">kubectl get EtcdCluster core-service-catalog-etcd -n kyma-system  -o jsonpath=&#39;{.spec.size}&#39;\n</code></pre>\n<ol>\n<li><p>Restart the Service Catalog <code>apiserver</code> Pod:</p>\n<pre><code class=\"lang-bash\">kubectl delete pod -n kyma-system -l app=core-catalog-apiserver\n</code></pre>\n</li>\n<li><p>Restart the Service Catalog <code>controller-manager</code> Pod:</p>\n<pre><code class=\"lang-bash\">kubectl delete pod -n kyma-system -l app=core-catalog-controller-manager\n</code></pre>\n</li>\n<li><p>Clean-up the etcd-restore-operator and EtcdRestore CR:</p>\n<pre><code class=\"lang-bash\">kubectl delete -f assets/etcd-restore/restore-cr.tpl.yaml\nkubectl delete -f assets/etcd-restore/restore-crd.yaml\nkubectl delete -f assets/etcd-restore/operator-deploy.yaml\n</code></pre>\n</li>\n</ol>\n<!-- These absolute paths should be replaced with the relative links after adding this functionality to Kyma -->\n"
    },
    {
      "order": "020-architecture-service-catalog",
      "title": "Architecture",
      "type": "Architecture",
      "source":
        "<p>The diagram and steps describe the basic Service Catalog workflow:</p>\n<p><img src=\"assets/service-catalog-flow.png\" alt=\"Service Catalog flow\"></p>\n<ol>\n<li><p>During the Kyma installation, the system registers the default Service Brokers in the Kyma cluster. The cluster administrator can manually register other Service Brokers in the Kyma cluster.</p>\n</li>\n<li><p>Each ClusterServiceBroker specifies ClusterServiceClasses and service variations called ClusterServicePlans that are available to Kyma users.</p>\n</li>\n<li><p>The user gets a list of the available services in the Kyma web console or CLI.</p>\n</li>\n<li><p>The user chooses a ClusterServiceClass and requests to create its new instance in a given Environment.</p>\n</li>\n<li><p>The user creates a binding to the ServiceInstance to allow the user&#39;s application to access the provisioned service.</p>\n</li>\n</ol>\n"
    },
    {
      "order": "030-cli-reference",
      "title": "CLI reference",
      "type": "CLI reference",
      "source":
        "<h2 id=\"overview\">Overview</h2>\n<p>Management of the Service Catalog is based on Kubernetes resources and the custom resources specifically defined for Kyma. Manage all of these resources through <a href=\"https://kubernetes.io/docs/reference/kubectl/overview/\" target=\"_blank\">kubectl</a>.</p>\n<h2 id=\"details\">Details</h2>\n<p>This section describes the resource names to use in the kubectl command line, the command syntax, and examples of use.</p>\n<h3 id=\"resource-types\">Resource types</h3>\n<p>Service Catalog operations use the following resources:</p>\n<table>\n<thead>\n<tr>\n<th>Singular name</th>\n<th>Plural name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>clusterserviceclass</td>\n<td>clusterserviceclasses</td>\n</tr>\n<tr>\n<td>clusterserviceplan</td>\n<td>clusterserviceplans</td>\n</tr>\n<tr>\n<td>clusterservicebroker</td>\n<td>clusterservicebrokers</td>\n</tr>\n<tr>\n<td>serviceinstance</td>\n<td>serviceinstances</td>\n</tr>\n<tr>\n<td>servicebinding</td>\n<td>servicebindings</td>\n</tr>\n<tr>\n<td>servicebindingusage</td>\n<td>servicebindingusages</td>\n</tr>\n<tr>\n<td>secret</td>\n<td>secrets</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"syntax\">Syntax</h3>\n<p>Follow the <code>kubectl</code> syntax, <code>kubectl {command} {type} {name} {flags}</code>, where:</p>\n<ul>\n<li>{command} is any command, such as <code>describe</code>.</li>\n<li>{type} is a resource type, such as <code>clusterserviceclass</code>.</li>\n<li>{name} is the name of a given resource type. Use {name} to make the command return the details of a given resource.</li>\n<li>{flags} specifies the scope of the information. For example, use flags to define the Namespace from which to get the information.</li>\n</ul>\n<h3 id=\"examples\">Examples</h3>\n<p>The following examples show how to create a ServiceInstance, how to get a list of ClusterServiceClasses and a list of ClusterServiceClasses with human-readable names, a list of ClusterServicePlans, and a list of all ServiceInstances.</p>\n<ul>\n<li>Create a ServiceInstance using the example of the Redis ServiceInstance for the 0.1.3 version of the Service Catalog:</li>\n</ul>\n<pre><code>cat &lt;&lt;EOF | kubectl create -f -\napiVersion: servicecatalog.k8s.io/v1beta1\nkind: ServiceInstance\nmetadata:\n  name: my-instance\n  namespace: stage\n\nspec:\n  clusterServiceClassExternalName: redis\n  clusterServicePlanExternalName: micro\n  parameters:\n     &quot;imagePullPolicy&quot;: &quot;Always&quot;\nEOF\n</code></pre><ul>\n<li>Get the list of all ClusterServiceClasses:<pre><code>kubectl get clusterserviceclasses\n</code></pre></li>\n<li><p>Get the list of all ClusterServiceClasses and their human-readable names:</p>\n<pre><code>kubectl get clusterserviceclasses -o=custom-columns=NAME:.metadata.name,EXTERNAL NAME:.spec.externalName\n</code></pre></li>\n<li><p>Get the list of all ClusterServicePlans and associated ClusterServiceClasses:</p>\n<pre><code>kubectl get clusterserviceplans -o=custom-columns=NAME:.metadata.name,EXTERNAL NAME:.spec.externalName,EXTERNAL SERVICE CLASS:.spec.clusterServiceClassRef\n</code></pre></li>\n<li>Get the list of all ServiceInstances from all Namespaces:<pre><code>kubectl get serviceinstances --all-namespaces\n</code></pre></li>\n</ul>\n"
    }
  ]
}
