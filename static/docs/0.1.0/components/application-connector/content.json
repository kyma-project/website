{
  "id": "application-connector",
  "displayName": "Application Connector",
  "description": "Overal documentation for Application Connector",
  "type": "Components",
  "docs": [
    {
      "order": "001-overview-application-connector",
      "title": "The Application Connector",
      "type": "Overview",
      "source":
        "<p>The Application Connector is a proprietary Kyma implementation that allows you to connect with external solutions. The Application Connector consists of three\ncomponents that ensure the security of the connection and the access to all of the external solution&#39;s Events and APIs. The implementation handles routing of the calls and Events coming from an external solution to Kyma, and the API calls sent from Kyma to the connected external solution.</p>\n<p>These are the components of the Application Connector:</p>\n<ul>\n<li>The <strong>Connector Service</strong> generates the required certificates and ensures a secure and trusted connection between Kyma and an external solution.</li>\n<li>The <strong>Metadata Service</strong> allows you to register all of the external solution&#39;s APIs and Event catalogs which Kyma consumes. You can register the APIs along with additional documentation and Swagger files.</li>\n<li>The <strong>Gateway Service</strong> proxies the API calls sent from Kyma to the connected external solution and handles OAuth2 tokens.</li>\n<li>The <strong>Event Service</strong> delivers the Events sent from a connected external solution to Kyma.</li>\n</ul>\n<p>To ensure maximum security and separation, a single instance of the Gateway Service allows you to connect only to a single external solution. This connection is represented in Kyma by a <a href=\"./014-details-remote-environment.md\">Remote Environment</a>.</p>\n"
    },
    {
      "order": "005-architecture-application-connector",
      "title": "Application Connector components",
      "type": "Architecture",
      "source":
        "<p>The Application Connector consists of the following components:</p>\n<ul>\n<li><strong>Ingress-Gateway controller</strong> responsible for validating certificates and exposing multiple Application Connectors to the external world</li>\n<li><strong>Gateway</strong> responsible for registering available services (APIs, Events) and proxying calls to the registered solution</li>\n<li><strong>Remote Environment CRD instance</strong> responsible for storing a solution&#39;s metadata</li>\n<li><strong>Minio bucket</strong> responsible for storing API specifications, Event Catalog, and documentation</li>\n</ul>\n<p>To connect a new solution, you must deploy a new Application Connector. Every instance of the external solution connected to Kyma has only one instance of the Application Connector dedicated to it. See the <strong>Deploying a new Application Connector</strong> document to learn how to deploy a new Application Connector.</p>\n<p><img src=\"assets/001-application-connector.png\" alt=\"Architecture Diagram\"></p>\n"
    },
    {
      "order": "006-architecture-ingress-gateway",
      "title": "Ingress-Gateway controller",
      "type": "Architecture",
      "source":
        "<p>The Ingress-Gateway controller exposes the Kyma gateways to the outside world by the public IP address/DNS name.\nThe DNS name of the Ingress is <code>gateway.[cluster-dns]</code>. For example: <code>gateway.servicemanager.cluster.kyma.cx</code>.</p>\n<p>A particular Remote Environment is exposed as a path. For example, to reach the Gateway for the Remote Environment named <code>ec-default</code>, use the following URL: <code>gateway.servicemanager.cluster.kyma.cx/ec-default</code></p>\n<p>This is an example of how to get all ServiceClasses:</p>\n<pre><code class=\"lang-console\">http GET https://gateway.servicemanager.cluster.kyma.cx/ec-default/v1/metadata/services --cert=ec-default.pem\n</code></pre>\n"
    },
    {
      "order": "010-details-ac-deployment",
      "title": "Deploy a new Application Connector",
      "type": "Details",
      "source":
        "<p>By default, Kyma comes with two Application Connectors preconfigured. Those Application Connectors are installed in the <code>kyma-integration</code> Namespace.</p>\n<h3 id=\"install-a-application-connector-locally\">Install a Application Connector locally</h3>\n<p>For installation on Minikube, provide the NodePort as shown in this example:</p>\n<pre><code class=\"lang-bash\">helm install --name {remote-environment-name} --set deployment.args.sourceType=commerce --set global.isLocalEnv=true --set service.externalapi.nodePort=32001 --namespace kyma-integration ./resources/remote-environments\n</code></pre>\n<p>You can override the following parameters:</p>\n<ul>\n<li><strong>sourceEnvironment</strong> - the Event source environment name.</li>\n<li><strong>sourceType</strong> - the Event source type.</li>\n<li><strong>sourceNamespace</strong> - the organization that publishes the Event.</li>\n</ul>\n<h3 id=\"install-an-application-connector-on-the-cluster\">Install an Application Connector on the cluster</h3>\n<p>To add a new Application Connector to the cluster, download <a href=\"assets/remote-environments.zip\">remote-environments.zip</a> package, unpack it, and place the content in the project&#39;s directory.</p>\n<p>To install a Remote Environment, use:</p>\n<pre><code class=\"lang-bash\">helm install --name {remote-environment-name} --set deployment.args.sourceType=commerce --set global.isLocalEnv=false --set global.domainName={domain-name} --namespace kyma-integration ./remote-environments\n</code></pre>\n<ul>\n<li>global.domainName override is required and cannot be omitted, example values may look like:<pre><code>wormhole.cluster.kyma.cx\nnightly.cluster.kyma.cx\n</code></pre></li>\n</ul>\n<p>You can override the following parameters:</p>\n<ul>\n<li><strong>sourceEnvironment</strong> is the Event source environment name.</li>\n<li><strong>sourceType</strong> is the Event source type.</li>\n<li><strong>sourceNamespace</strong> is the organization that publishes the Event.</li>\n</ul>\n<h3 id=\"working-with-helm\">Working with Helm</h3>\n<p>Helm provides the following commands:</p>\n<ul>\n<li><code>helm list</code> - lists existing Helm releases</li>\n<li><code>helm test [release-name]</code> - tests a release</li>\n<li><code>helm get [release-name]</code> - shows the contents of <code>.yaml</code> files that make up the release</li>\n<li><code>helm status [release-name]</code> - shows the status of a named release</li>\n<li><code>helm delete [release-name]</code> - deletes a release from Kubernetes</li>\n</ul>\n<p>The full list of the Helm commands is available in the <a href=\"https://docs.helm.sh/helm/\" target=\"_blank\">Helm documentation</a>.\nYou can also use the <code>helm --help</code> command.</p>\n<h3 id=\"use-kubectl\">Use kubectl</h3>\n<p>To check if everything runs correctly, use kubectl:\n<code>kubectl get pods -n kyma-integration</code><br><code>kubectl get services -n kyma-integration</code>  </p>\n<h3 id=\"examples\">Examples</h3>\n<p>Follow the <strong>Running a new Application Connector on Minikube</strong> tutorial to learn how to get a new Application Connector running on Minikube.</p>\n"
    },
    {
      "order": "011-details-ac-security",
      "title": "Application Connector security",
      "type": "Details",
      "source":
        "<p>To provide maximum security, the Application Connector uses TLS protocol with Client Authentication enabled. As a result, whoever wants to connect to the Application Connector must present a valid client certificate, which is dedicated to a specific Remote Environment. In this way, the traffic is fully encrypted and the client has a valid identity. Kyma representatives generate client certificates.</p>\n<h3 id=\"disable-ssl-certificate-verification\">Disable SSL certificate verification</h3>\n<p>You can disable the SSL certificate verification in the communication between Kyma and a Remote Environment to allow Kyma to send requests and data to an unsecured Remote Environment. Disabling the certificate verification can be useful in certain testing scenarios.</p>\n<blockquote>\n<p><strong>NOTE:</strong> By default, the SSL certificate verification is enabled when sending data and requests to every Remote Environment.</p>\n</blockquote>\n<ul>\n<li><p>Disable SSL certificate verification for communication between Kyma and an existing Remote Environment</p>\n<ul>\n<li>Edit the <code>ec-default-gateway</code> Deployment in the <code>kyma-integration</code> Namespace. Run:<pre><code>kubectl -n kyma-integration edit deployment ec-default-gateway\n</code></pre></li>\n<li>Edit the Deployment in Vim. Select <code>i</code> to start editing.</li>\n<li>Find the <strong>skipVerify</strong> parameter and change its value to <code>true</code>.</li>\n<li>Select <code>esc</code>, type <code>:wq</code>, and select <code>enter</code> to write and quit.</li>\n</ul>\n</li>\n<li><p>Install a new Remote Environment with the certificate verification disabled</p>\n<p>Disable the certification by adding the <code>--skipVerify=true</code> flag to the <code>helm install</code> command. This is an example of a command that installs a new Remote Environment with SSL certificate verification disabled:</p>\n<pre><code>helm install --name {remote-environment-name} --set deployment.args.sourceType=commerce --set global.isLocalEnv=false --set global.domainName={domain-name} --namespace kyma-integration ./remote-environments --skipVerify=true\n</code></pre></li>\n</ul>\n"
    },
    {
      "order": "012-details-serviceclass-documentation",
      "title": "Consuming applications through the Service Catalog",
      "type": "Details",
      "source":
        "<p>To consume the external solutions, referred to as Remote Environments, register them in Kyma. As a result of registering the external solutions, ClusterServiceClasses are created in the Service Catalog.</p>\n<h3 id=\"how-an-external-solution-is-represented-in-the-service-catalog\">How an external solution is represented in the Service Catalog</h3>\n<p>This document presents the example referring to the Order API ClusterServiceClass. This class is registered in Kyma with a <code>targetUrl</code> pointing to <code>https://www.orders.com/v1/orders</code>. The response <code>id</code> during the registration is <code>01a702b8-e302-4e62-b678-8d361b627e49</code>.</p>\n<p>As a result, the Remote Environment Broker, which provides ServiceClasses to the Service Catalog, contains the class with the following <code>id</code>:</p>\n<pre><code>re-{remote-environment-name}-gateway-{service-id}\n</code></pre><p>The <code>{service-id}</code> is an identifier returned in the process of registration. The <code>{remote-environment-name}</code> is the name of the Remote Environment created in Kyma. It represents an instance of the external solution that owns the registered service. Such an <code>id</code> in the Service Broker is referred to as a <code>name</code> of the ClusterServiceClass in the Service Catalog.\nExample <code>name</code>:</p>\n<pre><code>re-ec-default-gateway-01a702b8-e302-4e62-b678-8d361b627e49\n</code></pre><h3 id=\"service-consumption\">Service consumption</h3>\n<p>After provisioning the Order API in the environment using the Service Catalog, you can bind it to your application and consume it by calling the <code>url</code> provided during the binding operation.</p>\n<p>The following example shows the Gateway <code>url</code> provided for your applications:</p>\n<pre><code>re-ec-default-gateway-01a702b8-e302-4e62-b678-8d361b627e49.kyma-integration/orders\n</code></pre><p>The Gateway proxies all your requests to <code>https://www.orders.com/v1/orders</code>, in the case of the Order API example. You do not have to obtain the OAuth token in your application to access the API because the Gateway does it for you.</p>\n"
    },
    {
      "order": "013-details-api",
      "title": "API",
      "type": "Details",
      "source":
        "<p>Find the Application Connector API documentation in the included Swagger files.</p>\n<ul>\n<li>See <a href=\"assets/eventsapi.yaml\">this file</a> for the Events API specification.</li>\n<li>See <a href=\"assets/metadataapi.yaml\">this file</a> for the Metadata API specification.</li>\n</ul>\n<p>For convenient viewing, open these files using <a href=\"https://editor.swagger.io/\" target=\"_blank\">this</a> Swagger editor.</p>\n"
    },
    {
      "order": "014-details-remote-environment",
      "title": "RemoteEnvironment custom resource",
      "type": "Details",
      "source":
        "<h2 id=\"overview\">Overview</h2>\n<p>This file contains information about the RemoteEnvironment custom resource.\nThe RemoteEnvironment resource registers a remote environment in Kyma. The RemoteEnvironment resource defines APIs that the remote environment offers, such as Orders API in the EC. As a result, the RemoteEnvironment is mapped to service classes in the Service Catalog.</p>\n<h2 id=\"description\">Description</h2>\n<p>The RemoteEnvironment <strong>spec</strong> field contains the following attributes:</p>\n<ul>\n<li><strong>source</strong> which identifies the remote environment in the cluster</li>\n<li><strong>services</strong> which contains all services that the remote environment provides</li>\n<li><strong>accessLabel</strong> which labels the environment (Kubernetes Namespace)</li>\n</ul>\n<p>The RemoteEnvironment <strong>spec.services</strong> list contains objects with the following fields:</p>\n<ul>\n<li><strong>id</strong> is a required unique field that the UI uses to fetch JSON schemas and documents. This filed maps to the <strong>metadata.remoteEnvironmentServiceId</strong> OSB service attribute.</li>\n<li><strong>displayName</strong> is a required field which maps to the <strong>metadata.displayName</strong> OSB service attribute. It is normalized and mapped to the <strong>name</strong> field from the <a href=\"https://github.com/openservicebrokerapi/servicebroker/blob/v2.12/spec.md#service-objects\" target=\"_blank\">OSB Service object specification</a>.</li>\n<li><strong>longDescription</strong> is a required field which maps to the <strong>metadata.longDescription</strong> OSB service attribute.</li>\n<li><strong>providerDisplayName</strong> is a required field which maps to the <strong>metadata.providerDisplayName</strong> OSB service attribute.</li>\n<li><strong>tags</strong> is an optional field which maps to the <strong>tags</strong> OSB service attribute. Tags provide a flexible mechanism to expose a classification, attribute, or base technology of a service.</li>\n<li><strong>entries</strong> is a field that contains information about APIs and events. This is a collection which must contain at least one element,\nand at most one element of the API type and one of the event type. An API entry must contain <strong>gatewayUrl</strong> and <strong>accessLabel</strong> fields. <strong>accessLabel</strong> must be unique for all the services of all RemoteEnvironments.</li>\n</ul>\n<p>The OSB Service contains one default plan.</p>\n<h2 id=\"example\">Example</h2>\n<p>This is an example of the RemoteEnvironment custom resource:</p>\n<pre><code class=\"lang-yaml\">apiVersion: remoteenvironment.kyma.cx/v1alpha1\nkind: RemoteEnvironment\nmetadata:\n  name: re-prod\nspec:\n  source:\n    environment: &quot;production&quot;\n    type: &quot;commerce&quot;\n    namespace: &quot;com.github&quot;\n  description: &quot;RE description&quot;\n  accessLabel: &quot;re-access-label&quot;\n  services:\n    - id: &quot;ac031e8c-9aa4-4cb7-8999-0d358726ffaa&quot;\n\n      displayName: &quot;Promotions&quot;\n      longDescription: &quot;Promotions APIs&quot;\n      providerDisplayName: &quot;Organization name&quot;\n\n      tags:\n      - occ\n      - Promotions\n\n      entries:\n      - type: API\n        gatewayUrl: &quot;http://promotions-gateway.production.svc.cluster.local&quot;\n        accessLabel: &quot;access-label-1&quot;\n        targetUrl: &quot;http://10.0.0.54:9932/occ/promotions&quot;\n        oauthUrl: &quot;http://10.0.0.55:10219/occ/token&quot;\n        credentialsSecretName: &quot;re-ac031e8c-9aa4-4cb7-8999-0d358726ffaa&quot;\n      - type: Events\n</code></pre>\n<p>This Remote Environment is mapped to the OSB Service:</p>\n<pre><code class=\"lang-json\">{\n  &quot;name&quot;:        &quot;ac031e8c-9aa4-4cb7-8999-0d358726ffaa&quot;,\n  &quot;id&quot;:          &quot;ac031e8c-9aa4-4cb7-8999-0d358726ffaa&quot;,\n  &quot;description&quot;: &quot;Promotions APIs&quot;,\n  &quot;metadata&quot;: {\n    &quot;displayName&quot;:         &quot;Promotions&quot;,\n    &quot;longDescription&quot;:     &quot;Promotions APIs&quot;,\n    &quot;providerDisplayName&quot;: &quot;Organization name&quot;,\n\n    &quot;labelsRequiredOnInstance&quot;: &quot;access-label-1&quot;,\n    &quot;remoteEnvironmentServiceId&quot;: &quot;ac031e8c-9aa4-4cb7-8999-0d358726ffaa&quot;,\n    &quot;source&quot;: {\n          &quot;environment&quot;: &quot;production&quot;,\n          &quot;type&quot;: &quot;commerce&quot;,\n          &quot;namespace&quot;: &quot;com.github&quot;\n     }\n  },\n  &quot;tags&quot;: [&quot;occ&quot;, &quot;promotions&quot;],\n\n  &quot;plans&quot;:[\n    {\n      &quot;name&quot;: &quot;default&quot;,\n      &quot;id&quot;: &quot;global unique GUID&quot;,\n      &quot;description&quot;: &quot;Default plan&quot;,\n      &quot;metadata&quot;: {\n        &quot;displayName&quot;: &quot;Default&quot;\n      }\n    }\n  ]\n}\n</code></pre>\n"
    },
    {
      "order": "015-details-one-click-configuration",
      "title": "Automatic connection configuration",
      "type": "Details",
      "source":
        "<h2 id=\"overview\">Overview</h2>\n<p>Kyma Application Connector allows to authenticate and securely communicate with different systems. Kyma provides an easy way to set up these external solutions with the mechanism for automatic connection configuration.</p>\n<h2 id=\"flow-description\">Flow description</h2>\n<p>Automatic configuration flow is presented in following diagram:\n<img src=\"./assets/002-automatic-configuration.png\" alt=\"Automatic Configuration Flow\"></p>\n<p>This example assumes that the new Remote Environment already exists and it is in the <code>disconnected</code> state, which means that there are no solutions connected to it.</p>\n<p>On the diagram, Admin on the Kyma side and on external system side is the same person.</p>\n<ol>\n<li>The admin requests for a token using the CLI or the UI and receives a link with the token, which is valid for a limited period of time.</li>\n<li>The admin passes the token to the external system, which requests for information regarding the Kyma installation. In the response, it receives the following information:<ul>\n<li>the URL to which a third-party solution sends its Certificate Signing Request (CSR)</li>\n<li>URLs of the available APIs</li>\n<li>information required to generate a CSR</li>\n</ul>\n</li>\n<li>The external system generates a CSR based on the information provided by Kyma and sends the CSR to the designated URL. In the response, the external system receives a signed certificate. It can use the certificate to authenticate and safely communicate with Kyma.</li>\n</ol>\n<h2 id=\"configuration-steps\">Configuration steps</h2>\n<p>Follow these steps to configure the automatic connection between the Kyma&#39;s Application Connector and an external system:</p>\n<ol>\n<li><p>Request a token through the terminal.</p>\n<blockquote>\n<p><strong>NOTE:</strong> Alternatively, use the UI to request it.</p>\n</blockquote>\n<p> There is no direct way to request the token from command line. You can do it using <code>kubectl port-forward</code> or <code>kubectl proxy</code>.</p>\n<ul>\n<li><p>Request:</p>\n<p>In the first terminal run:</p>\n<pre><code>kubectl -n=kyma-integration port-forward svc/connector-service-internal-api 8080:8080\n</code></pre><p>And send the request in the second one.</p>\n<pre><code>curl -X POST http://localhost:8080/v1/remoteenvironments/{remote-environment-name}/tokens\n</code></pre></li>\n<li>Response:<pre><code class=\"lang-json\">{\n  &quot;url&quot;:&quot;https://connector-service.CLUSTER_NAME.kyma.cluster.cx/v1/remoteenvironments/{remote-environment-name}/info?token=example-token-123&quot;,\n  &quot;token&quot;:&quot;example-token-123&quot;\n}\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>Use the provided link to fetch information about the Kyma&#39;s URLs and CSR configuration.</p>\n<ul>\n<li>Request:<pre><code>curl https://connector-service.CLUSTER_NAME.kyma.cluster.cx/v1/remoteenvironments/{remote-environment-name}/info?token=example-token-123\n</code></pre></li>\n<li>Response:<pre><code class=\"lang-json\">{\n  &quot;csrUrl&quot;: &quot;https://connector-service.CLUSTER_NAME.kyma.cluster.cx/v1/remoteenvironments/{remote-environment-name}/client-certs?token=example-token-456&quot;,\n  &quot;api&quot;:{\n      &quot;metadataUrl&quot;:      &quot;https://gateway.CLUSTER_NAME.kyma.cluster.cx/{remote-environment-name}/v1/metadata/services&quot;,\n      &quot;eventsUrl&quot;:        &quot;https://gateway.CLUSTER_NAME.kyma.cluster.cx/{remote-environment-name}/v1/events&quot;,\n      &quot;certificatesUrl&quot;:  &quot;https://connector-service.CLUSTER_NAME.kyma.cluster.cx/v1/remoteenvironments/{remote-environment-name}&quot;,\n  },\n  &quot;certificate&quot;:{\n      &quot;subject&quot;:&quot;OU=Test,O=Test,L=Blacksburg,ST=Virginia,C=US,CN=ec-default&quot;,\n      &quot;extensions&quot;: &quot;&quot;,\n      &quot;key-algorithm&quot;: &quot;rsa2048&quot;,\n  }\n}\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>Use values received in the <code>certificate.subject</code> field to create a CSR. After the CSR is ready, make the following call:</p>\n<ul>\n<li>Request:<pre><code>curl -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;csr&quot;:&quot;BASE64_ENCODED_CSR_HERE&quot;}&#39; https://connector-service.CLUSTER_NAME.kyma.cluster.cx/v1/remoteenvironments/{remote-environment-name}/client-certs?token=example-token-456\n</code></pre></li>\n<li><p>Response:</p>\n<pre><code class=\"lang-json\">{\n  &quot;crt&quot;:&quot;BASE64_ENCODED_CRT&quot;\n}\n</code></pre>\n<p>Use the following command to generate the example CSR:</p>\n<pre><code>openssl req -new -out test.csr -key hmc-default.key -subj &quot;/OU=OrgUnit/O=Organization/L=Waldorf/ST=Waldorf/C=DE/CN=ec-default&quot;\n</code></pre></li>\n</ul>\n</li>\n<li><p>The <code>crt</code> field contains a valid base64-encoded PEM block of a certificate signed by the Kyma&#39;s CA.</p>\n</li>\n<li><p>The external system can now use the created certificate to securely authenticate and communicate with Kyma&#39;s Application Connector.</p>\n</li>\n</ol>\n"
    },
    {
      "order": "016-details-passing-header-with-access-token",
      "title": "Passing a header with the access token",
      "type": "Details",
      "source":
        "<h1 id=\"passing-a-header-with-the-access-token\">Passing a header with the access token</h1>\n<h2 id=\"overview\">Overview</h2>\n<p>The Application Connector supports passing the access token directly in the request.</p>\n<h2 id=\"passing-the-access-token\">Passing the access token</h2>\n<p>If the user is already authenticated to the service deployed on Kyma, the access token can be passed via a custom <code>Access-token</code> header. If the Application Connector detects that the custom header is present, instead of obtaining a new token, it passes the received one as a <code>Bearer</code> token in the <code>Authorization</code> header.</p>\n<h2 id=\"example\">Example</h2>\n<p>Find the example of passing the EC access token to the Application Connector using Lambda in the <a href=\"https://github.com/kyma-project/examples/tree/master/call-ec\" target=\"_blank\"><code>examples</code></a> repository.</p>\n"
    },
    {
      "order": "030-examples-ac",
      "title": "Examples",
      "type": "Examples",
      "source":
        "<p>This is a tutorial on how to get a new Application Connector running on Minikube.</p>\n<p>To integrate a new Remote Environment marked as <code>Production</code>, you can use the following values:</p>\n<ul>\n<li><strong>sourceEnvironment</strong> = <code>production</code></li>\n<li><strong>sourceType</strong> = <code>marketing</code></li>\n<li><strong>sourceNamespace</strong> = <code>organization.com</code></li>\n</ul>\n<p>Start with:</p>\n<pre><code class=\"lang-bash\">helm install --name hmc-prod --set deployment.args.sourceType=marketing --set deployment.args.sourceEnvironment=production --set global.isLocalEnv=true --set service.externalapi.nodePort=32002 --namespace kyma-integration ./remote-environments\n</code></pre>\n<p>Your output looks like this:</p>\n<pre><code class=\"lang-bash\">NAME:   hmc-prod                  \nLAST DEPLOYED: Fri Apr 20 11:25:44 2018\nNAMESPACE: kyma-integration\nSTATUS: DEPLOYED\n\nRESOURCES:\n==&gt; v1/Role\nNAME                   AGE\nhmc-prod-gateway-role  0s\n\n==&gt; v1/RoleBinding\nNAME                          AGE\nhmc-prod-gateway-rolebinding  0s\n\n==&gt; v1/Service\nNAME                           TYPE       CLUSTER-IP      EXTERNAL-IP  PORT(S)         AGE\nhmc-prod-gateway-external-api  NodePort   10.108.126.243  &lt;none&gt;       8081:32002/TCP  0s\nhmc-prod-gateway-echo          ClusterIP  10.100.94.12    &lt;none&gt;       8080/TCP        0s\n\n==&gt; v1beta1/Deployment\nNAME              DESIRED  CURRENT  UP-TO-DATE  AVAILABLE  AGE\nhmc-prod-gateway  1        1        1           0          0s\n\n==&gt; v1alpha1/RemoteEnvironment\nNAME      AGE\nhmc-prod  0s\n\n==&gt; v1/Pod(related)\nNAME                               READY  STATUS             RESTARTS  AGE\nhmc-prod-gateway-67469769c8-6lgjl  0/1    ContainerCreating  0         0s\n\n\nNOTES:\n------------------------------------------------------------------------------------------------------------------------\n\nThank you for installing Gateway helm chart for Kubernetes version 0.0.1.\n\nTo learn more about the release, see:\n\n  $ helm status hmc-prod                  \n  $ helm get hmc-prod                  \n\n------------------------------------------------------------------------------------------------------------------------\n</code></pre>\n<p>Running <code>helm status hmc-prod</code> shows a similar output with the most recent status of the release.</p>\n<p>If you run <code>helm list</code>, you can see your release among the others:</p>\n<pre><code class=\"lang-bash\">cluster-essentials            1           Wed Apr 18 07:50:01 2018    DEPLOYED    kyma-cluster-essentials-0.0.1 kyma-system\nec-default                    1           Wed Apr 18 07:57:50 2018    DEPLOYED    gateway-0.0.1                    kyma-integration\nhmc-default                   1           Wed Apr 18 07:57:36 2018    DEPLOYED    gateway-0.0.1                    kyma-integration\nistio                         1           Wed Apr 18 07:50:04 2018    DEPLOYED    istio-0.5.0                      istio-system\nprometheus-operator           1           Wed Apr 18 07:51:50 2018    DEPLOYED    prometheus-operator-0.17.0       kyma-system\nhmc-prod                      1           Fri Apr 20 11:25:44 2018    DEPLOYED    gateway-0.0.1                    kyma-integration\ncore                          2           Wed Apr 18 07:56:56 2018    DEPLOYED    core-0.0.1                       kyma-system\n</code></pre>\n<p>Use kubectl commands to see the Kubernetes resources associated with your release:</p>\n<pre><code>kubectl get pods -n kyma-integration\n</code></pre><pre><code class=\"lang-bash\">NAME                                                  READY     STATUS      RESTARTS   AGE\nec-default-gateway-5b77fdf7b5-rx64m                   2/2       Running     3          2d\nhmc-default-gateway-f88b58978-75dkb                   2/2       Running     3          2d\nhmc-prod-gateway-67469769c8-6lgjl                     1/1       Running     0          1m\n</code></pre>\n<pre><code>kubectl get services -n kyma-integration\n</code></pre><pre><code class=\"lang-bash\">NAME                                              TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE\nec-default-gateway-echo                           ClusterIP   10.96.212.205    &lt;none&gt;        8080/TCP         2d\nec-default-gateway-external-api                   NodePort    10.101.245.196   &lt;none&gt;        8081:32000/TCP   2d\nhmc-default-gateway-echo                          ClusterIP   10.101.68.223    &lt;none&gt;        8080/TCP         2d\nhmc-default-gateway-external-api                  NodePort    10.96.215.1      &lt;none&gt;        8081:32001/TCP   2d\nhmc-prod-gateway-echo                             ClusterIP   10.100.94.12     &lt;none&gt;        8080/TCP         1m\nhmc-prod-gateway-external-api                     NodePort    10.108.126.243   &lt;none&gt;        8081:32002/TCP   1m\n</code></pre>\n<p>If you are done with the release, you can delete it by following this example:</p>\n<pre><code>helm delete hmc-prod --purge\n</code></pre><pre><code class=\"lang-bash\">release &quot;hmc-prod&quot; deleted\n</code></pre>\n"
    }
  ]
}
