{
  "id": "api-gateway",
  "displayName": "API Gateway",
  "description": "API Gateway documentation",
  "type": "Components",
  "docs": [
    {
      "order": "001-overview",
      "title": "Overview",
      "type": "Overview",
      "source":
        "<p>To make your service accessible outside the Kyma cluster, expose it using the Kyma API Controller, which listens for the Custom Resource (CR) objects that follow the <code>api.gateway.kyma.cx</code> Custom Resource Definition (CRD). Creating a valid CR triggers the API Controller to create an Istio Ingress for the service. Optionally, you can specify the <strong>authentication</strong> attribute of the CR to secure the exposed service and create an Istio Authentication Policy for it.</p>\n"
    },
    {
      "order": "005-architecture",
      "title": "Architecture",
      "type": "Architecture",
      "source":
        "<p>This diagram illustrates the workflow that leads to exposing a service in Kyma:</p>\n<p><img src=\"assets/001-service-exposure-flow.png\" alt=\"service-exposure-flow\"></p>\n<ul>\n<li><p><strong>API-Controller</strong> is a component responsible for exposing services. The API-Controller is an application deployed in the <code>kyma-system</code> Namespace, implemented according to the <a href=\"https://coreos.com/blog/introducing-operators.html\" target=\"_blank\">Kubernetes Operator</a> principles. The API-Controller listens for newly created Custom Resources (CR) that follow the set <code>api.gateway.kyma.cx</code> Custom Resource Definition (CRD), which describes the details of exposing services in Kyma.</p>\n</li>\n<li><p><strong>Istio Ingress</strong> is used to specify the services that are visible outside the cluster. The API-Controller creates Istio Ingress for the hostname defined in the <code>api.gateway.kyma.cx</code> CRD. The convention is to create a hostname using the name of the service as the subdomain, and the domain of the Kyma cluster. Although you can specify any hostname, TLS termination functions only for the domain of the Kyma cluster because the API-Controller injects the TLS configuration of the cluster into the Istio Ingress. To learn more about the Istio Ingress concept, read this <a href=\"https://kubernetes.io/docs/concepts/services-networking/ingress/\" target=\"_blank\">Istio documentation</a>.\nTo get the list of all Ingresses in Kyma, run:</p>\n<pre><code>kubectl get ingresses\n</code></pre></li>\n<li><p><strong>Istio Authentication Policy</strong> allows operators to specify authentication requirements for a service. It is an optional resource, created only when the CR specifies the desired authentication method, the token issuer, and the JSON Web Key Set (JWKS) endpoint URI. You can secure services using the <code>JWT</code> authentication method. You can specify multiple JWT issuers to allow to access the service with tokens from different ID providers. For more details, see the <a href=\"./008-security.md\">Security</a> document.\nThe JWKS endpoint is used to fetch cryptographic keys, which allow to verify the ID token signature. Services exposed through a CR with the <strong>authentication</strong> section specified require valid ID tokens to access them. To learn more about the Istio Authentication Policy, read this <a href=\"https://istio.io/docs/concepts/security/authn-policy/\" target=\"_blank\">Istio security documentation</a>.\nTo get the list of all Istio Authentication Policies created in Kyma, run:</p>\n<pre><code>kubectl get policies.authentication.istio.io --all-namespaces\n</code></pre></li>\n</ul>\n"
    },
    {
      "order": "008-security",
      "title": "Security",
      "type": "Security",
      "source":
        "<p>When you expose a service in Kyma, you can secure it by specifying the <strong>authentication</strong> attribute in the Custom Resource (CR). To successfully secure the exposed service, you must specify all of these attributes in the CR:</p>\n<ul>\n<li><strong>authentication.type</strong></li>\n<li><strong>jwt.issuer</strong></li>\n<li><strong>jwt.jwksUri</strong></li>\n</ul>\n<p>If you don&#39;t specify any of these attributes, the API-Controller does not create an Istio Authentication Policy for the service and leaves it unsecured.</p>\n<blockquote>\n<p><strong>NOTE:</strong> You can secure only the entire service. You cannot secure the specific endpoints of the service.</p>\n</blockquote>\n<h2 id=\"call-a-secured-service\">Call a secured service</h2>\n<p>You can secure the exposed service using JWT authentication. This means that you must include a valid JWT ID token in the <code>Authorization</code> header of the request when you call\na secured service.</p>\n<p>This is an example of a call to a secure exposed service:</p>\n<pre><code>curl -i https://httpbin.org/headers -H &quot;Authorization: Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjFmNThlNTBhODI4OWMzYWM5MmE5ZTA2ZmM0YzIyZDc1NTU4MTc5YjIifQ.eyJpc3MiOiJodHRwczovL2RleC55ZmFjdG9yeS5zYXAuY29ycCIsInN1YiI6IkNpUXhPR0U0TmpnMFlpMWtZamc0TFRSaU56TXRPVEJoT1MwelkyUXhOall4WmpVME5qTVNCV3h2WTJGcyIsImF1ZCI6WyJreW1hLWNsaWVudCIsImt1YmVjb250cm9sbGVyIl0sImV4cCI6MTUzMDA5ODg3MiwiaWF0IjoxNTMwMDEyNDcyLCJhenAiOiJrdWJlY29udHJvbGxlciIsImF0X2hhc2giOiJ5QzJwY0ZmVWYzWVd2N2U5QUY3U0t3IiwiZW1haWwiOiJhZG1pbkBreW1hLmN4IiwiZW1haWxfdmVyaWZpZWQiOnRydWUsIm5hbWUiOiJhZG1pbiJ9.pxy4P95PVSwIiXArcfsqAPVFhBmo5sHzUnqzwY6HF9UgMRkDFlIs5CKe1ZiGteGr6-gYU_0VmHroZ4alpcVcpL8Z5M2xnlOaZDyB8TNLvUAATpElcBMy6Cxb_7zLwP91IsX0QgI3DTg3H-M0eaJ4VwMKrfEu9h2rwxzvBrDc5vB_1Bm8OABl08wLSQpR27GGsI58RmA5YJmZX1PSzv90Zl_krqyvWIe6pmcHCrP--02LLUaoxhY42IDWkF8n9RPMLixmFZFXbeonCddR30OUkAbEFLBVBf8nJaFDms_VjZHSXZDitCu4r6myE4AnT_IeXI2dRgdGT73Hh8895zu7fQ&quot;\n</code></pre><h2 id=\"specify-multiple-jwt-token-issuers\">Specify multiple JWT token issuers</h2>\n<p>You can specify multiple JWT token issuers to allow to access the secured service with tokens issued by different ID providers. You can successfully call the secured service using JWT ID tokens issued by any of the parties specified in the <strong>authentication</strong> attribute of the CR. This is an example of the <strong>authentication</strong> attribute that allows to access the service using JWT tokens signed by two different issuers.</p>\n<pre><code>    - type: JWT\n      jwt:\n        issuer: https://sampleissuer1.abc.com\n        jwksUri: https://www.sampleapis.com/oauth2/v3/certs\n    - type: JWT\n      jwt:\n        issuer: https://sampleissuer2.abc.com\n        jwksUri: https://www.regularsampleapis.com/oauth2/v3/certs\n</code></pre>"
    },
    {
      "order": "011-CRD",
      "title": "Api",
      "type": "CRD",
      "source":
        "<p>The <code>api.gateway.kyma.cx</code> Custom Resource Definition (CRD) is a detailed description of the kind of data and the format the API Controller listens for. To get the up-to-date CRD and show\nthe output in the <code>yaml</code> format, run this command:</p>\n<pre><code>kubectl get crd apis.gateway.kyma.cx -o yaml\n</code></pre><h2 id=\"sample-custom-resource\">Sample Custom Resource</h2>\n<p>This is a sample CR that the API-Controller listens for to expose a service. This example has the <strong>authentication</strong> section specified which makes the API-Controller create an Istio Authentication Policy for this service.</p>\n<pre><code>apiVersion: gateway.kyma.cx/v1alpha2\nkind: api\nmetadata:\n    name: sample-api\nspec:\n    service:\n      name: kubernetes\n      port: 443\n    hostname: kubernetes.kyma.local\n    authentication:\n    - type: JWT\n      jwt:\n        issuer: https://accounts.google.com\n        jwksUri: https://www.googleapis.com/oauth2/v3/certs\n</code></pre><p>This table analyses the elements of the sample CR and the information it contains:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Field</th>\n<th style=\"text-align:center\">Mandatory?</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>apiVersion</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Defined basing on the <code>group</code> and <code>version</code> fields of the CRD <code>spec</code> section.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>kind</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Defined basing on the <code>names: kind</code> field of the CRD <code>spec</code> section.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>metadata.name</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specifies the name of the exposed API</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>service.name</strong>, <strong>service.port</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specifies the name and the communication port of the exposed service.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>hostname</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specifies the service&#39;s external inbound communication address.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>authentication</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Allows to specify an array of authentication policies that secure the service.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>authentication.type</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specifies the desired authentication method that secures the exposed service.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>authentication.jwt.issuer</strong>, <strong>authentication.jwt.jwksUri</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specifies the issuer of the tokens used to access the services, as well as the JWKS endpoint URI.</td>\n</tr>\n</tbody>\n</table>\n"
    }
  ]
}
