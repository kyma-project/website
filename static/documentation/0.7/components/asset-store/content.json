{
  "id": "asset-store",
  "displayName": "Asset Store",
  "description": "Overall documentation for Asset Store",
  "type": "Components",
  "docs": [
    {
      "order": "01-01-asset-store",
      "title": "Overview",
      "source": "<p>The Asset Store is a Kubernetes-native solution for storing assets, such as documents, files, images, API specifications, and client-side applications.</p>\n<p>This solution has a number of benefits:</p>\n<ul>\n<li>It is flexible. You can use it for storing various types of assets, such as Markdown documents, ZIP, PNG, or JS files.</li>\n<li>It is scalable. It allows you to store assets on a production system, using cloud provider storage services. At the same time, you can apply it to local development and use Minio to store assets on-premise.</li>\n<li>It is multi-cloud and not locked into one vendor. When using the Asset Store in a production system, you can seamlessly switch between different major service providers, such as AWS S3 or Azure Blob.</li>\n<li>It is location-independent. It allows you to expose files directly to the Internet and replicate them to different regions. This way, you can access them easily, regardless of your location.</li>\n</ul>\n"
    },
    {
      "order": "02-01-asset-store",
      "title": "Architecture",
      "source": "<h2 id=\"resources\">Resources</h2>\n<p>The whole concept of the Asset Store relies on the following components:</p>\n<ul>\n<li><p><strong>Asset custom resource</strong> (CR) is an obligatory <a href=\"#custom-resource-asset\">CR</a> in which you define the asset you want to store in a given storage bucket. Its definition requires the asset name and mode, the name of the Namespace in which it is available, the address of its web location, and the name of the bucket in which you want to store it. Optionally, you can specify the validation and mutation requirements that the asset must meet before it is stored.</p>\n</li>\n<li><p><strong>Asset Controller</strong> (AC) manages the <a href=\"#details-asset-custom-resource-lifecycle\">Asset CR lifecycle</a>.</p>\n</li>\n<li><p><strong>Bucket CR</strong> is an obligatory <a href=\"#custom-resource-bucket\">CR</a> in which you define the name of the bucket for storing assets.</p>\n</li>\n<li><p><strong>Bucket Controller</strong> manages the <a href=\"#details-bucket-custom-resource-lifecycle\">Bucket CR lifecycle</a>.</p>\n</li>\n<li><p><strong>Validation Service</strong> is an optional service which ensures that the asset meets the validation requirements specified in the Asset CR before uploading it to the bucket. The service returns the validation status to the AC.</p>\n</li>\n<li><p><strong>Mutation Service</strong> is an optional service which ensures that the asset is modified according to the mutation specification defined in the Asset CR before it is uploaded to the bucket. The service returns the modified asset to the AC.</p>\n</li>\n<li><p><strong>Minio Gateway</strong> is a Minio cluster mode which is a production-scalable storage solution. It ensures flexibility of using asset storage services from major cloud providers, including Azure Blob Storage, Amazon S3, and Google Cloud Storage.</p>\n</li>\n</ul>\n<h2 id=\"asset-flow\">Asset flow</h2>\n<p>This diagram provides an overview of the basic Asset Store workflow and the role of particular components in this process:</p>\n<p><img src=\"./assets/asset-store-architecture.svg\" alt=\"\"></p>\n<ol>\n<li>Create a bucket through a Bucket CR.</li>\n<li>Create an Asset CR in which you specify the reference to the asset source location and the name of the bucket in which you want to store it.</li>\n<li>The AC listens for new Events and acts upon receiving the Asset CR creation Event.</li>\n<li>The AC reads the CR definition and checks if the bucket is available.</li>\n<li>If it is available, the AC fetches the asset from the source location provided in the CR. If the asset is a ZIP or TAR file, the AC unpacks the asset before uploading it into the bucket.</li>\n<li>Optionally, the AC validates or modifies the asset if such a requirement is defined in the Asset CR. The AC communicates with the validation and mutation services and validates or modifies the asset according to the specification defined in the Asset CR.</li>\n<li>The AC uploads the asset to Minio Gateway, into the bucket specified in the Asset CR.</li>\n<li>The AC updates the status of the Asset CR with the information on the storage location of the file in the bucket.</li>\n</ol>\n"
    },
    {
      "order": "03-01-asset-cr-lifecycle",
      "title": "Asset custom resource lifecycle",
      "type": "Details",
      "source": "<p>Learn about the lifecycle of the Asset custom resource (CR) and how its creation, removal, or a change in the bucket reference affects other Asset Store components.</p>\n<h2 id=\"create-an-asset-cr\">Create an Asset CR</h2>\n<p>When you create an Asset CR, the Asset Controller (AC) receives a CR creation Event, reads the CR definition, verifies if the bucket exists, downloads the asset, unpacks it, and stores it in Minio Gateway.</p>\n<p><img src=\"./assets/create-asset.svg\" alt=\"\"></p>\n<h2 id=\"remove-an-asset-cr\">Remove an Asset CR</h2>\n<p>When you remove the Asset CR, the AC receives a CR deletion Event and deletes the CR from Minio Gateway.</p>\n<p><img src=\"./assets/delete-asset.svg\" alt=\"\"></p>\n<h2 id=\"change-the-bucket-reference\">Change the bucket reference</h2>\n<p>When you modify an Asset CR by updating the bucket reference in the Asset CR to a new one while the previous bucket still exists, the lifecycle starts again. The asset is created in a new storage location and this location is updated in the Asset CR.</p>\n<p>Unfortunately, this causes duplication of data as the assets from the previous bucket storage are not cleaned up by default. Thus, to avoid multiplication of assets, first remove one Bucket CR and then modify the existing Asset CR with a new bucket reference.</p>\n<p><img src=\"./assets/modify-asset.svg\" alt=\"\"></p>\n<h2 id=\"other-changes\">Other changes</h2>\n<p>The AC does not act upon changes in the Asset CR other than the change of the bucket reference. Thus, if the location of the source files or the mode of the files changes, you need to remove the existing Asset CD and create a new one with the correct details.</p>\n"
    },
    {
      "order": "03-02-bucket-cr-lifecycle",
      "title": "Bucket custom resource lifecycle",
      "type": "Details",
      "source": "<p>Learn about the lifecycle of the Bucket custom resource (CR) and how its creation and removal affect other Asset Store components.</p>\n<h2 id=\"create-a-bucket-cr\">Create a Bucket CR</h2>\n<p>When you create a Bucket CR, the Bucket Controller (BC) receives a CR creation Event and creates a bucket with the name specified in the CR. It is created in the Minio Gateway storage under the <code>ns-{NAMESPACE_NAME}-{CR_NAME}</code> location. The status of the CR contains a reference URL to the created bucket.</p>\n<p><img src=\"./assets/create-bucket.svg\" alt=\"\"></p>\n<h2 id=\"remove-a-bucket-cr\">Remove a Bucket CR</h2>\n<p>When you remove the Bucket CR, the BC receives a CR deletion Event and removes the bucket with the whole content from Minio Gateway.</p>\n<p>The Asset Controller (AC) also monitors the status of the referenced bucket. The AC checks the Bucket CR status to make sure the bucket exists. If you delete the bucket, the AC receives information that the files are no longer accessible and the bucket was removed. The AC updates the status of the Asset CR to <code>ready: False</code> and removes the asset storage reference. The Asset CR is still available and you can use it later for a new bucket.</p>\n<p><img src=\"./assets/delete-bucket.svg\" alt=\"\"></p>\n"
    },
    {
      "order": "03-03-minio-gateway",
      "title": "Minio and Minio Gateway",
      "type": "Details",
      "source": "<p>The whole concept of the Asset Store relies on Minio as the storage solution. It supports the Kyma&#39;s manifesto and the &quot;batteries included&quot; rule by providing you with this on-premise solution by default.</p>\n<p>Depending on the usage scenario, you can:</p>\n<ul>\n<li>Use Minio for local development.</li>\n<li>Store your assets on a production scale using Minio in a <a href=\"https://github.com/minio/minio/tree/master/docs/gateway\" target=\"_blank\">Gateway mode</a>.</li>\n</ul>\n<p>The Asset Store ensures that both usage scenarios work for Kyma, without additional configuration of the in-build controllers.</p>\n<h2 id=\"development-mode-storage\">Development mode storage</h2>\n<p>Minio is an open-source asset storage server with Amazon S3 compatible API. You can use it to store various types of assets, such as documents, files, or images.</p>\n<p>In the context of the Asset Store, the Asset Controller stores all assets in Minio, in a dedicated storage space.</p>\n<p><img src=\"./assets/minio.svg\" alt=\"\"></p>\n<h2 id=\"production-storage\">Production storage</h2>\n<p>For the production purposes, the Asset Store uses Minio Gateway which:</p>\n<ul>\n<li>Is a multi-cloud solution that offers the flexibility to choose a given cloud provider for the specific Kyma installation, including Azure, Amazon, and Google</li>\n<li>Allows you to use various cloud providers that support the data replication and CDN configuration</li>\n<li>Is compatible with Amazon S3 APIs</li>\n</ul>\n<p><img src=\"./assets/minio-gateway.svg\" alt=\"\"></p>\n"
    },
    {
      "order": "06-01-asset",
      "title": "Asset",
      "type": "Custom Resource",
      "source": "<p>The <code>assets.assetstore.kyma-project.io</code> CustomResourceDefinition (CRD) is a detailed description of the kind of data and the format used to define an asset to store in a cloud storage bucket. To get the up-to-date CRD and show the output in the <code>yaml</code> format, run this command:</p>\n<pre><code>kubectl get crd assets.assetstore.kyma-project.io -o yaml\n</code></pre><h2 id=\"sample-custom-resource\">Sample custom resource</h2>\n<p>This is a sample resource (CR) that provides details of the bucket for storing assets.</p>\n<pre><code>apiVersion: assetstore.kyma-project.io/v1alpha1\nkind: Asset\nmetadata:\n  name: my-package-assets\n  namespace: default\nspec:\n  source:\n    mode: single\n    url: https://some.domain.com/main.js\n  bucketRef:\n    name: my-bucket\n\n</code></pre><h3 id=\"validation-and-mutation-webhook-services\">Validation and mutation webhook services</h3>\n<p>You can also define validation and mutation services:</p>\n<ul>\n<li><strong>Validation webhook</strong> performs the validation of fetched assets before the Asset Controller uploads them into the bucket. It can be a list of several different validation webhooks and all of them should be processed even if one fails. It can refer either to the validation of a specific file against a specification or to the security validation. The validation webhook returns the validation status when the validation completes.</li>\n<li><strong>Mutation webhook</strong> acts similarly to the validation service. The difference is that it mutates the asset instead of just validating it. For example, this can mean asset rewriting through the <code>regex</code> operation or <code>keyvalue</code>, or the modification in the JSON specification. The mutation webhook returns modified files instead of information on the status.</li>\n</ul>\n<pre><code>apiVersion: assetstore.kyma-project.io/v1alpha1\nkind: Asset\nmetadata:\n  name: my-package-assets\n  namespace: default\nspec:\n  source:\n    mode: single\n    url: https://some.domain.com/main.js\n    validationWebhookService:\n      name: swagger-operations-svc\n      namespace: default\n      endpoint: &quot;/validate&quot;\n    mutationWebhookService:\n      name: swagger-operations-svc\n      namespace: default\n      endpoint: &quot;/mutate&quot;\n      metadata:\n        rewrite: keyvalue\n        pattern: json|yaml\n        data:\n          basePath: /test/v2\n  bucketRef:\n    name: my-bucket\nstatus:\n  phase: Failed\n  reason: ValidationFailure\n  message: &quot;The file is not valid against the provided json schema&quot;\n  lastHeartbeatTime: &quot;2018-01-03T07:38:24Z&quot;\n  assetRef:\n    assets:\n    - README.md\n    - directory/subdirectory/file.md\n    baseUrl: https://minio.kyma.local/ns-default-test-sample/asset-sample\n\n</code></pre><h2 id=\"custom-resource-parameters\">Custom resource parameters</h2>\n<p>This table lists all possible parameters of a given resource together with their descriptions:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Parameter</th>\n<th style=\"text-align:center\">Mandatory</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>metadata.name</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specifies the name of the CR.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>metadata.namespace</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Defines the Namespace in which the CR is available.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.source.mode</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specifies if the asset consists of one file or a set of compressed files in the ZIP or TAR formats. Use <code>single</code> for one file and <code>package</code> for a set of files.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.source.url</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specifies the location of the file.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>bucketref.name</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specifies the name of the bucket for storing the asset.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.source.validationwebhookservice</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Provides specification of the validation webhook service.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.source.validationwebhookservice.name</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Provides the name of the validation webhook service.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.source.validationwebhookservice.namespace</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Provides the Namespace in which the service is available. It must be the same as the asset&#39;s Namespace.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.source.validationwebhookservice.endpoint</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Specifies the endpoint to which the service sends calls.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.source.mutationwebhookservice</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Provides specification of the mutation webhook service.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.source.mutationwebhookservice.name</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Provides the name of the mutation webhook service.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.source.mutationwebhookservice.namespace</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Provides the Namespace in which the service is available. It must be the same as the asset&#39;s Namespace.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.source.mutationwebhookservice.endpoint</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Specifies the endpoint to which the service sends calls.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.source.mutationwebhookservice.metadata</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Provides detailed metadata specific for a given mutation service and its functionality.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.bucketref.name</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Provides the name of the bucket for storing the asset.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>status.phase</strong></td>\n<td style=\"text-align:center\"><strong>Not applicable</strong></td>\n<td style=\"text-align:left\">The Asset Controller adds it to the Asset CR. It describes the status of processing the Asset CR by the Asset Controller. It can be <code>Ready</code>, <code>Failed</code>, or <code>Pending</code>.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>status.reason</strong></td>\n<td style=\"text-align:center\"><strong>Not applicable</strong></td>\n<td style=\"text-align:left\">Provides the reason why the Asset CR processing failed or is pending.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>status.message</strong></td>\n<td style=\"text-align:center\"><strong>Not applicable</strong></td>\n<td style=\"text-align:left\">Describes a human-readable message on the CR processing progress, success, or failure.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>status.lastheartbeattime</strong></td>\n<td style=\"text-align:center\"><strong>Not applicable</strong></td>\n<td style=\"text-align:left\">Provides the last time when the Asset Controller processed the Asset CR.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>status.assetref</strong></td>\n<td style=\"text-align:center\"><strong>Not applicable</strong></td>\n<td style=\"text-align:left\">Provides details on the location of the assets stored in the bucket.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>status.assetref.assets</strong></td>\n<td style=\"text-align:center\"><strong>Not applicable</strong></td>\n<td style=\"text-align:left\">Provides the relative path to the given asset in the storage bucket.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>status.assetref.baseurl</strong></td>\n<td style=\"text-align:center\"><strong>Not applicable</strong></td>\n<td style=\"text-align:left\">Specifies the absolute path to the location of the assets in the storage bucket.</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>NOTE:</strong> The Asset Controller automatically adds all parameters marked as <strong>Not applicable</strong> to the Asset CR.</p>\n</blockquote>\n<h2 id=\"related-resources-and-components\">Related resources and components</h2>\n<p>These are the resources related to this CR:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Custom resource</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Bucket</td>\n<td style=\"text-align:left\">The Asset CR uses the name of the bucket specified in the definition of the Bucket CR.</td>\n</tr>\n</tbody>\n</table>\n<p>These components use this CR:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Component</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Asset Store</td>\n<td style=\"text-align:left\">Uses the Asset CR for the detailed asset definition, including its location and the name of the bucket in which it is stored.</td>\n</tr>\n</tbody>\n</table>\n"
    },
    {
      "order": "06-02-bucket",
      "title": "Bucket",
      "type": "Custom Resource",
      "source": "<p>The <code>buckets.assetstore.kyma-project.io</code> CustomResourceDefinition (CRD) is a detailed description of the kind of data and the format used to define the name of the cloud storage bucket for storing assets. To get the up-to-date CRD and show the output in the <code>yaml</code> format, run this command:</p>\n<pre><code>kubectl get crd buckets.assetstore.kyma-project.io -o yaml\n</code></pre><h2 id=\"sample-custom-resource\">Sample custom resource</h2>\n<p>This is a sample resource that defines the storage bucket configuration.</p>\n<pre><code>apiVersion: assetstore.kyma-project.io/v1alpha1\nkind: Bucket\nmetadata:\n  name: test-sample\n  namespace: default\nspec:\n  region: &quot;us-east-1&quot;\n  policy: &gt;\n    {\n      &quot;Version&quot;:&quot;2012-10-17&quot;,\n      &quot;Statement&quot;:[\n      {\n        &quot;Effect&quot;:&quot;Allow&quot;,\n        &quot;Principal&quot;:{\n          &quot;AWS&quot;:[\n            &quot;*&quot;\n          ]\n        },\n        &quot;Action&quot;:[\n          &quot;s3:GetBucketLocation&quot;,\n          &quot;s3:ListBucket&quot;\n        ],\n        &quot;Resource&quot;:[\n          &quot;arn:aws:s3:::ns-default-test-sample&quot;\n        ]\n      },\n      {\n        &quot;Effect&quot;:&quot;Allow&quot;,\n        &quot;Principal&quot;:{\n          &quot;AWS&quot;:[\n            &quot;*&quot;\n          ]\n        },\n        &quot;Action&quot;:[\n          &quot;s3:GetObject&quot;\n        ],\n        &quot;Resource&quot;:[\n          &quot;arn:aws:s3:::ns-default-test-sample/*&quot;\n        ]\n      }\n      ]\n    }\nstatus:\n  lastHeartbeatTime: &quot;2019-02-04T11:50:26Z&quot;\n  message: Bucket policy has been updated\n  phase: Ready\n  reason: BucketPolicyUpdated\n  url: https://minio.kyma.local/ns-default-test-sample\n</code></pre><h2 id=\"custom-resource-parameters\">Custom resource parameters</h2>\n<p>This table lists all possible parameters of a given resource together with their descriptions:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Parameter</th>\n<th style=\"text-align:center\">Mandatory</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>metadata.name</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specifies the name of the CR which is also the name of the bucket storage.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>metadata.namespace</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specifies the Namespace in which the CR is available.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.region</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Specifies the location of the <a href=\"https://github.com/kyma-project/kyma/blob/master/components/assetstore-controller-manager/config/crds/assetstore_v1alpha1_bucket.yaml#L34\" target=\"_blank\">region</a> under which the Bucket Controller creates the bucket. If the field is empty, the Bucket Controller creates the bucket under the default location.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>status.lastheartbeattime</strong></td>\n<td style=\"text-align:center\"><strong>Not applicable</strong></td>\n<td style=\"text-align:left\">Provides the last time when the Bucket Controller processed the Bucket CR.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>status.message</strong></td>\n<td style=\"text-align:center\"><strong>Not applicable</strong></td>\n<td style=\"text-align:left\">Describes a human-readable message on the CR processing success or failure.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>status.phase</strong></td>\n<td style=\"text-align:center\"><strong>Not applicable</strong></td>\n<td style=\"text-align:left\">The Bucket Controller automatically adds it to the Bucket CR. It describes the status of processing the Bucket CR by the Bucket Controller. It can be <code>Ready</code> or <code>Failed</code>.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>status.reason</strong></td>\n<td style=\"text-align:center\"><strong>Not applicable</strong></td>\n<td style=\"text-align:left\">Provides information on the Bucket CR processing success or failure.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>status.url</strong></td>\n<td style=\"text-align:center\"><strong>Not applicable</strong></td>\n<td style=\"text-align:left\">Provides the address of the bucket storage under which the asset is available.</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>NOTE:</strong> The Bucket Controller automatically adds all parameters marked as <strong>Not applicable</strong> to the Bucket CR.</p>\n</blockquote>\n<h2 id=\"related-resources-and-components\">Related resources and components</h2>\n<p>These are the resources related to this CR:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Custom resource</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Asset</td>\n<td style=\"text-align:left\">Provides the name of the storage bucket which the Asset CR refers to.</td>\n</tr>\n</tbody>\n</table>\n<p>These components use this CR:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Component</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Asset Store</td>\n<td style=\"text-align:left\">Uses the Bucket CR for the storage bucket definition.</td>\n</tr>\n</tbody>\n</table>\n"
    }
  ]
}
