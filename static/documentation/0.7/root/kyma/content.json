{
  "id": "kyma",
  "displayName": "Kyma",
  "description": "Overall documentation for Kyma",
  "type": "Root",
  "docs": [
    {
      "order": "01-01-in-a-nutshell",
      "title": "In a nutshell",
      "type": "Overview",
      "source": "<p>Kyma allows you to connect applications and third-party services in a cloud-native environment. Use it to create extensions for the existing systems, regardless of the language they are written in. Customize extensions with minimum effort and time devoted to learning their configuration details.</p>\n<p>With Kyma in hand, you can focus purely on coding since it ensures the following out-of-the-box functionalities:</p>\n<ul>\n<li>Service-to-service communication and proxying (Istio Service Mesh)</li>\n<li>In-built monitoring, tracing, and logging (Grafana, Prometheus, Jaeger, Logspout, OK Log)</li>\n<li>Secure authentication and authorization (Dex, Service Identity, TLS, Role Based Access Control)</li>\n<li>The catalog of services to choose from (Service Catalog, Service Brokers)</li>\n<li>The development platform to run lightweight functions in a cost-efficient and scalable way (Serverless, Kubeless)</li>\n<li>The endpoint to register Events and APIs of external applications (Application Connector)</li>\n<li>The messaging channel to receive Events, enrich them, and trigger business flows using lambdas or services (Event Bus, NATS)</li>\n<li>CLI supported by the intuitive UI (Console)</li>\n</ul>\n"
    },
    {
      "order": "01-02-main-features",
      "title": "Main features",
      "type": "Overview",
      "source": "<p>Major open-source and cloud-native projects, such as Istio, NATS, Kubeless, and Prometheus, constitute the cornerstone of Kyma. Its uniqueness, however, lies in the &quot;glue&quot; that holds these components together. Kyma collects those cutting-edge solutions in one place and combines them with the in-house developed features that allow you to connect and extend your enterprise applications easily and intuitively.</p>\n<p>Kyma allows you to extend and customize the functionality of your products in a quick and modern way, using serverless computing or microservice architecture. The extensions and customizations you create are decoupled from the core applications, which means that:</p>\n<ul>\n<li>Deployments are quick.</li>\n<li>Scaling is independent from the core applications.</li>\n<li>The changes you make can be easily reverted without causing downtime of the production system.</li>\n</ul>\n<p>Last but not least, Kyma is highly cost-efficient. All Kyma native components and the connected open-source tools are written in Go. It ensures low memory consumption and reduced maintenance costs compared to applications written in other programming languages such as Java.</p>\n"
    },
    {
      "order": "01-03-technology-stack",
      "title": "Technology stack",
      "type": "Overview",
      "source": "<p>The entire solution is containerized and runs on a <a href=\"https://kubernetes.io/\" target=\"_blank\">Kubernetes</a> cluster. Customers can access it easily using a single sign on solution based on the <a href=\"https://github.com/coreos/dex\" target=\"_blank\">Dex</a> identity provider integrated with any <a href=\"https://openid.net/connect/\" target=\"_blank\">OpenID Connect</a>-compliant identity provider or a SAML2-based enterprise authentication server.</p>\n<p>The communication between services is handled by the <a href=\"https://istio.io/\" target=\"_blank\">Istio</a> Service Mesh component which enables security, traffic management, routing, resilience (retry, circuit breaker, timeouts), monitoring, and tracing without the need to change the application code.\nBuild your applications using services provisioned by one of the many Service Brokers compatible with the <a href=\"https://www.openservicebrokerapi.org/\" target=\"_blank\">Open Service Broker API</a>, and monitor the speed and efficiency of your solutions using <a href=\"https://prometheus.io/\" target=\"_blank\">Prometheus</a>, which gives you the most accurate and up-to-date monitoring data.</p>\n"
    },
    {
      "order": "01-04-key-components",
      "title": "Key components",
      "type": "Overview",
      "source": "<p>Kyma is built of numerous components but these three drive it forward:</p>\n<ul>\n<li><strong>Application Connector</strong>:<ul>\n<li>Simplifies and secures the connection between external systems and Kyma</li>\n<li>Registers external Events and APIs in the Service Catalog and simplifies the API usage</li>\n<li>Provides asynchronous communication with services and lambdas deployed in Kyma through Events</li>\n<li>Manages secure access to external systems</li>\n<li>Provides monitoring and tracing capabilities to facilitate operational aspects</li>\n</ul>\n</li>\n<li><strong>Serverless</strong>: <ul>\n<li>Ensures quick deployments following a lambda function approach</li>\n<li>Enables scaling independent of the core applications</li>\n<li>Gives a possibility to revert changes without causing production system downtime</li>\n<li>Supports the complete asynchronous programming model</li>\n<li>Offers loose coupling of Event providers and consumers</li>\n<li>Enables flexible application scalability and availability</li>\n</ul>\n</li>\n<li><strong>Service Catalog</strong>:<ul>\n<li>Connects services from external sources</li>\n<li>Unifies the consumption of internal and external services thanks to compliance with the Open Service Broker standard</li>\n<li>Provides a standardized approach to managing the API consumption and access</li>\n<li>Eases the development effort by providing a catalog of API and Event documentation to support automatic client code generation</li>\n</ul>\n</li>\n</ul>\n<p>This basic use case shows how the three components work together in Kyma:</p>\n<p><img src=\"./assets/ac-s-sc.svg\" alt=\"key-components\"></p>\n"
    },
    {
      "order": "01-05-kyma-and-knative",
      "title": "Kyma and Knative - brothers in arms",
      "type": "Overview",
      "source": "<p>Integration with Knative is a step towards Kyma modularization and the &quot;slimming&quot; approach which aims to extract some out-of-the-box components and provide you with a more flexible choice of tools to use in Kyma.</p>\n<p>Both Kyma and Knative are Kubernetes and Istio-based systems that offer development and eventing platforms. The main difference, however, is their focus. While Knative concentrates more on providing the building blocks for running serverless workloads, Kyma focuses on integrating those blocks with external services and applications.</p>\n<p>The diagram shows dependencies between the components:</p>\n<p><img src=\"./assets/kyma-knative.svg\" alt=\"kyma-knative\"></p>\n<p>The nearest plan for Kyma and Knative cooperation is to replace Serverless in Kyma with the Knative technology. Other planned changes concerning Kyma and Knative cooperation involve providing configuration options to allow Istio deployed with Knative to work on Kyma, and extracting Kyma eventing to fully integrate it with Knative eventing. The eventing integration will provide more flexibility on deciding which messaging implementation to use (NATS, Kafka, or any other).</p>\n"
    },
    {
      "order": "01-06-how-to-start",
      "title": "How to start",
      "type": "Overview",
      "source": "<p>When you already know what Kyma is and what components it consists of, you can start using it. Minikube allows you to run Kyma locally, develop, and test your solutions on a small scale before you push them to a cluster. With the Installation and Getting Started guides in hand, you can start developing in a matter of minutes.</p>\n<p>Read, learn, and try on your own to:</p>\n<ul>\n<li><a href=\"#installation-install-kyma-locally-from-the-release\">Install Kyma locally from the release</a></li>\n<li><a href=\"#installation-install-kyma-locally-from-sources\">Install Kyma locally from sources</a></li>\n<li><a href=\"#installation-install-kyma-on-a-gke-cluster\">Install Kyma on a cluster</a></li>\n<li><a href=\"#getting-started-sample-service-deployment-on-local\">Deploy a sample service locally</a></li>\n<li><a href=\"#getting-started-sample-service-deployment-on-a-cluster\">Deploy a service on a cluster</a></li>\n<li><a href=\"#getting-started-develop-a-service-locally-without-using-docker\">Develop a service locally without using Docker</a></li>\n<li><a href=\"#getting-started-publish-a-service-docker-image-and-deploy-it-to-kyma\">Publish a service Docker image and deploy it to Kyma</a></li>\n<li><a href=\"#getting-started-helm-overrides-for-kyma-installation\">Configure the Installer with override values for Helm charts</a></li>\n<li><a href=\"/components/service-catalog#tutorials-register-a-broker-in-the-service-catalog\">Register a Broker in Service Catalog</a></li>\n<li><a href=\"/components/application-connector#tutorials-create-a-new-application\">Create a new Application</a></li>\n<li><a href=\"/components/application-connector#tutorials-get-the-client-certificate\">Get the client certificate</a></li>\n<li><a href=\"/components/application-connector#tutorials-register-a-service\">Register a service</a></li>\n<li><a href=\"/components/application-connector#tutorials-bind-an-application-to-a-namespace\">Bind an Application to a Namespace</a></li>\n<li><a href=\"/components/application-connector#tutorials-trigger-a-lambda-with-events\">Trigger a lambda with events</a></li>\n<li><a href=\"/components/application-connector#tutorials-call-a-registered-external-service-from-kyma\">Call a registered external service from Kyma</a></li>\n<li><a href=\"/components/monitoring#tutorials-expose-custom-metrics-in-kyma\">Expose custom metrics in Kyma</a></li>\n</ul>\n"
    },
    {
      "order": "03-01-components",
      "title": "Components",
      "type": "Details",
      "source": "<p>Kyma is built on the foundation of the best and most advanced open-source projects which make up the components readily available for customers to use.\nThis section describes the Kyma components.</p>\n<h2 id=\"service-catalog\">Service Catalog</h2>\n<p>The Service Catalog lists all of the services available to Kyma users through the registered Service Brokers. Using the Service Catalog, you can provision new services in the\nKyma <a href=\"https://kubernetes.io/\" target=\"_blank\">Kubernetes</a> cluster and create bindings between the provisioned service and an application.</p>\n<h2 id=\"service-mesh\">Service Mesh</h2>\n<p>The Service Mesh is an infrastructure layer that handles service-to-service communication, proxying, service discovery, traceability, and security independent of the code of the services. Kyma uses the <a href=\"https://istio.io/\" target=\"_blank\">Istio</a> Service Mesh that is customized for the specific needs of the implementation.</p>\n<h2 id=\"security\">Security</h2>\n<p>Kyma security enforces RBAC (Role Based Access Control) in the cluster. <a href=\"https://github.com/coreos/dex\" target=\"_blank\">Dex</a> handles the identity management and identity provider integration. It allows you to integrate any <a href=\"https://openid.net/connect/\" target=\"_blank\">OpenID Connect</a> or SAML2-compliant identity provider with Kyma using <a href=\"https://github.com/coreos/dex#connectors\" target=\"_blank\">connectors</a>. Additionally, Dex provides a static user store which gives you more flexibility when managing access to your cluster.   </p>\n<h2 id=\"service-brokers\">Service Brokers</h2>\n<p>Service Brokers are <a href=\"https://www.openservicebrokerapi.org/\" target=\"_blank\">Open Service Broker API</a>-compatible servers that manage the lifecycle of one or more services. Each Service Broker registered in Kyma presents the services it offers to the Service Catalog. You can provision these services on a cluster level through the Service Catalog. Out of the box, Kyma comes with three Service Brokers.\nYou can register more <a href=\"https://www.openservicebrokerapi.org/\" target=\"_blank\">Open Service Broker API</a>-compatible Service Brokers in Kyma and provision the services they offer using the Service Catalog.</p>\n<h2 id=\"application-connector\">Application Connector</h2>\n<p>The Application Connector is a proprietary Kyma solution. This endpoint is the Kyma side of the connection between Kyma and the external solutions. The Application Connector allows you to register the APIs and the Event Catalog, which lists all of the available events, of the connected solution. Additionally, the Application Connector proxies the calls from Kyma to external APIs in a secure way.</p>\n<h2 id=\"event-bus\">Event Bus</h2>\n<p>Kyma Event Bus receives Events from external solutions and triggers the business logic created with lambda functions and services in Kyma. The Event Bus is based on the <a href=\"https://nats.io/\" target=\"_blank\">NATS Streaming</a> open source messaging system for cloud-native applications.</p>\n<h2 id=\"serverless\">Serverless</h2>\n<p>The Kyma Serverless component allows you to reduce the implementation and operation effort of an application to the absolute minimum. Kyma Serverless provides a platform to run lightweight functions in a cost-efficient and scalable way using JavaScript and Node.js. Kyma Serverless is built on the <a href=\"http://kubeless.io/\" target=\"_blank\">Kubeless</a> framework, which allows you to deploy lambda functions,\nand uses the <a href=\"https://nats.io/\" target=\"_blank\">NATS</a> messaging system that monitors business events and triggers functions accordingly.  </p>\n<h2 id=\"monitoring\">Monitoring</h2>\n<p>Kyma comes bundled with tools that give you the most accurate and up-to-date monitoring data. <a href=\"https://prometheus.io/\" target=\"_blank\">Prometheus</a> open source monitoring and alerting toolkit provides this data, which is consumed by different add-ons, including <a href=\"https://grafana.com/\" target=\"_blank\">Grafana</a> for analytics and monitoring, and <a href=\"https://prometheus.io/docs/alerting/alertmanager/\" target=\"_blank\">Alertmanager</a> for handling alerts.</p>\n<h2 id=\"tracing\">Tracing</h2>\n<p>The tracing in Kyma uses the <a href=\"https://github.com/jaegertracing\" target=\"_blank\">Jaeger</a> distributed tracing system. Use it to analyze performance by scrutinizing the path of the requests sent to and from your service. This information helps you optimize the latency and performance of your solution.</p>\n<h2 id=\"logging\">Logging</h2>\n<p>Logging in Kyma uses <a href=\"https://github.com/gliderlabs/logspout\" target=\"_blank\">Logspout</a> and <a href=\"https://github.com/oklog/oklog\" target=\"_blank\">OK Log</a>. Use a plaintext or a regular expression to fetch logs from Pods using the OK Log UI.</p>\n"
    },
    {
      "order": "03-02-namespaces",
      "title": "Namespaces",
      "type": "Details",
      "source": "<p>A Namespace is a security and organizational unit which allows you to divide the cluster into smaller units to use for different purposes, such as development and testing.</p>\n<p>Namespaces available for users are marked with the <code>env: &quot;true&quot;</code> label. The Kyma UI only displays the Namespaces marked with the <code>env: &quot;true&quot;</code> label.</p>\n<h2 id=\"default-kyma-namespaces\">Default Kyma Namespaces</h2>\n<p>Kyma comes configured with default Namespaces dedicated for system-related purposes. The user cannot modify or remove any of these Namespaces.</p>\n<ul>\n<li><code>kyma-system</code> - This Namespace contains all of the Kyma Core components.</li>\n<li><code>kyma-integration</code> - This Namespace contains all of the Application Connector components responsible for the integration of Kyma and external solutions.</li>\n<li><code>kyma-installer</code> - This Namespace contains all of the Kyma Installer components, objects, and Secrets.</li>\n<li><code>istio-system</code> - This Namespace contains all of the Istio-related components.</li>\n</ul>\n<h2 id=\"namespaces-for-users-in-kyma\">Namespaces for users in Kyma</h2>\n<p>Kyma comes with three Namespaces ready for you to use.</p>\n<ul>\n<li><code>production</code></li>\n<li><code>qa</code></li>\n<li><code>stage</code></li>\n</ul>\n<h3 id=\"create-a-new-namespace-for-users\">Create a new Namespace for users</h3>\n<p>Create a Namespace and mark it with the <code>env: &quot;true&quot;</code> label to make it available for Kyma users. Use this command to do that in a single step:</p>\n<pre><code>$ cat &lt;&lt;EOF | kubectl create -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: my-namespace\n  labels:\n    env: &quot;true&quot;\nEOF\n</code></pre><p>Initially, the system deploys two template roles: <code>kyma-reader-role</code> and <code>kyma-admin-role</code>. The controller finds the template roles by filtering the roles available in the <code>kyma-system</code> Namespace by the label <code>env: &quot;true&quot;</code>. The controller copies these roles into the newly created Namespace.</p>\n"
    },
    {
      "order": "03-03-testing",
      "title": "Testing Kyma",
      "type": "Details",
      "source": "<p>For testing, the Kyma components use the Helm test concept. Place your test under the <code>templates</code> directory as a Pod definition that specifies a container with a given command to run.</p>\n<h2 id=\"add-a-new-test\">Add a new test</h2>\n<p>The system bases tests on the Helm broker concept with one modification: adding a Pod label. Before you create a test, see the official <a href=\"https://github.com/kubernetes/helm/blob/release-2.10/docs/chart_tests.md\" target=\"_blank\">Chart Tests</a> documentation. Then, add the <code>&quot;helm-chart-test&quot;: &quot;true&quot;</code> label to your Pod template.</p>\n<p>See the following example of a test prepared for Dex:</p>\n<pre><code># Chart tree\ndex\n├── Chart.yaml\n├── README.md\n├── templates\n│   ├── tests\n│   │   └── test-dex-connection.yaml\n│   ├── dex-deployment.yaml\n│   ├── dex-ingress.yaml\n│   ├── dex-rbac-role.yaml\n│   ├── dex-service.yaml\n│   ├── pre-install-dex-account.yaml\n│   ├── pre-install-dex-config-map.yaml\n│   └── pre-install-dex-secrets.yaml\n└── values.yaml\n</code></pre><p>The test adds a new <strong>test-dex-connection.yaml</strong> under the <code>templates/tests</code> directory.\nThis simple test calls the <code>Dex</code> endpoint with cURL, defined as follows:</p>\n<pre><code class=\"lang-yaml\">apiVersion: v1\nkind: Pod\nmetadata:\n  name: &quot;test-{{ template &quot;fullname&quot; . }}-connection-dex&quot;\n  annotations:\n    &quot;helm.sh/hook&quot;: test-success\n  labels:\n      &quot;helm-chart-test&quot;: &quot;true&quot; # ! Our customization\nspec:\n  hostNetwork: true\n  containers:\n  - name: &quot;test-{{ template &quot;fullname&quot; . }}-connection-dex&quot;\n    image: tutum/curl:alpine\n    command: [&quot;/usr/bin/curl&quot;]\n    args: [\n      &quot;--fail&quot;,\n      &quot;http://dex-service.{{ .Release.Namespace }}.svc.cluster.local:5556/.well-known/openid-configuration&quot;\n    ]\n  restartPolicy: Never\n</code></pre>\n<h2 id=\"test-execution\">Test execution</h2>\n<p>All tests created for charts under <code>/resources/core/</code> run automatically after starting Kyma.\nIf any of the tests fail, the system prints the Pod logs in the terminal, then deletes all the Pods.</p>\n<blockquote>\n<p><strong>NOTE:</strong> If you run Kyma locally, by default, the system does not take into account the test&#39;s exit code. As a result, the system does not terminate Kyma Docker container, and you can still access it.\nTo force a termination in case of failing tests, use <code>--exit-on-test-fail</code> flag when executing <code>run.sh</code> script.</p>\n</blockquote>\n<p>CI propagates the exit status of tests. If any test fails, the whole CI job fails as well.</p>\n<p>Follow the same guidelines to add a test which is not a part of any <code>core</code> component. However, for test execution, see the <strong>Run a test manually</strong> section in this document.</p>\n<h3 id=\"run-a-test-manually\">Run a test manually</h3>\n<p>To run a test manually, use the <code>testing.sh</code> script located in the <code>/installation/scripts/</code> directory which runs all tests defined for <code>core</code> releases.\nIf any of the tests fail, the system prints the Pod logs in the terminal, then deletes all the Pods.</p>\n<p>Another option is to run a Helm test directly on your release.</p>\n<pre><code class=\"lang-bash\">$ helm test {your_release_name}\n</code></pre>\n<p>You can also run your test on custom releases. If you do this, remember to always delete the Pods after a test ends.</p>\n"
    },
    {
      "order": "03-04-charts",
      "title": "Charts",
      "type": "Details",
      "source": "<p>Kyma uses Helm charts to deliver single components and extensions, as well as the core components. This document contains information about the chart-related technical concepts, dependency management to use with Helm charts, and chart examples.</p>\n<h2 id=\"manage-dependencies-with-init-containers\">Manage dependencies with Init Containers</h2>\n<p>The <strong>ADR 003: Init Containers for dependency management</strong> document declares the use of Init Containers as the primary dependency mechanism.</p>\n<p><a href=\"https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\" target=\"_blank\">Init Containers</a> present a set of distinctive behaviors:</p>\n<ul>\n<li>They always run to completion.</li>\n<li>They start sequentially, only after the preceding Init Container completes successfully.\nIf any of the Init Containers fails, the Pod restarts. This is always true, unless the <code>restartPolicy</code> equals <code>never</code>.</li>\n</ul>\n<p><a href=\"https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes\" target=\"_blank\">Readiness Probes</a> ensure that the essential containers are ready to handle requests before you expose them. At a minimum, probes are defined for every container accessible from outside of the Pod. It is recommended to pair the Init Containers with readiness probes to provide a basic dependency management solution.</p>\n<h2 id=\"examples\">Examples</h2>\n<p>Here are some examples:</p>\n<ol>\n<li>Generic</li>\n</ol>\n<pre><code class=\"lang-yaml\">apiVersion: apps/v1beta2\nkind: Deployment\nmetadata:\n  name: nginx-deployment\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.7.9\n        ports:\n        - containerPort: 80\n        readinessProbe:\n          httpGet:\n            path: /healthz\n            port: 80\n          initialDelaySeconds: 30\n          timeoutSeconds: 1\n</code></pre>\n<pre><code class=\"lang-yaml\">apiVersion: v1\nkind: Pod\nmetadata:\n  name: myapp-pod\nspec:\n  initContainers:\n  - name: init-myservice\n    image: busybox\n    command: [&#39;sh&#39;, &#39;-c&#39;, &#39;until nslookup nginx; do echo waiting for nginx; sleep 2; done;&#39;]\n  containers:\n  - name: myapp-container\n    image: busybox\n    command: [&#39;sh&#39;, &#39;-c&#39;, &#39;echo The app is running! &amp;&amp; sleep 3600&#39;]\n</code></pre>\n<ol start=\"2\">\n<li>Kyma</li>\n</ol>\n<pre><code class=\"lang-yaml\">apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: helm-broker\n  labels:\n    app: helm-broker\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: helm-broker\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxUnavailable: 0\n  template:\n    metadata:\n      labels:\n        app: helm-broker\n    spec:\n\n      initContainers:\n      - name: init-helm-broker\n        image: eu.gcr.io/kyma-project/alpine-net:0.2.74\n        command: [&#39;sh&#39;, &#39;-c&#39;, &#39;until nc -zv service-catalog-controller-manager.kyma-system.svc.cluster.local 8080; do echo waiting for etcd service; sleep 2; done;&#39;]\n\n      containers:\n      - name: helm-broker\n        ports:\n        - containerPort: 6699\n        readinessProbe:\n          tcpSocket:\n            port: 6699\n          failureThreshold: 3\n          initialDelaySeconds: 10\n          periodSeconds: 3\n          successThreshold: 1\n          timeoutSeconds: 2\n</code></pre>\n<h2 id=\"support-for-the-helm-wait-flag\">Support for the Helm wait flag</h2>\n<p>High level Kyma components, such as <strong>core</strong>, come as Helm charts. These charts are installed as part of a single Helm release. To provide ordering for these core components, the Helm client runs with the <code>--wait</code> flag. As a result, Tiller waits for the readiness of all of the components, and then evaluates the readiness.</p>\n<p>For <code>Deployments</code>, set the strategy to <code>RollingUpdate</code> and set the <code>MaxUnavailable</code> value to a number lower than the number of replicas. This setting is necessary, as readiness in Helm v2.10.0 is fulfilled if the number of replicas in ready state is not lower than the expected number of replicas:</p>\n<pre><code>ReadyReplicas &gt;= TotalReplicas - MaxUnavailable\n</code></pre><h2 id=\"chart-installation-details\">Chart installation details</h2>\n<p>The Tiller server performs the chart installation process. This is the order of operations that happen during the chart installation:</p>\n<ul>\n<li>resolve values</li>\n<li>recursively gather all templates with the corresponding values</li>\n<li>sort all templates</li>\n<li>render all templates</li>\n<li>separate hooks and manifests from files into sorted lists</li>\n<li>aggregate all valid manifests from all sub-charts into a single manifest file</li>\n<li>execute PreInstall hooks</li>\n<li>create a release using the ReleaseModule API and, if requested, wait for the actual readiness of the resources</li>\n<li>execute PostInstall hooks</li>\n</ul>\n<h2 id=\"notes\">Notes</h2>\n<p>All notes are based on Helm v2.10.0 implementation and are subject to change in future releases.</p>\n<ul>\n<li><p>Regardless of how complex a chart is, and regardless of the number of sub-charts it references or consists of, it&#39;s always evaluated as one. This means that each Helm release is compiled into a single Kubernetes manifest file when applied on API server.</p>\n</li>\n<li><p>Hooks are parsed in the same order as manifest files and returned as a single, global list for the entire chart. For each hook the weight is calculated as a part of this sort.</p>\n</li>\n<li><p>Manifests are sorted by <code>Kind</code>. You can find the list and the order of the resources on the Kubernetes <a href=\"https://github.com/kubernetes/helm/blob/v2.10.0/pkg/tiller/kind_sorter.go#L29\" target=\"_blank\">Tiller</a> website.</p>\n</li>\n</ul>\n<h2 id=\"glossary\">Glossary</h2>\n<ul>\n<li><strong>resource</strong> is any document in a chart recognized by Helm or Tiller. This includes manifests, hooks, and notes.</li>\n<li><strong>template</strong> is a valid Go template. Many of the resources are also Go templates.</li>\n</ul>\n"
    },
    {
      "order": "03-05-deploy-private-registry",
      "title": "Deploy with a private Docker registry",
      "type": "Details",
      "source": "<p>Docker is a free tool to deploy applications and servers. To run an application on Kyma, provide the application binary file as a Docker image located in a Docker registry. Use the <code>DockerHub</code> public registry to upload your Docker images for free access to the public. Use a private Docker registry to ensure privacy, increased security, and better availability.</p>\n<p>This document shows how to deploy a Docker image from your private Docker registry to the Kyma cluster.</p>\n<h2 id=\"details\">Details</h2>\n<p>The deployment to Kyma from a private registry differs from the deployment from a public registry. You must provide Secrets accessible in Kyma, and referenced in the <code>.yaml</code> deployment file. This section describes how to deploy an image from a private Docker registry to Kyma. Follow the deployment steps:</p>\n<ol>\n<li>Create a Secret resource.</li>\n<li>Write your deployment file.</li>\n<li>Submit the file to the Kyma cluster.</li>\n</ol>\n<h3 id=\"create-a-secret-for-your-private-registry\">Create a Secret for your private registry</h3>\n<p>A Secret resource passes your Docker registry credentials to the Kyma cluster in an encrypted form. For more information on Secrets, refer to the <a href=\"https://kubernetes.io/docs/concepts/configuration/secret/\" target=\"_blank\">Kubernetes documentation</a>.</p>\n<p>To create a Secret resource for your Docker registry, run the following command:</p>\n<pre><code class=\"lang-bash\">kubectl create secret docker-registry {secret-name} --docker-server={registry FQN} --docker-username={user-name} --docker-password={password} --docker-email={registry-email} --namespace={namespace}  \n</code></pre>\n<p>Refer to the following example:</p>\n<pre><code class=\"lang-bash\">kubectl create secret docker-registry docker-registry-secret --docker-server=myregistry:5000 --docker-username=root --docker-password=password --docker-email=example@github.com --namespace=production\n</code></pre>\n<p>The Secret is associated with a specific Namespace. In the example, the Namespace is <code>production</code>. However, you can modify the Secret to point to any desired Namespace.</p>\n<h3 id=\"write-your-deployment-file\">Write your deployment file</h3>\n<ol>\n<li><p>Create the deployment file with the <code>.yml</code> extension and name it <code>deployment.yml</code>.</p>\n</li>\n<li><p>Describe your deployment in the <code>.yml</code> file. Refer to the following example:</p>\n</li>\n</ol>\n<pre><code class=\"lang-yaml\">apiVersion: apps/v1beta2\nkind: Deployment\nmetadata:\n  namespace: production # {production/stage/qa}\n  name: my-deployment # Specify the deployment name.\n  annotations:\n    sidecar.istio.io/inject: true\nspec:\n  replicas: 3 # Specify your replica - how many instances you want from that deployment.\n  selector:\n    matchLabels:\n      app: app-name # Specify the app label. It is optional but it is a good practice.\n  template:\n    metadata:\n      labels:\n        app: app-name # Specify app label. It is optional but it is a good practice.\n        version: v1 # Specify your version.\n    spec:\n      containers:\n      - name: container-name # Specify a meaningful container name.\n        image: myregistry:5000/user-name/image-name:latest # Specify your image {registry FQN/your-username/your-space/image-name:image-version}.\n        ports:\n          - containerPort: 80 # Specify the port to your image.\n      imagePullSecrets:\n        - name: docker-registry-secret # Specify the same Secret name you generated in the previous step for this Namespace.\n        - name: example-secret-name # Specify your Namespace Secret, named `example-secret-name`.\n\n</code></pre>\n<ol start=\"3\">\n<li>Submit you deployment file using this command:</li>\n</ol>\n<pre><code class=\"lang-bash\">kubectl apply -f deployment.yml\n</code></pre>\n<p>Your deployment is now running on the Kyma cluster.</p>\n"
    },
    {
      "order": "04-01-overview",
      "title": "Overview",
      "type": "Installation",
      "source": "<p>Kyma is a complex tool which consists of many different <a href=\"#details-components\">components</a> that provide various functionalities to extend your application. This entails high technical requirements that can influence your local development process. To meet the customer needs, we ensured Kyma modularity. This way you can decide not to include a given component in the Kyma installation, or install it after the Kyma installation process.</p>\n<p>To make the local development process easier, we introduced the <strong>Kyma Lite</strong> concept in which case some components are not included in the local installation process by default. These are the Kyma and Kyma Lite components:</p>\n<table>\n<thead>\n<tr>\n<th>Component</th>\n<th>Kyma</th>\n<th>Kyma Lite</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>core</code></td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td><code>cluster-essentials</code></td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td><code>application-connector</code></td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td><code>ark</code></td>\n<td>✅</td>\n<td>⛔️</td>\n</tr>\n<tr>\n<td><code>assetstore</code></td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td><code>dex</code></td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td><code>istio</code></td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td><code>jaeger</code></td>\n<td>✅</td>\n<td>⛔️</td>\n</tr>\n<tr>\n<td><code>logging</code></td>\n<td>✅</td>\n<td>⛔️</td>\n</tr>\n<tr>\n<td><code>monitoring</code></td>\n<td>✅</td>\n<td>⛔️</td>\n</tr>\n<tr>\n<td><code>prometheus-operator</code></td>\n<td>✅</td>\n<td>⛔️</td>\n</tr>\n<tr>\n<td><code>service-catalog</code></td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td><code>nats-streaming</code></td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"installation-guides\">Installation guides</h3>\n<p>Follow these installation guides to install Kyma locally:</p>\n<ul>\n<li><a href=\"#installation-install-kyma-locally-from-the-release\">Install Kyma locally from a release</a></li>\n<li><a href=\"#installation-install-kyma-locally-from-sources\">Install Kyma locally from sources</a></li>\n</ul>\n<p>You can also install Kyma depending on the supported cloud providers:</p>\n<ul>\n<li><a href=\"#installation-install-kyma-on-a-gke-cluster\">Install Kyma on a GKE cluster</a></li>\n<li><a href=\"#installation-install-kyma-on-an-aks-cluster\">Install Kyma on an AKS cluster</a></li>\n<li><a href=\"#installation-install-kyma-on-a-gke-cluster-with-wildcard-dns\">Install Kyma on a GKE cluster with the wildcard DNS</a></li>\n<li><a href=\"#installation-install-kyma-on-an-aks-cluster-with-wildcard-dns\">Install Kyma on an AKS cluster with the wildcard DNS</a></li>\n</ul>\n<p>Read rest of the installation documents to learn how to:</p>\n<ul>\n<li><a href=\"#installation-installation-with-knative\">Install Kyma with Knative</a></li>\n<li><a href=\"#installation-custom-component-installation\">Disable the selected components&#39; installation or install them separately</a></li>\n<li><a href=\"#installation-update-kyma\">Update Kyma</a></li>\n<li><a href=\"#installation-reinstall-kyma\">Reinstall Kyma</a></li>\n<li><a href=\"#installation-local-installation-scripts-deep-dive\">Get in-depth knowledge about the installation scripts</a></li>\n</ul>\n<blockquote>\n<p><strong>NOTE:</strong> Make sure to check whether the version of the documentation in the left pane of the <code>kyma-project.io</code> is compatible with your Kyma version.</p>\n</blockquote>\n"
    },
    {
      "order": "04-02-local-installation-from-release",
      "title": "Install Kyma locally from the release",
      "type": "Installation",
      "source": "<p>This Installation guide shows developers how to quickly deploy Kyma locally on a Mac or Linux from the latest release. Kyma installs locally using a proprietary installer based on a <a href=\"https://coreos.com/operators/\" target=\"_blank\">Kubernetes operator</a>. The document provides prerequisites, instructions on how to install Kyma locally and verify the deployment, as well as the troubleshooting tips.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>To run Kyma locally, clone this Git repository to your machine and check out the latest release.</p>\n<p>Additionally, download these tools:</p>\n<ul>\n<li><a href=\"https://github.com/kubernetes/minikube\" target=\"_blank\">Minikube</a> 0.33.0</li>\n<li><a href=\"https://kubernetes.io/docs/tasks/tools/install-kubectl/\" target=\"_blank\">kubectl</a> 1.11.0</li>\n<li><a href=\"https://github.com/kubernetes/helm\" target=\"_blank\">Helm</a> 2.10.0</li>\n<li><a href=\"https://stedolan.github.io/jq/\" target=\"_blank\">jq</a></li>\n</ul>\n<p>Virtualization:</p>\n<ul>\n<li><a href=\"https://github.com/kubernetes/minikube/blob/master/docs/drivers.md#hyperkit-driver\" target=\"_blank\">Hyperkit driver</a> - Mac only</li>\n<li><a href=\"https://www.virtualbox.org/\" target=\"_blank\">VirtualBox</a> - Linux only</li>\n</ul>\n<blockquote>\n<p><strong>NOTE:</strong> To work with Kyma, use only the provided scripts and commands. Kyma does not work on a basic Minikube cluster that you can start using the <code>minikube start</code> command.</p>\n</blockquote>\n<h2 id=\"set-up-certificates\">Set up certificates</h2>\n<p>Kyma comes with a local wildcard self-signed <code>server.crt</code> certificate that you can find under the <code>/installation/certs/workspace/raw/</code> directory of the <code>kyma</code> repository. Trust it on the OS level for convenience.</p>\n<p>Follow these steps to &quot;always trust&quot; the Kyma certificate on Mac:</p>\n<ol>\n<li>Change the working directory to <code>installation</code>:<pre><code>cd installation\n</code></pre></li>\n<li>Run this command:<pre><code>sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain certs/workspace/raw/server.crt\n</code></pre></li>\n</ol>\n<blockquote>\n<p><strong>NOTE:</strong> &quot;Always trusting&quot; the certificate does not work with Mozilla Firefox.</p>\n</blockquote>\n<p>To access the Application Connector and connect an external solution to the local deployment of Kyma, you must add the certificate to the trusted certificate storage of your programming environment. Read <a href=\"/components/application-connector#details-access-the-application-connector-on-a-local-kyma-deployment\">this</a> document to learn more.</p>\n<h2 id=\"install-kyma-on-minikube\">Install Kyma on Minikube</h2>\n<p>You can install Kyma either with all core subcomponents or only with the selected ones. This section describes how to install Kyma with all core subcomponents. Read <a href=\"/root/kyma#installation-custom-component-installation\">this</a> document to learn how to install only the selected subcomponents.</p>\n<blockquote>\n<p><strong>NOTE:</strong> Running the installation script deletes any previously existing cluster from your Minikube.</p>\n</blockquote>\n<blockquote>\n<p><strong>NOTE:</strong> Logging and Monitoring subcomponents are not included by default when you install Kyma on Minikube. You can install them using the instructions provided <a href=\"https://github.com/kyma-project/kyma/tree/master/resources\" target=\"_blank\">here</a>.</p>\n</blockquote>\n<p>To install Kyma, follow these steps:</p>\n<ol>\n<li><p>Change the working directory to <code>installation</code>:</p>\n<pre><code>cd installation\n</code></pre></li>\n<li><p>Use the following command to run Kubernetes locally using Minikube:</p>\n<pre><code>./scripts/minikube.sh --domain &quot;kyma.local&quot; --vm-driver &quot;hyperkit&quot;\n</code></pre></li>\n<li><p>Wait until the <code>kube-dns</code> Pod is ready. Run this script to setup Tiller:</p>\n<pre><code>./scripts/install-tiller.sh\n</code></pre></li>\n<li><p>Go to <a href=\"https://github.com/kyma-project/kyma/releases/\" target=\"_blank\">this</a> page and choose the latest release.</p>\n</li>\n<li><p>Export the release version as an environment variable. Run:</p>\n<pre><code>export LATEST={KYMA_RELEASE_VERSION}\n</code></pre></li>\n<li><p>Deploy the Kyma Installer in your cluster from the <code>$LATEST</code> release:</p>\n<pre><code>kubectl apply -f https://github.com/kyma-project/kyma/releases/download/$LATEST/kyma-installer-local.yaml\n</code></pre></li>\n<li><p>Configure the Kyma installation using the local configuration file from the <code>$LATEST</code> release:</p>\n<pre><code>kubectl apply -f https://github.com/kyma-project/kyma/releases/download/$LATEST/kyma-config-local.yaml\n</code></pre></li>\n<li><p>To trigger the installation process, label the <code>kyma-installation</code> custom resource:</p>\n<pre><code>kubectl label installation/kyma-installation action=install\n</code></pre></li>\n<li><p>By default, the Kyma installation is a background process, which allows you to perform other tasks in the terminal window. Nevertheless, you can track the progress of the installation by running this script:</p>\n<pre><code>./scripts/is-installed.sh\n</code></pre></li>\n</ol>\n<p>Read <a href=\"#installation-reinstall-kyma\">this</a> document to learn how to reinstall Kyma without deleting the cluster from Minikube.</p>\n<p>To learn how to test Kyma, see <a href=\"#details-testing-kyma\">this</a> document.</p>\n<h2 id=\"verify-the-deployment\">Verify the deployment</h2>\n<p>Follow the guidelines in the subsections to confirm that your Kubernetes API Server is up and running as expected.</p>\n<h3 id=\"verify-the-installation-status-using-the-is-installed-sh-script\">Verify the installation status using the is-installed.sh script</h3>\n<p>The <code>is-installed.sh</code> script is designed to give you clear information about the Kyma installation. Run it at any point to get the current installation status, or to find out whether the installation is successful.</p>\n<p>If the script indicates that the installation failed, try to install Kyma again by re-running the <code>run.sh</code> script.</p>\n<p>If the installation fails in a reproducible manner, don&#39;t hesitate to create a <a href=\"https://github.com/kyma-project/kyma/issues\" target=\"_blank\">GitHub</a> issue in the project or reach out to the <a href=\"https://kyma-community.slack.com/messages/CD2HJ0E78\" target=\"_blank\">&quot;installation&quot; Slack channel</a> to get direct support from the community.</p>\n<h3 id=\"access-the-kyma-console\">Access the Kyma console</h3>\n<p>Access your local Kyma instance through <a href=\"https://console.kyma.local/\" target=\"_blank\">this</a> link.</p>\n<ul>\n<li>Click <strong>Login with Email</strong> and sign in with the <a href=\"mailto:**admin@kyma.cx\">**admin@kyma.cx</a>** email address. Use the password contained in the  <code>admin-user</code> Secret located in the <code>kyma-system</code> Namespace. To get the password, run:</li>\n</ul>\n<pre><code class=\"lang-bash\">kubectl get secret admin-user -n kyma-system -o jsonpath=&quot;{.data.password}&quot; | base64 -D\n</code></pre>\n<ul>\n<li>Click the <strong>Namespaces</strong> section and select a Namespace from the drop-down menu to explore Kyma further.</li>\n</ul>\n<h3 id=\"access-the-kubernetes-dashboard\">Access the Kubernetes Dashboard</h3>\n<p>Additionally, confirm that you can access your Kubernetes Dashboard. Run the following command to check the IP address on which Minikube is running:</p>\n<pre><code class=\"lang-bash\">minikube ip\n</code></pre>\n<p>The address of your Kubernetes Dashboard looks similar to this:</p>\n<pre><code>http://{ip-address}:30000\n</code></pre><p>See the example of the website address:</p>\n<pre><code>http://192.168.64.44:30000\n</code></pre><h2 id=\"enable-horizontal-pod-autoscaler-hpa-\">Enable Horizontal Pod Autoscaler (HPA)</h2>\n<p>By default, the Horizontal Pod Autoscaler (HPA) is not enabled in your local Kyma installation, so you need to enable it manually.</p>\n<p>Kyma uses the <code>autoscaling/v1</code> stable version, which supports only CPU autoscaling. Once enabled, HPA automatically scales the number of lambda function Pods based on the observed CPU utilization.</p>\n<blockquote>\n<p><strong>NOTE:</strong> The <code>autoscaling/v1</code> version does not support custom metrics. To use such metrics, you need the <code>autoscaling/v2beta1</code> version.</p>\n</blockquote>\n<p>Follow these steps to enable HPA:</p>\n<ol>\n<li><p>Enable the metrics server for resource metrics by running the following command:</p>\n<pre><code>minikube addons enable metrics-server\n</code></pre></li>\n<li><p>Verify if the metrics server is active by checking the list of addons:</p>\n<pre><code>minikube addons list\n</code></pre></li>\n</ol>\n<h2 id=\"stop-and-restart-kyma-without-reinstalling\">Stop and restart Kyma without reinstalling</h2>\n<p>Use the <code>minikube.sh</code> script to restart the Minikube cluster without reinstalling Kyma. Follow these steps to stop and restart your cluster:</p>\n<ol>\n<li>Stop the Minikube cluster with Kyma installed. Run:<pre><code>minikube stop\n</code></pre></li>\n<li>Restart the cluster without reinstalling Kyma. Run:<pre><code>./scripts/minikube.sh --domain &quot;kyma.local&quot; --vm-driver &quot;hyperkit&quot;\n</code></pre></li>\n</ol>\n<p>The script discovers that a Minikube cluster is initialized and asks if you want to delete it. Answering <code>no</code> causes the script to start the Minikube cluster and restarts all of the previously installed components. Even though this procedure takes some time, it is faster than a clean installation as you don&#39;t download all of the required Docker images.</p>\n<p>To verify that the restart is successful, run this command and check if all Pods have the <code>RUNNING</code> status:</p>\n<pre><code>kubectl get pods --all-namespaces\n</code></pre><h2 id=\"troubleshooting\">Troubleshooting</h2>\n<p>If the Installer does not respond as expected, check the installation status using the <code>is-installed.sh</code> script with the <code>--verbose</code> flag added. Run:</p>\n<pre><code>scripts/is-installed.sh --verbose\n</code></pre><p>If the installation is successful but a component does not behave in an expected way, see if all deployed Pods are running. Run this command:  </p>\n<pre><code>kubectl get pods --all-namespaces\n</code></pre><p>The command retrieves all Pods from all Namespaces, the status of the Pods, and their instance numbers. Check if the STATUS column shows Running for all Pods. If any of the Pods that you require do not start successfully, perform the installation again.</p>\n<p>If the problem persists, don&#39;t hesitate to create a <a href=\"https://github.com/kyma-project/kyma/issues\" target=\"_blank\">GitHub</a> issue or reach out to the <a href=\"https://kyma-community.slack.com/messages/CD2HJ0E78\" target=\"_blank\">&quot;installation&quot; Slack channel</a> to get direct support from the community.</p>\n"
    },
    {
      "order": "04-03-local-installation-from-sources",
      "title": "Install Kyma locally from sources",
      "type": "Installation",
      "source": "<p>This Installation guide shows developers how to quickly deploy Kyma on a Mac or Linux from local sources. Follow it if you want to use Kyma for development purposes.</p>\n<p>Kyma installs locally using a proprietary installer based on a <a href=\"https://coreos.com/operators/\" target=\"_blank\">Kubernetes operator</a>. The document describes only the installation part. For prerequisites, certificates setup, deployment validation, and troubleshooting steps, see <a href=\"#installation-install-kyma-locally-from-the-release\">this</a> document.</p>\n<h2 id=\"install-kyma\">Install Kyma</h2>\n<p>To run Kyma locally, clone this Git repository to your machine.</p>\n<p>To start the local installation, run the following command:</p>\n<pre><code>./installation/cmd/run.sh\n</code></pre><p>This script sets up default parameters, starts Minikube, builds the Kyma Installer, generates local configuration, creates the Installation custom resource, and sets up the Installer.</p>\n<blockquote>\n<p><strong>NOTE:</strong> See <a href=\"#installation-local-installation-scripts-deep-dive\">this</a> document for a detailed explanation of the <code>run.sh</code> script and the subscripts it triggers.</p>\n</blockquote>\n<p>You can execute the <code>installation/cmd/run.sh</code> script with the following parameters:</p>\n<ul>\n<li><code>--password {YOUR_PASSWORD}</code> which allows you to set a password for the <a href=\"mailto:**admin@kyma.cx\">**admin@kyma.cx</a>** user.</li>\n<li><code>--skip-minikube-start</code> which skips the execution of the <code>installation/scripts/minikube.sh</code> script.</li>\n<li><code>--vm-driver</code> which points to either <code>virtualbox</code> or <code>hyperkit</code>, depending on your operating system.</li>\n</ul>\n<p>Read <a href=\"#installation-reinstall-kyma\">this</a> document to learn how to reinstall Kyma without deleting the cluster from Minikube.</p>\n<p>To learn how to test Kyma, see <a href=\"#details-testing-kyma\">this</a> document.</p>\n"
    },
    {
      "order": "04-04-gke-installation",
      "title": "Install Kyma on a GKE cluster",
      "type": "Installation",
      "source": "<p>This Installation guide shows developers how to quickly deploy Kyma on a <a href=\"https://cloud.google.com/kubernetes-engine/\" target=\"_blank\">Google Kubernetes Engine</a> (GKE) cluster. Kyma installs on a cluster using a proprietary installer based on a Kubernetes operator.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<ul>\n<li>A domain for your GKE cluster</li>\n<li><a href=\"https://console.cloud.google.com/\" target=\"_blank\">Google Cloud Platform</a> (GCP) project</li>\n<li><a href=\"https://www.docker.com/\" target=\"_blank\">Docker</a></li>\n<li><a href=\"https://hub.docker.com/\" target=\"_blank\">Docker Hub</a> account</li>\n<li><a href=\"https://cloud.google.com/sdk/gcloud/\" target=\"_blank\">gcloud</a></li>\n</ul>\n<blockquote>\n<p><strong>NOTE:</strong> If you don&#39;t own a domain which you can use or you don&#39;t want to assign a domain to a cluster, see <a href=\"#installation-install-kyma-on-a-gke-cluster-with-wildcard-dns\">this</a> document which shows you how to create a cluster-based playground environment using a wildcard DNS provided by xip.io.</p>\n</blockquote>\n<h2 id=\"dns-setup\">DNS setup</h2>\n<p>Delegate the management of your domain to Google Cloud DNS. Follow these steps:</p>\n<ol>\n<li><p>Export the domain name, project name, and DNS zone name as environment variables. Run the commands listed below:</p>\n<pre><code> export DOMAIN={YOUR_SUBDOMAIN}\n export DNS_NAME={YOUR_DOMAIN}.\n export PROJECT={YOUR_GOOGLE_PROJECT}\n export DNS_ZONE={YOUR_DNS_ZONE}\n</code></pre></li>\n<li><p>Create a DNS-managed zone in your Google project. Run:</p>\n<pre><code> gcloud dns --project=$PROJECT managed-zones create $DNS_ZONE --description= --dns-name=$DNS_NAME\n</code></pre><p> Alternatively, create it through the GCP UI. Navigate go to <strong>Network Services</strong> in the <strong>Network</strong> section, click <strong>Cloud DNS</strong> and select <strong>Create Zone</strong>.</p>\n</li>\n<li><p>Delegate your domain to Google name servers.</p>\n<ul>\n<li><p>Get the list of the name servers from the zone details. This is a sample list:</p>\n<pre><code>ns-cloud-b1.googledomains.com.\nns-cloud-b2.googledomains.com.\nns-cloud-b3.googledomains.com.\nns-cloud-b4.googledomains.com.\n</code></pre></li>\n<li><p>Set up your domain to use these name servers.</p>\n</li>\n</ul>\n</li>\n<li><p>Check if everything is set up correctly and your domain is managed by Google name servers. Run:</p>\n<pre><code> host -t ns $DNS_NAME\n</code></pre><p> A successful response returns the list of the name servers you fetched from GCP.</p>\n</li>\n</ol>\n<h2 id=\"get-the-tls-certificate\">Get the TLS certificate</h2>\n<ol>\n<li>Create a folder for certificates. Run:<pre><code> mkdir letsencrypt\n</code></pre></li>\n<li><p>Create a new service account and assign it to the <code>dns.admin</code> role. Run these commands:</p>\n<pre><code> gcloud iam service-accounts create dnsmanager --display-name &quot;dnsmanager&quot;\n</code></pre><pre><code> gcloud projects add-iam-policy-binding $PROJECT         --member serviceAccount:dnsmanager@$PROJECT.iam.gserviceaccount.com --role roles/dns.admin\n</code></pre></li>\n<li><p>Generate an access key for this account in the <code>letsencrypt</code> folder. Run:</p>\n<pre><code> gcloud iam service-accounts keys create ./letsencrypt/key.json --iam-account dnsmanager@$PROJECT.iam.gserviceaccount.com\n</code></pre></li>\n<li><p>Run the Certbot Docker image with the <code>letsencrypt</code> folder mounted. Certbot uses the key to apply DNS challenge for the certificate request and stores the TLS certificates in that folder. Run:</p>\n<pre><code> docker run -it --name certbot --rm         -v &quot;$(pwd)/letsencrypt:/etc/letsencrypt&quot;         certbot/dns-google         certonly         -m YOUR_EMAIL_HERE --agree-tos --no-eff-email         --dns-google         --dns-google-credentials /etc/letsencrypt/key.json         --server https://acme-v02.api.letsencrypt.org/directory         -d &quot;*.$DOMAIN&quot;\n</code></pre></li>\n<li><p>Export the certificate and key as environment variables. Run these commands:</p>\n<pre><code> export TLS_CERT=$(cat ./letsencrypt/live/$DOMAIN/fullchain.pem | base64 | sed &#39;s/ /\\ /g&#39;)\n export TLS_KEY=$(cat ./letsencrypt/live/$DOMAIN/privkey.pem | base64 | sed &#39;s/ /\\ /g&#39;)\n</code></pre></li>\n</ol>\n<h2 id=\"prepare-the-gke-cluster\">Prepare the GKE cluster</h2>\n<ol>\n<li><p>Select a name for your cluster and set it as an environment variable. Run:</p>\n<pre><code> export CLUSTER_NAME={CLUSTER_NAME_YOU_WANT}\n</code></pre></li>\n<li><p>Create a cluster in the <code>europe-west1</code> region. Run:</p>\n<pre><code> gcloud container --project &quot;$PROJECT&quot; clusters     create &quot;$CLUSTER_NAME&quot; --zone &quot;europe-west1-b&quot;     --cluster-version &quot;1.11.5&quot; --machine-type &quot;n1-standard-2&quot;     --addons HorizontalPodAutoscaling,HttpLoadBalancing,KubernetesDashboard\n</code></pre></li>\n<li><p>Install Tiller on your GKE cluster. Run:</p>\n<pre><code> kubectl apply -f installation/resources/tiller.yaml\n</code></pre></li>\n</ol>\n<h2 id=\"prepare-the-installation-configuration-file\">Prepare the installation configuration file</h2>\n<h3 id=\"using-the-latest-github-release\">Using the latest GitHub release</h3>\n<ol>\n<li><p>Go to <a href=\"https://github.com/kyma-project/kyma/releases/\" target=\"_blank\">this</a> page and choose the latest release.</p>\n</li>\n<li><p>Export the release version as an environment variable. Run:</p>\n<pre><code> export LATEST={KYMA_RELEASE_VERSION}\n</code></pre></li>\n<li><p>Download the <code>kyma-config-cluster.yaml</code> and <code>kyma-installer-cluster.yaml</code> files from the latest release. Run:</p>\n<pre><code>wget https://github.com/kyma-project/kyma/releases/download/$LATEST/kyma-config-cluster.yaml\nwget https://github.com/kyma-project/kyma/releases/download/$LATEST/kyma-installer-cluster.yaml\n</code></pre></li>\n<li><p>Update the file with the values from your environment variables. Merge files from step 3 to one <code>my-kyma.yaml</code> file. Run:</p>\n<pre><code> cat kyma-installer-cluster.yaml &lt;(echo -e &quot;\n---&quot;) kyma-config-cluster.yaml | sed -e &quot;s/__DOMAIN__/$DOMAIN/g&quot; |sed -e &quot;s/__TLS_CERT__/$TLS_CERT/g&quot; | sed -e &quot;s/__TLS_KEY__/$TLS_KEY/g&quot;|sed -e &quot;s/__.*__//g&quot;  &gt;my-kyma.yaml\n</code></pre></li>\n<li><p>The output of this operation is the <code>my_kyma.yaml</code> file. Use it to deploy Kyma on your GKE cluster.</p>\n</li>\n</ol>\n<h3 id=\"using-your-own-image\">Using your own image</h3>\n<ol>\n<li><p>Checkout <a href=\"https://github.com/kyma-project/kyma\" target=\"_blank\">kyma-project</a> and enter the root folder.</p>\n</li>\n<li><p>Build an image that is based on the current Installer image and includes the current installation and resources charts. Run:</p>\n<pre><code> docker build -t kyma-installer:latest -f tools/kyma-installer/kyma.Dockerfile .\n</code></pre></li>\n<li><p>Push the image to your Docker Hub:</p>\n<pre><code> docker tag kyma-installer:latest [YOUR_DOCKER_LOGIN]/kyma-installer:latest\n</code></pre><pre><code> docker push [YOUR_DOCKER_LOGIN]/kyma-installer:latest\n</code></pre></li>\n<li><p>Prepare the deployment file:</p>\n<pre><code> cat kyma-installer-cluster.yaml &lt;(echo -e &quot;\n---&quot;) installation/resources/installer.yaml &lt;(echo -e &quot;\n---&quot;) installation/resources/installer-config-cluster.yaml.tpl  &lt;(echo -e &quot;\n---&quot;) installation/resources/installer-cr-cluster.yaml.tpl | sed -e &quot;s/__DOMAIN__/$DOMAIN/g&quot; |sed -e &quot;s/__TLS_CERT__/$TLS_CERT/g&quot; | sed -e &quot;s/__TLS_KEY__/$TLS_KEY/g&quot; | sed -e &quot;s/__.*__//g&quot; &gt; my-kyma.yaml\n</code></pre></li>\n<li><p>The output of this operation is the <code>my_kyma.yaml</code> file. Modify it to fetch the proper image with the changes you made ([YOUR_DOCKER_LOGIN]/kyma-installer:latest). Use the modified file to deploy Kyma on your GKE cluster.</p>\n</li>\n</ol>\n<h2 id=\"deploy-kyma\">Deploy Kyma</h2>\n<ol>\n<li>Configure kubectl to use your new cluster. Run:  add yourself as the cluster admin, and deploy Kyma Installer with your configuration.<pre><code> gcloud container clusters get-credentials $CLUSTER_NAME --zone europe-west1-b --project $PROJECT\n</code></pre></li>\n<li>Add your account as the cluster administrator:<pre><code> kubectl create clusterrolebinding cluster-admin-binding --clusterrole=cluster-admin --user=$(gcloud config get-value account)\n</code></pre></li>\n<li>Deploy Kyma using the <code>my-kyma</code> custom configuration file you created. Run:<pre><code> kubectl apply -f my-kyma.yaml\n</code></pre></li>\n<li><p>Check if the Pods of Tiller and the Kyma Installer are running:</p>\n<pre><code> kubectl get pods --all-namespaces\n</code></pre></li>\n<li><p>Start Kyma installation:</p>\n<pre><code> kubectl label installation/kyma-installation action=install\n</code></pre></li>\n<li><p>To watch the installation progress, run:</p>\n<pre><code> while true; do       kubectl -n default get installation/kyma-installation -o jsonpath=&quot;{&#39;Status: &#39;}{.status.state}{&#39;, description: &#39;}{.status.description}&quot;; echo;       sleep 5;     done\n</code></pre><p> After the installation process is finished, the <code>Status: Installed, description: Kyma installed</code> message appears.\n In case of an error, you can fetch the logs from the Installer by running:</p>\n<pre><code> kubectl -n kyma-installer logs -l &#39;name=kyma-installer&#39;\n</code></pre></li>\n</ol>\n<h2 id=\"configure-dns-for-the-cluster-load-balancer\">Configure DNS for the cluster load balancer</h2>\n<p>Run these commands:</p>\n<pre><code>export EXTERNAL_PUBLIC_IP=$(kubectl get service -n istio-system istio-ingressgateway -o jsonpath=&quot;{.status.loadBalancer.ingress[0].ip}&quot;)\n\nexport REMOTE_ENV_IP=$(kubectl get service -n kyma-system application-connector-nginx-ingress-controller -o jsonpath=&quot;{.status.loadBalancer.ingress[0].ip}&quot;)\n\ngcloud dns --project=$PROJECT record-sets transaction start --zone=$DNS_ZONE\n\ngcloud dns --project=$PROJECT record-sets transaction add $EXTERNAL_PUBLIC_IP --name=*.$DOMAIN. --ttl=60 --type=A --zone=$DNS_ZONE\n\ngcloud dns --project=$PROJECT record-sets transaction add $REMOTE_ENV_IP --name=gateway.$DOMAIN. --ttl=60 --type=A --zone=$DNS_ZONE\n\ngcloud dns --project=$PROJECT record-sets transaction execute --zone=$DNS_ZONE\n\n</code></pre><h2 id=\"prepare-your-kyma-deployment-for-production-use\">Prepare your Kyma deployment for production use</h2>\n<p>To use the cluster in a production environment, it is recommended you configure a new server-side certificate for the Application Connector and replace the placeholder certificate it installs with.\nIf you don&#39;t generate a new certificate, the system uses the placeholder certificate. As a result, the security of your implementation is compromised.</p>\n<p>Follow this steps to configure a new, more secure certificate suitable for production use.</p>\n<ol>\n<li><p>Generate a new certificate and key. Run:</p>\n<pre><code> openssl req -new -newkey rsa:4096 -nodes -keyout ca.key -out ca.csr -subj &quot;/C=PL/ST=N/L=GLIWICE/O=SAP Hybris/OU=Kyma/CN=wormhole.kyma.cx&quot;\n\n openssl x509 -req -sha256 -days 365 -in ca.csr -signkey ca.key -out ca.pem\n</code></pre></li>\n<li><p>Export the certificate and key to environment variables:</p>\n<pre><code> export AC_CRT=$(cat ./ca.pem | base64 | base64)\n export AC_KEY=$(cat ./ca.key | base64 | base64)\n\n</code></pre></li>\n<li><p>Prepare installation file with the following command:</p>\n<pre><code> cat kyma-installer-cluster.yaml &lt;(echo -e &quot;\n---&quot;) cat kyma-config-cluster.yaml | sed -e &quot;s/__DOMAIN__/$DOMAIN/g&quot; |sed -e &quot;s/__TLS_CERT__/$TLS_CERT/g&quot; | sed -e &quot;s/__TLS_KEY__/$TLS_KEY/g&quot; | sed -e &quot;s/__REMOTE_ENV_CA__/$AC_CRT/g&quot; | sed -e &quot;s/__REMOTE_ENV_CA_KEY__/$AC_KEY/g&quot; |sed -e &quot;s/__.*__//g&quot;  &gt;my-kyma.yaml\n</code></pre></li>\n</ol>\n"
    },
    {
      "order": "04-05-aks-installation",
      "title": "Install Kyma on an AKS cluster",
      "type": "Installation",
      "source": "<p>This Installation guide shows developers how to quickly deploy Kyma on an <a href=\"https://azure.microsoft.com/services/kubernetes-service/\" target=\"_blank\">Azure Kubernetes Service</a> (AKS) cluster. Kyma installs on a cluster using a proprietary installer based on a Kubernetes operator.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<ul>\n<li>A domain for your AKS cluster</li>\n<li><a href=\"https://azure.microsoft.com\" target=\"_blank\">Microsoft Azure</a></li>\n<li><a href=\"https://www.docker.com/\" target=\"_blank\">Docker</a></li>\n<li><a href=\"https://hub.docker.com/\" target=\"_blank\">Docker Hub</a> account</li>\n<li><a href=\"https://docs.microsoft.com/pl-pl/cli/azure/install-azure-cli\" target=\"_blank\">az</a></li>\n<li>set the environment variables</li>\n</ul>\n<h3 id=\"environment-variables\">Environment variables</h3>\n<p>Set the following environment variables:</p>\n<ul>\n<li><p>To set mandatory variables, run:</p>\n<pre><code>export RS_GROUP={YOUR_RESOURCE_GROUP_NAME}\nexport CLUSTER_NAME={YOUR_CLUSTER_NAME}\nexport REGION={YOUR_REGION} #westeurope\n</code></pre></li>\n<li><p>If you want to install Kyma from release,  choose a <a href=\"https://github.com/kyma-project/kyma/releases/\" target=\"_blank\">release</a> you want to use and export it as an environment variable. Run:</p>\n<pre><code>export KYMA_RELEASE_VERSION={KYMA_RELEASE_VERSION}\n</code></pre><blockquote>\n<p><strong>NOTE:</strong> Installation from release is supported since version 0.7.0. \nIf you want to install Kyma from sources, do not export <code>KYMA_RELEASE_VERSION</code>.</p>\n</blockquote>\n</li>\n<li><p>If you use a custom domain, set also these variables:</p>\n<pre><code>export DNS_DOMAIN={YOUR_DOMAIN} # example.com\nexport SUB_DOMAIN={YOUR_SUBDOMAIN} # cluster (in this case the full name of your cluster is cluster.example.com)\n</code></pre></li>\n</ul>\n<p>Create a resource group that will contain all your resources:</p>\n<pre><code>az group create --name $RS_GROUP --location $REGION\n</code></pre><blockquote>\n<p><strong>NOTE:</strong> If you don&#39;t own a domain which you can use or you don&#39;t want to assign a domain to a cluster, see the <a href=\"#installation-install-kyma-on-an-aks-cluster-with-wildcard-dns\">document</a> which shows you how to create a cluster-based playground environment using a wildcard DNS provided by xip.io. </p>\n</blockquote>\n<h2 id=\"dns-setup\">DNS setup</h2>\n<p>Delegate the management of your domain to Azure DNS. Follow these steps:</p>\n<ol>\n<li><p>Create a DNS-managed zone in your Azure subscription. Run:</p>\n<pre><code> az network dns zone create -g $RS_GROUP -n $DNS_DOMAIN\n</code></pre><p> Alternatively, create it through the Azure UI. In the <strong>Networking</strong> section, go to <strong>All services</strong>, click <strong>DNS zones</strong>, and select <strong>Add</strong>.</p>\n</li>\n<li><p>Delegate your domain to Azure name servers.</p>\n<ul>\n<li><p>Get the list of the name servers from the zone details. This is a sample list:</p>\n<pre><code>ns1-05.azure-dns.com.\nns2-05.azure-dns.net.\nns3-05.azure-dns.org.\nns4-05.azure-dns.info.\n</code></pre></li>\n<li><p>Set up your domain to use these name servers.</p>\n</li>\n</ul>\n</li>\n<li><p>Check if everything is set up correctly and your domain is managed by Azure name servers. Run:</p>\n<pre><code> host -t ns $DNS_DOMAIN\n</code></pre><p> A successful response returns the list of the name servers you fetched from Azure.</p>\n</li>\n</ol>\n<h2 id=\"get-the-tls-certificate\">Get the TLS certificate</h2>\n<blockquote>\n<p><strong>NOTE:</strong> Azure DNS is not yet supported by Certbot so you must perform a manual verification.</p>\n</blockquote>\n<ol>\n<li>Create a folder for certificates. Run:<pre><code> mkdir letsencrypt\n</code></pre></li>\n<li><p>Run the Certbot Docker image with the <code>letsencrypt</code> folder mounted. Certbot stores the TLS certificates in that folder. Export your email address:</p>\n<pre><code> export YOUR_EMAIL={YOUR_EMAIL}\n</code></pre><p> To obtain a certificate, run:</p>\n<pre><code> docker run -it --name certbot --rm         -v &quot;$(pwd)/letsencrypt:/etc/letsencrypt&quot;         certbot/certbot         certonly         -m $YOUR_EMAIL --agree-tos --no-eff-email         --manual         --manual-public-ip-logging-ok         --preferred-challenges dns         --server https://acme-v02.api.letsencrypt.org/directory         -d &quot;*.$SUB_DOMAIN.$DNS_DOMAIN&quot;\n</code></pre><p> You will see the following message:</p>\n<pre><code> Please deploy a DNS TXT record under the name\n _acme-challenge.rc2-test.kyma.online with the following value:\n\n # TXT_VALUE\n\n Before continuing, verify the record is deployed.\n</code></pre><p> Copy the <code>TXT_VALUE</code>. </p>\n</li>\n<li><p>Open a new console and set the environment variables from the <a href=\"#installation-install-kyma-on-an-aks-cluster-environment-variables\">Environment variables</a> section. Export the <code>TXT_VALUE</code>.</p>\n<pre><code> export TXT_VALUE={YOUR_TXT_VALUE}\n</code></pre><p> To modify TXT record for your domain, run:</p>\n<pre><code> az network dns record-set txt delete -n &quot;_acme-challenge.$SUB_DOMAIN&quot; -g $RS_GROUP -z $DNS_DOMAIN --yes\n az network dns record-set txt create -n &quot;_acme-challenge.$SUB_DOMAIN&quot; -g $RS_GROUP -z $DNS_DOMAIN --ttl 60 &gt; /dev/null\n az network dns record-set txt add-record -n &quot;_acme-challenge.$SUB_DOMAIN&quot; -g $RS_GROUP -z $DNS_DOMAIN --value $TXT_VALUE\n</code></pre></li>\n<li><p>Go back to the first console, wait 2 minutes and press enter. </p>\n</li>\n<li><p>Export the certificate and key as environment variables. Run these commands:</p>\n<pre><code> export TLS_CERT=$(cat ./letsencrypt/live/$SUB_DOMAIN.$DNS_DOMAIN/fullchain.pem | base64 | sed &#39;s/ /\\ /g&#39;)\n export TLS_KEY=$(cat ./letsencrypt/live/$SUB_DOMAIN.$DNS_DOMAIN/privkey.pem | base64 | sed &#39;s/ /\\ /g&#39;)\n</code></pre></li>\n</ol>\n<h2 id=\"prepare-the-aks-cluster\">Prepare the AKS cluster</h2>\n<ol>\n<li>Create an AKS cluster. Run:<pre><code> az aks create       --resource-group $RS_GROUP       --name $CLUSTER_NAME       --node-vm-size &quot;Standard_DS2_v2&quot;       --kubernetes-version 1.10.9       --enable-addons &quot;monitoring,http_application_routing&quot;       --generate-ssh-keys\n</code></pre></li>\n<li><p>To configure kubectl to use your new cluster, run:</p>\n<pre><code> az aks get-credentials --resource-group $RS_GROUP --name $CLUSTER_NAME\n</code></pre></li>\n<li><p>Install Tiller and add additional privileges to be able to access readiness probes endpoints on your AKS cluster.</p>\n<ul>\n<li>Installation from release<pre><code>kubectl apply -f https://raw.githubusercontent.com/kyma-project/kyma/$KYMA_RELEASE_VERSION/installation/resources/tiller.yaml\nkubectl apply -f https://raw.githubusercontent.com/kyma-project/kyma/$KYMA_RELEASE_VERSION/installation/resources/azure-crb-for-healthz.yaml\n</code></pre></li>\n<li>If you install Kyma from sources, check out <a href=\"https://github.com/kyma-project/kyma\" target=\"_blank\">kyma-project</a> and enter the root folder. Run:<pre><code>kubectl apply -f installation/resources/tiller.yaml\nkubectl apply -f installation/resources/azure-crb-for-healthz.yaml\n</code></pre></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"prepare-the-installation-configuration-file\">Prepare the installation configuration file</h2>\n<h3 id=\"using-the-latest-github-release\">Using the latest GitHub release</h3>\n<ol>\n<li><p>Download the <code>kyma-config-cluster.yaml</code> and <code>kyma-installer-cluster.yaml</code> files from the latest release. Run:</p>\n<pre><code>wget https://github.com/kyma-project/kyma/releases/download/$KYMA_RELEASE_VERSION/kyma-config-cluster.yaml\nwget https://github.com/kyma-project/kyma/releases/download/$KYMA_RELEASE_VERSION/kyma-installer-cluster.yaml\n</code></pre></li>\n<li><p>Update the file with the values from your environment variables. Merge files from step 3 to one <code>my-kyma.yaml</code> file. Run:</p>\n<pre><code> cat kyma-installer-cluster.yaml &lt;(echo -e &quot;\n---&quot;) kyma-config-cluster.yaml | sed -e &quot;s/__PROXY_EXCLUDE_IP_RANGES__/10.0.0.1/g&quot; | sed -e &quot;s/__DOMAIN__/$SUB_DOMAIN.$DNS_DOMAIN/g&quot; |sed -e &quot;s/__TLS_CERT__/$TLS_CERT/g&quot; | sed -e &quot;s/__TLS_KEY__/$TLS_KEY/g&quot;|sed -e &quot;s/__.*__//g&quot;  &gt;my-kyma.yaml\n</code></pre></li>\n<li><p>The output of this operation is the <code>my_kyma.yaml</code> file. Use it to deploy Kyma on your AKS cluster.</p>\n</li>\n</ol>\n<h3 id=\"using-your-own-image\">Using your own image</h3>\n<ol>\n<li><p>Build an image that is based on the current Installer image and includes the current installation and resources charts. Run:</p>\n<pre><code> docker build -t kyma-installer:latest -f tools/kyma-installer/kyma.Dockerfile .\n</code></pre></li>\n<li><p>Push the image to your Docker Hub:</p>\n<pre><code> docker tag kyma-installer:latest {YOUR_DOCKER_LOGIN}/kyma-installer:latest\n</code></pre><pre><code> docker push {YOUR_DOCKER_LOGIN}/kyma-installer:latest\n</code></pre></li>\n<li><p>Prepare the deployment file:</p>\n<pre><code> cat installation/resources/installer.yaml &lt;(echo -e &quot;\n---&quot;) installation/resources/installer-config-cluster.yaml.tpl  &lt;(echo -e &quot;\n---&quot;) installation/resources/installer-cr-cluster.yaml.tpl | sed -e &quot;s/__PROXY_EXCLUDE_IP_RANGES__/10.0.0.1/g&quot; | sed -e &quot;s/__DOMAIN__/$SUB_DOMAIN.$DNS_DOMAIN/g&quot; |sed -e &quot;s/__TLS_CERT__/$TLS_CERT/g&quot; | sed -e &quot;s/__TLS_KEY__/$TLS_KEY/g&quot; | sed -e &quot;s/__.*__//g&quot; &gt; my-kyma.yaml\n</code></pre></li>\n<li><p>In the <code>my-kyma.yaml</code> file created in the previous step, change the image URL to <code>{YOUR_DOCKER_LOGIN}/kyma-installer:latest</code>.</p>\n<pre><code> kind: Deployment\n metadata:\n   name: kyma-installer\n   namespace: kyma-installer\n   ......\n     image: eu.gcr.io/kyma-project/develop/installer:30bf314d\n</code></pre><p> Use the modified file to deploy Kyma on your AKS cluster.</p>\n</li>\n</ol>\n<h2 id=\"deploy-kyma\">Deploy Kyma</h2>\n<ol>\n<li><p>Deploy Kyma using the <code>my-kyma</code> custom configuration file you created. Run:</p>\n<pre><code> kubectl apply -f my-kyma.yaml\n</code></pre><blockquote>\n<p><strong>NOTE:</strong> In case you receive the <code>Error from server (MethodNotAllowed)</code> error, run the command again before going to step 2.</p>\n</blockquote>\n</li>\n<li><p>Check if the Pods of Tiller and the Kyma Installer are running:</p>\n<pre><code> kubectl get pods --all-namespaces\n</code></pre></li>\n<li><p>Start Kyma installation:</p>\n<pre><code> kubectl label installation/kyma-installation action=install\n</code></pre></li>\n<li><p>To watch the installation progress, run:</p>\n<pre><code> while true; do       kubectl -n default get installation/kyma-installation -o jsonpath=&quot;{&#39;Status: &#39;}{.status.state}{&#39;, description: &#39;}{.status.description}&quot;; echo;       sleep 5;     done\n</code></pre><p> After the installation process is finished, the <code>Status: Installed, description: Kyma installed</code> message appears.\n In case of an error, you can fetch the logs from the Installer by running:</p>\n<pre><code> kubectl -n kyma-installer logs -l &#39;name=kyma-installer&#39;\n</code></pre></li>\n</ol>\n<h2 id=\"configure-dns-for-the-cluster-load-balancer\">Configure DNS for the cluster load balancer</h2>\n<p>Run these commands:</p>\n<pre><code>export EXTERNAL_PUBLIC_IP=$(kubectl get service -n istio-system istio-ingressgateway -o jsonpath=&quot;{.status.loadBalancer.ingress[0].ip}&quot;)\n\nexport REMOTE_ENV_IP=$(kubectl get service -n kyma-system application-connector-nginx-ingress-controller -o jsonpath=&quot;{.status.loadBalancer.ingress[0].ip}&quot;)\n\naz network dns record-set a create -g $RS_GROUP -z $DNS_DOMAIN -n *.$SUB_DOMAIN --ttl 60\naz network dns record-set a add-record -g $RS_GROUP -z $DNS_DOMAIN -n *.$SUB_DOMAIN -a $EXTERNAL_PUBLIC_IP\n\naz network dns record-set a create -g $RS_GROUP -z $DNS_DOMAIN -n gateway.$SUB_DOMAIN --ttl 60\naz network dns record-set a add-record -g $RS_GROUP -z $DNS_DOMAIN -n gateway.$SUB_DOMAIN -a $REMOTE_ENV_IP\n</code></pre><p>Access your cluster under this address:</p>\n<pre><code>https://console.$SUB_DOMAIN.$DNS_DOMAIN\n</code></pre><h2 id=\"prepare-your-kyma-deployment-for-production-use\">Prepare your Kyma deployment for production use</h2>\n<p>To use the cluster in a production environment, it is recommended you configure a new server-side certificate for the Application Connector and replace the placeholder certificate it installs with.\nIf you don&#39;t generate a new certificate, the system uses the placeholder certificate. As a result, the security of your implementation is compromised.</p>\n<p>Follow this steps to configure a new, more secure certificate suitable for production use.</p>\n<ol>\n<li><p>Generate a new certificate and key. Run:</p>\n<pre><code> openssl req -new -newkey rsa:4096 -nodes -keyout ca.key -out ca.csr -subj &quot;/C=PL/ST=N/L=GLIWICE/O=SAP Hybris/OU=Kyma/CN=wormhole.kyma.cx&quot;\n\n openssl x509 -req -sha256 -days 365 -in ca.csr -signkey ca.key -out ca.pem\n</code></pre></li>\n<li><p>Export the certificate and key to environment variables:</p>\n<pre><code> export AC_CRT=$(cat ./ca.pem | base64 | base64)\n export AC_KEY=$(cat ./ca.key | base64 | base64)\n\n</code></pre></li>\n<li><p>Prepare installation file with the following command:</p>\n<pre><code> cat kyma-installer-cluster.yaml &lt;(echo -e &quot;\n---&quot;) cat kyma-config-cluster.yaml | sed -e &quot;s/__DOMAIN__/$SUB_DOMAIN.$DNS_DOMAIN/g&quot; | sed -e &quot;s/__PROXY_EXCLUDE_IP_RANGES__/10.0.0.1/g&quot;  | sed -e &quot;s/__TLS_CERT__/$TLS_CERT/g&quot; | sed -e &quot;s/__TLS_KEY__/$TLS_KEY/g&quot; | sed -e &quot;s/__REMOTE_ENV_CA__/$AC_CRT/g&quot; | sed -e &quot;s/__REMOTE_ENV_CA_KEY__/$AC_KEY/g&quot; |sed -e &quot;s/__.*__//g&quot;  &gt;my-kyma.yaml\n</code></pre></li>\n</ol>\n"
    },
    {
      "order": "04-06-gke-xip.io-domain",
      "title": "Install Kyma on a GKE cluster with wildcard DNS",
      "type": "Installation",
      "source": "<p>If you want to try Kyma in a cluster environment without assigning the cluster to a domain you own, you can use <a href=\"http://xip.io/\" target=\"_blank\"><code>xip.io</code></a> which provides a wildcard DNS for any IP address. Such\na scenario requires using a self-signed TLS certificate.</p>\n<p>This solution is not suitable for a production environment but makes for a great playground which allows you to get to know the product better.</p>\n<blockquote>\n<p><strong>NOTE:</strong> This feature requires Kyma version 0.6 or higher.</p>\n</blockquote>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>The prerequisites match these listed in <a href=\"#installation-install-kyma-on-a-gke-cluster\">this</a> document. However, you don&#39;t need to prepare a domain for your cluster as it is replaced by a wildcard DNS provided by <a href=\"http://xip.io/\" target=\"_blank\"><code>xip.io</code></a>.</p>\n<p>Follow <a href=\"#installation-install-kyma-on-a-gke-cluster-prepare-the-gke-cluster\">this</a> section to prepare your GKE cluster.</p>\n<p>Additionally, export your GCP project name as an environment variable. Run:</p>\n<pre><code>export PROJECT={YOUR_GCP_PROJECT_NAME}\n</code></pre><h2 id=\"allocate-required-ip-addresses-for-your-cluster\">Allocate required IP addresses for your cluster</h2>\n<p>When you install Kyma with the wildcard DNS, you can use one of two approaches to allocating the required IP addresses for your cluster:</p>\n<ul>\n<li>Dynamic IP allocation - can be used with <a href=\"#installation-installation-with-knative\">Knative</a> eventing and serverless, but disables the Application Connector. </li>\n<li>Manual IP allocation - cannot be used with <a href=\"#installation-installation-with-knative\">Knative</a> eventing and serverless, but leaves the Application Connector functional. </li>\n</ul>\n<p>Follow the respective instructions to deploy a cluster Kyma cluster with wildcard DNS which uses the IP allocation approach of your choice.</p>\n<h3 id=\"dynamic-ip-allocation\">Dynamic IP allocation</h3>\n<p>Use this command to prepare a configuration file that deploys Kyma with <a href=\"http://xip.io/\" target=\"_blank\"><code>xip.io</code></a> providing a wildcard DNS:</p>\n<pre><code>(cat installation/resources/installer.yaml ; echo &quot;\n---&quot; ; cat installation/resources/installer-config-cluster.yaml.tpl ; echo &quot;\n---&quot; ; cat installation/resources/installer-cr-cluster-xip-io.yaml.tpl) | sed -e &quot;s/__.*__//g&quot; &gt; my-kyma.yaml\n</code></pre><blockquote>\n<p><strong>NOTE:</strong> Using this approach disables the Application Connector. </p>\n</blockquote>\n<h3 id=\"manual-ip-allocation\">Manual IP allocation</h3>\n<ol>\n<li><p>Get public IP addresses for the load balancer of the GKE cluster to which you deploy Kyma and for the load balancer of the Application Connector.</p>\n<ul>\n<li><p>Export the <code>PUBLIC_IP_ADDRESS_NAME</code> and the <code>APP_CONNECTOR_IP_ADDRESS_NAME</code> environment variables. This defines the names of the reserved public IP addresses in your GCP project. Run:</p>\n<pre><code>export PUBLIC_IP_ADDRESS_NAME={GCP_COMPLIANT_PUBLIC_IP_ADDRESS_NAME}\nexport APP_CONNECTOR_IP_ADDRESS_NAME={GCP_COMPLIANT_APP_CONNECTOR_IP_ADDRESS_NAME}\n</code></pre><blockquote>\n<p><strong>NOTE:</strong> The name you set for the reserved public IP address must start with a lowercase letter followed by up to 62 lowercase letters, numbers, or hyphens, and cannot end with a hyphen.</p>\n</blockquote>\n</li>\n<li><p>Run these commands to reserve public IP addresses for the load balancer of your cluster and the load balancer of the Application Connector.</p>\n<pre><code>gcloud beta compute --project=$PROJECT addresses create $PUBLIC_IP_ADDRESS_NAME --region=europe-west1 --network-tier=PREMIUM\ngcloud beta compute --project=$PROJECT addresses create $APP_CONNECTOR_IP_ADDRESS_NAME --region=europe-west1 --network-tier=PREMIUM\n</code></pre><blockquote>\n<p><strong>NOTE:</strong> The region in which you reserve IP addresses must match the region of your GKE cluster.</p>\n</blockquote>\n</li>\n<li><p>Set the reserved IP addresses as <code>EXTERNAL_PUBLIC_IP</code> and <code>CONNCETOR_IP</code> environment variables. Run:</p>\n<pre><code>export EXTERNAL_PUBLIC_IP=$(gcloud compute addresses list --project=$PROJECT --filter=&quot;name=$PUBLIC_IP_ADDRESS_NAME&quot; --format=&quot;value(address)&quot;)\nexport CONNECTOR_IP=$(gcloud compute addresses list --project=$PROJECT --filter=&quot;name=$APP_CONNECTOR_IP_ADDRESS_NAME&quot; --format=&quot;value(address)&quot;)\n</code></pre></li>\n</ul>\n</li>\n<li><p>Use this command to prepare a configuration file that deploys Kyma with <a href=\"http://xip.io/\" target=\"_blank\"><code>xip.io</code></a> providing a wildcard DNS:</p>\n<pre><code>(cat installation/resources/installer.yaml ; echo &quot;\n---&quot; ; cat installation/resources/installer-config-cluster.yaml.tpl ; echo &quot;\n---&quot; ; cat installation/resources/installer-cr-cluster-xip-io.yaml.tpl) | sed -e &quot;s/__EXTERNAL_PUBLIC_IP__/$EXTERNAL_PUBLIC_IP/g&quot; | sed -e &quot;s/__REMOTE_ENV_IP__/$CONNECTOR_IP/g&quot; | sed -e &quot;s/__APPLICATION_CONNECTOR_DOMAIN__/$CONNECTOR_IP.xip.io/g&quot; | sed -e &quot;s/__SKIP_SSL_VERIFY__/true/g&quot; | sed -e &quot;s/__.*__//g&quot; &gt; my-kyma.yaml\n</code></pre></li>\n</ol>\n<h2 id=\"prepare-kyma-installer-image\">Prepare Kyma Installer image</h2>\n<p>Install Kyma using a pre-built Installer image, or an Installer image built from sources.  </p>\n<h3 id=\"pre-built-image\">Pre-built image</h3>\n<ol>\n<li>Go to <a href=\"https://github.com/kyma-project/kyma/releases/\" target=\"_blank\">this</a> page and choose a release from which you want to use the Installer image. </li>\n</ol>\n<blockquote>\n<p><strong>NOTE:</strong> You can use Kyma version 0.6 or higher.</p>\n</blockquote>\n<ol start=\"2\">\n<li>Create the Installer image URL following this format: <pre><code>eu.gcr.io/kyma-project/kyma-installer:{RELEASE_VERSION}\n</code></pre></li>\n<li><p>Set the Installer image URL as the value of the <strong>image</strong> field in the <code>my-kyma.yaml</code> you created.</p>\n</li>\n<li><p>Install Kyma following <a href=\"#installation-install-kyma-on-a-gke-cluster-deploy-kyma\">these</a> instructions.    </p>\n</li>\n</ol>\n<h3 id=\"image-built-from-sources\">Image built from sources</h3>\n<ol>\n<li>Build your image. Run:<pre><code>docker build -t kyma-installer:latest -f tools/kyma-installer/kyma.Dockerfile .\n</code></pre></li>\n<li>Create a new <code>kyma-installer</code> public repository on <a href=\"https://hub.docker.com/\" target=\"_blank\">Docker Hub</a> and push your image:<pre><code>docker tag kyma-installer:latest {YOUR_DOCKER_LOGIN}/kyma-installer:latest\ndocker push {YOUR_DOCKER_LOGIN}/kyma-installer:latest\n</code></pre></li>\n<li><p>Set the Installer image URL as the value of the <strong>image</strong> field in the <code>my-kyma.yaml</code> you created.</p>\n</li>\n<li><p>Install Kyma following <a href=\"#installation-install-kyma-on-a-gke-cluster-deploy-kyma\">these</a> instructions.    </p>\n</li>\n</ol>\n<h2 id=\"add-the-xip-io-self-signed-certificate-to-your-os-trusted-certificates\">Add the xip.io self-signed certificate to your OS trusted certificates</h2>\n<p>After the installation, add the custom Kyma <a href=\"http://xip.io/\" target=\"_blank\"><code>xip.io</code></a> self-signed certificate to the trusted certificates of your OS. For MacOS run:</p>\n<pre><code>tmpfile=$(mktemp /tmp/temp-cert.XXXXXX) &amp;&amp; kubectl get configmap cluster-certificate-overrides -n kyma-installer -o jsonpath=&#39;{.data.global.tlsCrt}&#39; | base64 --decode &gt; $tmpfile &amp;&amp; sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain $tmpfile &amp;&amp; rm $tmpfile\n</code></pre><h2 id=\"access-the-cluster\">Access the cluster</h2>\n<p>To access your cluster, use the wildcard DNS provided by <a href=\"http://xip.io/\" target=\"_blank\"><code>xip.io</code></a> as the domain of the cluster. To get this information, run:</p>\n<pre><code>kubectl get cm installation-config-overrides -n kyma-installer -o jsonpath=&#39;{.data.global.domainName}&#39;\n</code></pre><p>A successful response returns the cluster domain following this format:</p>\n<pre><code>{WILDCARD_DNS}.xip.io\n</code></pre><p>Access your cluster under this address:</p>\n<pre><code>https://console.{WILDCARD_DNS}.xip.io\n</code></pre><blockquote>\n<p><strong>NOTE:</strong> To log in to your cluster, use the default <code>admin</code> static user. To learn how to get the login details for this user, see <a href=\"#installation-install-kyma-locally-from-the-release-access-the-kyma-console\">this</a> document. </p>\n</blockquote>\n"
    },
    {
      "order": "04-07-aks-xip.io-domain",
      "title": "Install Kyma on an AKS cluster with wildcard DNS",
      "type": "Installation",
      "source": "<p>If you want to try Kyma in a cluster environment without assigning the cluster to a domain you own, you can use <a href=\"http://xip.io/\" target=\"_blank\"><code>xip.io</code></a> which provides a wildcard DNS for any IP address. Such\na scenario requires using a self-signed TLS certificate.</p>\n<p>This solution is not suitable for a production environment but makes for a great playground which allows you to get to know the product better.</p>\n<blockquote>\n<p><strong>NOTE:</strong> This feature requires Kyma version 0.6 or higher.</p>\n</blockquote>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>The prerequisites match these listed in <a href=\"#installation-install-kyma-on-an-aks-cluster\">this</a> document. However, you don&#39;t need to prepare a domain for your cluster as it is replaced by a wildcard DNS provided by <a href=\"http://xip.io/\" target=\"_blank\"><code>xip.io</code></a>.</p>\n<p>Follow <a href=\"#installation-install-kyma-on-an-aks-cluster-prepare-the-aks-cluster\">this</a> section to prepare your AKS cluster.</p>\n<h2 id=\"allocate-required-ip-addresses-for-your-cluster\">Allocate required IP addresses for your cluster</h2>\n<p>When you install Kyma with the wildcard DNS, you can use one of two approaches to allocating the required IP addresses for your cluster:</p>\n<ul>\n<li>Dynamic IP allocation - can be used with <a href=\"#installation-installation-with-knative\">Knative</a> eventing and serverless, but disables the Application Connector. </li>\n<li>Manual IP allocation - cannot be used with <a href=\"#installation-installation-with-knative\">Knative</a> eventing and serverless, but leaves the Application Connector functional. </li>\n</ul>\n<p>Follow the respective instructions to deploy a cluster Kyma cluster with wildcard DNS which uses the IP allocation approach of your choice.</p>\n<h3 id=\"dynamic-ip-allocation\">Dynamic IP allocation</h3>\n<p>Use this command to prepare a configuration file that deploys Kyma with <a href=\"http://xip.io/\" target=\"_blank\"><code>xip.io</code></a> providing a wildcard DNS:</p>\n<pre><code>(cat installation/resources/installer.yaml ; echo &quot;\n---&quot; ; cat installation/resources/installer-config-cluster.yaml.tpl ; echo &quot;\n---&quot; ; cat installation/resources/installer-cr-cluster-xip-io.yaml.tpl) | sed -e &quot;s/__PROXY_EXCLUDE_IP_RANGES__/10.0.0.1/g&quot; | sed -e &quot;s/__.*__//g&quot; &gt; my-kyma.yaml\n</code></pre><blockquote>\n<p><strong>NOTE:</strong> Using this approach disables the Application Connector. </p>\n</blockquote>\n<h3 id=\"manual-ip-allocation\">Manual IP allocation</h3>\n<ol>\n<li>Export your Kubernetes cluster resource group. This group is different from the one you provided during the cluster creation. It is automatically created by AKS. \nSet the same set of environment variables as during the <a href=\"#installation-install-kyma-on-an-aks-cluster-environment-variables\">cluster initialization</a>.\nRun:<pre><code>export CLUSTER_RS_GROUP=MC_&quot;$RS_GROUP&quot;_&quot;$CLUSTER_NAME&quot;_&quot;$REGION&quot;\n</code></pre></li>\n<li><p>Get public IP addresses for the load balancer of the AKS cluster to which you deploy Kyma and for the load balancer of the Application Connector.</p>\n<ul>\n<li><p>Export the <code>PUBLIC_IP_ADDRESS_NAME</code> and the <code>APP_CONNECTOR_IP_ADDRESS_NAME</code> environment variables. This defines the names of the reserved public IP addresses in your Azure subscription. Run:</p>\n<pre><code>export PUBLIC_IP_ADDRESS_NAME={AZURE_COMPLIANT_PUBLIC_IP_ADDRESS_NAME}\nexport APP_CONNECTOR_IP_ADDRESS_NAME={AZURE_COMPLIANT_APP_CONNECTOR_IP_ADDRESS_NAME}\n</code></pre><blockquote>\n<p><strong>NOTE:</strong> The name you set for the reserved public IP address must start with a lowercase letter followed by up to 62 lowercase letters, numbers, or hyphens, and cannot end with a hyphen.</p>\n</blockquote>\n</li>\n<li><p>Run these commands to reserve public IP addresses for the load balancer of your cluster and the load balancer of the Application Connector.</p>\n<pre><code>az network public-ip create --name $PUBLIC_IP_ADDRESS_NAME --resource-group $CLUSTER_RS_GROUP --allocation-method Static\naz network public-ip create --name $APP_CONNECTOR_IP_ADDRESS_NAME --resource-group $CLUSTER_RS_GROUP --allocation-method Static\n</code></pre><blockquote>\n<p><strong>NOTE:</strong> The resource group in which you reserve IP addresses must match the resource group of your AKS cluster.</p>\n</blockquote>\n</li>\n<li><p>Set the reserved IP addresses as <code>EXTERNAL_PUBLIC_IP</code> and <code>CONNCETOR_IP</code> environment variables. Run:</p>\n<pre><code>export EXTERNAL_PUBLIC_IP=$(az network public-ip list -g $CLUSTER_RS_GROUP --query &quot;[?name==&#39;$PUBLIC_IP_ADDRESS_NAME&#39;].ipAddress&quot; -otsv)\nexport CONNECTOR_IP=$(az network public-ip list -g $CLUSTER_RS_GROUP --query &quot;[?name==&#39;$APP_CONNECTOR_IP_ADDRESS_NAME&#39;].ipAddress&quot; -otsv)\n</code></pre></li>\n</ul>\n</li>\n<li>Use this command to prepare a configuration file that deploys Kyma with <a href=\"http://xip.io/\" target=\"_blank\"><code>xip.io</code></a> providing a wildcard DNS:<pre><code>(cat installation/resources/installer.yaml ; echo &quot;\n---&quot; ; cat installation/resources/installer-config-cluster.yaml.tpl ; echo &quot;\n---&quot; ; cat installation/resources/installer-cr-cluster-xip-io.yaml.tpl) | sed -e &quot;s/__EXTERNAL_PUBLIC_IP__/$EXTERNAL_PUBLIC_IP/g&quot; | sed -e &quot;s/__REMOTE_ENV_IP__/$CONNECTOR_IP/g&quot; | sed -e &quot;s/__APPLICATION_CONNECTOR_DOMAIN__/$CONNECTOR_IP.xip.io/g&quot; | sed -e &quot;s/__SKIP_SSL_VERIFY__/true/g&quot; | sed -e &quot;s/__PROXY_EXCLUDE_IP_RANGES__/10.0.0.1/g&quot; |  sed -e &quot;s/__.*__//g&quot; &gt; my-kyma.yaml\n</code></pre></li>\n</ol>\n<h2 id=\"prepare-kyma-installer-image\">Prepare Kyma Installer image</h2>\n<p>Install Kyma using a pre-built Installer image, or an Installer image built from sources.</p>\n<h3 id=\"pre-built-image\">Pre-built image</h3>\n<ol>\n<li>Go to <a href=\"https://github.com/kyma-project/kyma/releases/\" target=\"_blank\">this</a> page and choose a release from which you want to use the Installer image. </li>\n</ol>\n<blockquote>\n<p><strong>NOTE:</strong> You can use Kyma version 0.6 or higher.</p>\n</blockquote>\n<ol start=\"2\">\n<li>Create the Installer image URL following this format: <pre><code>eu.gcr.io/kyma-project/kyma-installer:{RELEASE_VERSION}\n</code></pre></li>\n<li><p>Set the Installer image URL as the value of the <strong>image</strong> field in the <code>my-kyma.yaml</code> you created.</p>\n</li>\n<li><p>Install Kyma following <a href=\"#installation-install-kyma-on-an-aks-cluster-deploy-kyma\">these</a> instructions.    </p>\n</li>\n</ol>\n<h3 id=\"image-built-from-sources\">Image built from sources</h3>\n<ol>\n<li>Build your image. Run:<pre><code>docker build -t kyma-installer:latest -f tools/kyma-installer/kyma.Dockerfile .\n</code></pre></li>\n<li>Create a new <code>kyma-installer</code> public repository on <a href=\"https://hub.docker.com/\" target=\"_blank\">Docker Hub</a> and push your image:<pre><code>docker tag kyma-installer:latest {YOUR_DOCKER_LOGIN}/kyma-installer:latest\ndocker push {YOUR_DOCKER_LOGIN}/kyma-installer:latest\n</code></pre></li>\n<li><p>Set the Installer image URL as the value of the <strong>image</strong> field in the <code>my-kyma.yaml</code> you created.</p>\n</li>\n<li><p>Install Kyma following <a href=\"#installation-install-kyma-on-an-aks-cluster-deploy-kyma\">these</a> instructions.</p>\n</li>\n</ol>\n<h2 id=\"add-the-xip-io-self-signed-certificate-to-your-os-trusted-certificates\">Add the xip.io self-signed certificate to your OS trusted certificates</h2>\n<p>After the installation, add the custom Kyma <a href=\"http://xip.io/\" target=\"_blank\"><code>xip.io</code></a> self-signed certificate to the trusted certificates of your OS. For MacOS, run:</p>\n<pre><code>tmpfile=$(mktemp /tmp/temp-cert.XXXXXX) &amp;&amp; kubectl get configmap cluster-certificate-overrides -n kyma-installer -o jsonpath=&#39;{.data.global.tlsCrt}&#39; | base64 --decode &gt; $tmpfile &amp;&amp; sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain $tmpfile &amp;&amp; rm $tmpfile\n</code></pre><h2 id=\"access-the-cluster\">Access the cluster</h2>\n<p>To access your cluster, use the wildcard DNS provided by <a href=\"http://xip.io/\" target=\"_blank\"><code>xip.io</code></a> as the domain of the cluster. To get this information, run:</p>\n<pre><code>kubectl get cm installation-config-overrides -n kyma-installer -o jsonpath=&#39;{.data.global.domainName}&#39;\n</code></pre><p>A successful response returns the cluster domain following this format:</p>\n<pre><code>{WILDCARD_DNS}.xip.io\n</code></pre><p>Access your cluster under this address:</p>\n<pre><code>https://console.{WILDCARD_DNS}.xip.io\n</code></pre><blockquote>\n<p><strong>NOTE:</strong> To log in to your cluster, use the default <code>admin</code> static user. To learn how to get the login details for this user, see <a href=\"#installation-install-kyma-locally-from-the-release-access-the-kyma-console\">this</a> document. </p>\n</blockquote>\n"
    },
    {
      "order": "04-08-custom-component-installation",
      "title": "Custom component installation",
      "type": "Installation",
      "source": "<p>Since Kyma is modular, you can remove some components so that they are not installed together with Kyma. You can also add some of them after the installation process. Read this document to learn how to do that.</p>\n<h2 id=\"remove-a-component\">Remove a component</h2>\n<blockquote>\n<p><strong>NOTE:</strong> Not all components can be simply removed from the Kyma installation. In case of Istio and the Service Catalog, you must provide your own deployment of these components in the Kyma-supported version before you remove them from the installation process. See <a href=\"https://github.com/kyma-project/kyma/blob/master/resources/istio-kyma-patch/templates/job.yaml#L25\" target=\"_blank\">this</a> and <a href=\"https://github.com/kyma-project/kyma/blob/master/resources/service-catalog/charts/catalog/values.yaml#L3\" target=\"_blank\">this</a> files accordingly to check the currently supported versions of Istio and the Service Catalog.</p>\n</blockquote>\n<p>To disable a component from the list of components that you install with Kyma, remove this component&#39;s entries from the appropriate file. The file differs depending on whether you install Kyma from the release or from sources, and if you install Kyma locally or on a cluster. The version of your component&#39;s deployment must match the version that Kyma currently supports.</p>\n<h3 id=\"installation-from-the-release\">Installation from the release</h3>\n<ol>\n<li>Download the <a href=\"https://github.com/kyma-project/kyma/releases\" target=\"_blank\">newest version</a> of Kyma.</li>\n<li>Customize installation by removing a component from the list of components in the Installation resource. For example, to disable the Application Connector installation, remove this entry:<pre><code> name: &quot;application-connector&quot;\n namespace: &quot;kyma-system&quot;\n</code></pre><ul>\n<li>from the <code>kyma-config-local.yaml</code> file for the <strong>local</strong> installation</li>\n<li>from the <code>kyma-config-cluster.yaml</code> file for the <strong>cluster</strong> installation</li>\n</ul>\n</li>\n</ol>\n<ol start=\"3\">\n<li>Follow the installation steps described in the <a href=\"#installation-install-kyma-locally-from-the-release\">Install Kyma locally from the release</a> document, or <a href=\"#installation-install-kyma-on-a-gke-cluster\">Install Kyma on a GKE cluster</a> accordingly.</li>\n</ol>\n<h3 id=\"installation-from-sources\">Installation from sources</h3>\n<ol>\n<li><p>Customize installation by removing a component from the list of components in the following Installation resource:</p>\n<ul>\n<li><a href=\"https://github.com/kyma-project/kyma/blob/master/installation/resources/installer-cr.yaml.tpl\" target=\"_blank\">installer-cr.yaml.tpl</a> for the <strong>local</strong> installation</li>\n<li><a href=\"https://github.com/kyma-project/kyma/blob/master/installation/resources/installer-cr-cluster.yaml.tpl\" target=\"_blank\">installer-cr-cluster.yaml.tpl</a> for the <strong>cluster</strong> installation</li>\n</ul>\n</li>\n<li><p>Follow the installation steps described in the <a href=\"#installation-install-kyma-locally-from-sources\">Install Kyma locally from sources</a> document, or <a href=\"#installation-install-kyma-on-a-gke-cluster\">Install Kyma on a GKE cluster</a> accordingly.</p>\n</li>\n</ol>\n<h3 id=\"verify-the-installation\">Verify the installation</h3>\n<ol>\n<li>Check if all Pods are running in the <code>kyma-system</code> Namespace:<pre><code>kubectl get pods -n kyma-system\n</code></pre></li>\n<li>Sign in to the Kyma Console using the <a href=\"mailto:`admin@kyma.cx\">`admin@kyma.cx</a>` email address as described in the <a href=\"#installation-install-kyma-locally-from-the-release\">Install Kyma locally from the release</a> document.</li>\n</ol>\n<h2 id=\"add-a-component\">Add a component</h2>\n<blockquote>\n<p><strong>NOTE:</strong> This section assumes that you already have your Kyma Lite local version installed successfully.</p>\n</blockquote>\n<p>To install a component that is not installed with Kyma by default, modify the <a href=\"#custom-resource-installation\">Installation</a> custom resource and add the component that you want to install to the list of components :</p>\n<ol>\n<li>Edit the resource:<pre><code> kubectl edit installation kyma-installation\n</code></pre></li>\n<li>Add the new component to the list of components, for example:<pre><code> - name: &quot;jaeger&quot;\n   namespace: &quot;kyma-system&quot;\n</code></pre></li>\n<li>Trigger the installation:<pre><code>kubectl label installation/kyma-installation action=install\n</code></pre></li>\n</ol>\n<p>You can verify the installation status by calling <code>./installation/scripts/is-installed.sh</code> in the terminal.</p>\n"
    },
    {
      "order": "04-09-knative",
      "title": "Installation with Knative",
      "type": "Installation",
      "source": "<p>You can install Kyma with <a href=\"https://cloud.google.com/knative/\" target=\"_blank\">Knative</a> and use its solutions for handling events and serverless functions.</p>\n<blockquote>\n<p><strong>NOTE:</strong> You can’t install Kyma with Knative on clusters with a pre-allocated ingress gateway IP address.</p>\n</blockquote>\n<blockquote>\n<p><strong>NOTE:</strong> Knative intagration requires Kyma 0.6 or higher.</p>\n</blockquote>\n<h2 id=\"knative-with-local-deployment-from-release\">Knative with local deployment from release</h2>\n<p>When you install Kyma locally from a release, follow <a href=\"#installation-install-kyma-locally-from-the-release-install-kyma-on-minikube\">this</a> guide. \nEnsure that you created the local Kubernetes cluster with <code>10240Mb</code> memory and <code>30Gb</code> disk size.</p>\n<pre><code>./scripts/minikube.sh --domain &quot;kyma.local&quot; --vm-driver &quot;hyperkit&quot; --memory 10240Mb --disk-size 30g\n</code></pre><p>Run the following command before triggering the Kyma installation process:</p>\n<pre><code>kubectl -n kyma-installer patch configmap installation-config-overrides -p &#39;{&quot;data&quot;: {&quot;global.knative&quot;: &quot;true&quot;, &quot;global.kymaEventBus&quot;: &quot;false&quot;, &quot;global.natsStreaming.clusterID&quot;: &quot;knative-nats-streaming&quot;}}&#39;\n</code></pre><h2 id=\"knative-with-local-deployment-from-sources\">Knative with local deployment from sources</h2>\n<p>When you install Kyma locally from sources, add the <code>--knative</code> argument to the <code>run.sh</code> script. Run this command:</p>\n<pre><code>./run.sh --knative\n</code></pre><h2 id=\"knative-with-a-cluster-deployment\">Knative with a cluster deployment</h2>\n<p>Run the following command before triggering the Kyma installation process:</p>\n<pre><code>kubectl -n kyma-installer patch configmap installation-config-overrides -p &#39;{&quot;data&quot;: {&quot;global.knative&quot;: &quot;true&quot;, &quot;global.kymaEventBus&quot;: &quot;false&quot;, &quot;global.natsStreaming.clusterID&quot;: &quot;knative-nats-streaming&quot;}}&#39;\n</code></pre>"
    },
    {
      "order": "04-10-update",
      "title": "Update Kyma",
      "type": "Installation",
      "source": "<p>This guide describes how to update Kyma deployed locally or on a cluster.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<ul>\n<li><a href=\"https://www.docker.com/\" target=\"_blank\">Docker</a></li>\n<li>Access to a Docker Registry - only for cluster installation</li>\n</ul>\n<h2 id=\"overview\">Overview</h2>\n<p>Kyma consists of multiple components, installed as <a href=\"https://github.com/helm/helm/tree/master/docs\" target=\"_blank\">Helm</a> releases.</p>\n<p>Update of an existing deployment can include:</p>\n<ul>\n<li>changes in charts</li>\n<li>changes in overrides</li>\n<li>adding new releases</li>\n</ul>\n<p>The update procedure consists of three main steps:</p>\n<ul>\n<li>Prepare the update</li>\n<li>Update the Kyma Installer</li>\n<li>Trigger the update process</li>\n</ul>\n<blockquote>\n<p><strong>NOTE:</strong> In case of dependency conflicts or major changes between components versions, some updates may not be possible.</p>\n</blockquote>\n<blockquote>\n<p><strong>NOTE:</strong> Currently Kyma doesn&#39;t support removing components as a part of the update process.</p>\n</blockquote>\n<h2 id=\"prepare-the-update\">Prepare the update</h2>\n<ul>\n<li><p>If you update an existing component, make all required changes to the Helm charts of the component located in the <a href=\"https://github.com/kyma-project/kyma/tree/master/resources\" target=\"_blank\"><code>resource</code></a> directory.</p>\n</li>\n<li><p>If you add a new component to your Kyma deployment, add a top-level Helm chart for that component. Additionally, run this command to edit the Installation custom resource and add the new component to the installed components list:</p>\n<pre><code>kubectl edit installation kyma-installation\n</code></pre><blockquote>\n<p><strong>NOTE:</strong> Read <a href=\"#custom-resource-installation\">this</a> document to learn more about the Installation custom resource.</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>If you introduced changes in overrides, update the existing ConfigMaps and Secrets. Add new ConfigMaps and Secrets if required. See <a href=\"#getting-started-helm-overrides-for-kyma-installation\">this</a> document for more information on overrides.</li>\n</ul>\n<h2 id=\"update-the-kyma-installer-on-a-local-deployment\">Update the Kyma Installer on a local deployment</h2>\n<ul>\n<li><p>Build a new image for the Kyma Installer:  </p>\n<pre><code>./installation/scripts/build-kyma-installer.sh\n</code></pre><blockquote>\n<p><strong>NOTE:</strong> If you started Kyma with the <code>run.sh</code> script with a <code>--vm-driver {value}</code> parameter, provide the same parameter to the <code>build-kyma-installer.sh</code> script.</p>\n</blockquote>\n</li>\n<li><p>Restart the Kyma Installer Pod:  </p>\n<pre><code>kubectl delete pod -n kyma-installer {INSTALLER_POD_NAME}\n</code></pre></li>\n</ul>\n<h2 id=\"update-the-kyma-installer-on-a-cluster-deployment\">Update the Kyma Installer on a cluster deployment</h2>\n<ul>\n<li><p>Build a new image for the Kyma Installer:</p>\n<pre><code>docker build -t {IMAGE_NAME}:{IMAGE_TAG} -f tools/kyma-installer/kyma.Dockerfile .\n</code></pre></li>\n<li><p>Push the image to your Docker registry.</p>\n</li>\n<li><p>Redeploy the Kyma Installer Pod using the new image. Run this command to edit the Deployment configuration:</p>\n<pre><code>kubectl edit deployment kyma-installer -n kyma-installer\n</code></pre><p>Change the <code>image</code> and <code>imagePullPolicy</code> attributes in this section:  </p>\n<pre><code>       spec:\n         containers:\n         - image: &lt;your_image_name&gt;:&lt;your_tag&gt;\n           imagePullPolicy: Always\n</code></pre><blockquote>\n<p><strong>NOTE:</strong> If the desired image name and <code>imagePullPolicy</code> is already set in the deployment configuration, restart  the Pod by running <code>kubectl delete pod -n kyma-installer {INSTALLER_POD_NAME}</code></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"trigger-the-update-process\">Trigger the update process</h2>\n<p>Execute the following command to trigger the update process:</p>\n<pre><code>kubectl label installation/kyma-installation action=install\n</code></pre>"
    },
    {
      "order": "04-11-local-reinstallation",
      "title": "Reinstall Kyma",
      "type": "Installation",
      "source": "<p>The custom scripts allow you to remove Kyma from a Minikube cluster and reinstall Kyma without removing the cluster.</p>\n<blockquote>\n<p><strong>NOTE:</strong> These scripts do not delete the cluster from your Minikube. This allows you to quickly reinstall Kyma.</p>\n</blockquote>\n<ol>\n<li><p>Use the <code>clean-up.sh</code> script to uninstall Kyma from the cluster. Run:</p>\n<pre><code>scripts/clean-up.sh\n</code></pre></li>\n<li><p>Run this script to reinstall Kyma on an existing cluster:</p>\n<pre><code>cmd/run.sh --skip-minikube-start\n</code></pre></li>\n</ol>\n"
    },
    {
      "order": "04-12-local-installation-scripts",
      "title": "Local installation scripts deep-dive",
      "type": "Installation",
      "source": "<p>This document extends the <a href=\"#installation-install-kyma-locally-from-sources\">Install Kyma locally from sources</a> guide with a detailed breakdown of the alternative local installation method which is the <code>run.sh</code> script.</p>\n<p>The following snippet is the main element of the <code>run.sh</code> script:</p>\n<pre><code>if [[ ! $SKIP_MINIKUBE_START ]]; then\n    bash $SCRIPTS_DIR/minikube.sh --domain &quot;$DOMAIN&quot; --vm-driver &quot;$VM_DRIVER&quot; $MINIKUBE_EXTRA_ARGS\nfi\n\nbash $SCRIPTS_DIR/build-kyma-installer.sh --vm-driver &quot;$VM_DRIVER&quot;\n\nif [ -z &quot;$CR_PATH&quot; ]; then\n\n    TMPDIR=`mktemp -d &quot;$CURRENT_DIR/../../temp-XXXXXXXXXX&quot;`\n    CR_PATH=&quot;$TMPDIR/installer-cr-local.yaml&quot;\n    bash $SCRIPTS_DIR/create-cr.sh --output &quot;$CR_PATH&quot; --domain &quot;$DOMAIN&quot;\n\nfi\n\nbash $SCRIPTS_DIR/installer.sh --local --cr &quot;$CR_PATH&quot; &quot;$KNATIVE&quot; --password &quot;$ADMIN_PASSWORD&quot;\nrm -rf $TMPDIR\n</code></pre><p>Subsequent sections provide details of all involved subscripts, in the order in which the <code>run.sh</code> script triggers them.</p>\n<h2 id=\"the-minikube-sh-script\">The minikube.sh script</h2>\n<blockquote>\n<p><strong>NOTE:</strong> To work with Kyma, use only the provided scripts and commands. Kyma does not work on a basic Minikube cluster that you can start using the <code>minikube start</code> command.</p>\n</blockquote>\n<p>The purpose of the <code>installation/scripts/minikube.sh</code> script is to configure and start Minikube. The script also checks if your development environment is configured to handle the Kyma installation. This includes checking Minikube and kubectl versions.</p>\n<p>If Minikube is already initialized, the system prompts you to agree to remove the previous Minikube cluster.</p>\n<ul>\n<li>If you plan to perform a clean installation, answer <code>yes</code>.</li>\n<li>If you installed Kyma to your Minikube cluster and then stopped the cluster using the <code>minikube stop</code> command, answer <code>no</code>.  This allows you to start the cluster again without reinstalling Kyma.</li>\n</ul>\n<p>Minikube is configured to disable the default Nginx Ingress Controller.</p>\n<blockquote>\n<p><strong>NOTE:</strong> For the complete list of parameters passed to the <code>minikube start</code> command, refer to the <code>installation/scripts/minikube.sh</code> script.</p>\n</blockquote>\n<p>Once Minikube is up and running, the script adds local installation entries to <code>/etc/hosts</code>.</p>\n<h2 id=\"the-build-kyma-installer-sh-script\">The build-kyma-installer.sh script</h2>\n<p>The Kyma Installer is an application based on the <a href=\"https://coreos.com/operators/\" target=\"_blank\">Kubernetes operator</a>. Its purpose is to install Helm charts defined in the Installation custom resource. The Kyma Installer is a Docker image that bundles the Installer binary with Kyma charts.</p>\n<p>The <code>installation/scripts/build-kyma-installer.sh</code> script extracts the Kyma-Installer image name from the <code>installer.yaml</code> deployment file and uses it to build a Docker image inside Minikube. This image contains local Kyma sources from the <code>resources</code> folder.</p>\n<blockquote>\n<p><strong>NOTE:</strong> For the Kyma Installer Docker image details, refer to the <code>tools/kyma-installer/kyma.Dockerfile</code> file.</p>\n</blockquote>\n<h2 id=\"the-create-cr-sh-script\">The create-cr.sh script</h2>\n<p>The <code>installation/scripts/create-cr.sh</code> script prepares the Installation custom resource from the <code>installation/resources/installer-cr.yaml.tpl</code> template. The local installation scenario uses the default Installation custom resource. The Kyma Installer already contains local Kyma resources bundled, thus <code>url</code> is ignored by the Installer component.</p>\n<blockquote>\n<p><strong>NOTE:</strong> Read <a href=\"#custom-resource-installation\">this</a> document to learn more about the Installation custom resource.</p>\n</blockquote>\n<h2 id=\"the-installer-sh-script\">The installer.sh script</h2>\n<p>The <code>installation/scripts/installer.sh</code> script creates the default RBAC role, installs <a href=\"https://docs.helm.sh/\" target=\"_blank\">Tiller</a>, and deploys the Kyma Installer component.</p>\n<blockquote>\n<p><strong>NOTE:</strong> For the Kyma Installer deployment details, refer to the <code>installation/resources/installer.yaml</code> file.</p>\n</blockquote>\n<p>The script applies the Installation custom resource and marks it with the <code>action=install</code> label, which triggers the Kyma installation.</p>\n<blockquote>\n<p><strong>NOTE:</strong> The Kyma installation runs in the background. Execute the <code>./installation/scripts/is-installed.sh</code> script to follow the installation process.</p>\n</blockquote>\n<h2 id=\"the-is-installed-sh-script\">The is-installed.sh script</h2>\n<p>The <code>installation/scripts/is-installed.sh</code> script shows the status of Kyma installation in real time. The script checks the status of the Installation custom resource. When it detects that the status changed to <code>Installed</code>, the script exits. If you define a timeout period and the status doesn&#39;t change to <code>Installed</code> within that period, the script fetches the Installer logs. If you don&#39;t set a timeout period, the script waits for the change of the status until you terminate it.</p>\n"
    },
    {
      "order": "06-01-installation",
      "title": "Installation",
      "type": "Custom Resource",
      "source": "<p>The <code>installations.installer.kyma-project.io</code> CustomResourceDefinition (CRD) is a detailed description of the kind of data and the format used to control the Kyma Installer, a proprietary solution based on the\n<a href=\"https://coreos.com/operators/\" target=\"_blank\">Kubernetes operator</a> principles. To get the up-to-date CRD and show the output in the <code>yaml</code> format, run this command:  </p>\n<pre><code>kubectl get crd installations.installer.kyma-project.io -o yaml\n</code></pre><h2 id=\"sample-custom-resource\">Sample custom resource</h2>\n<p>This is a sample CR that controls the Kyma Installer. This example has the <strong>action</strong> label set to <code>install</code>, which means that it triggers the installation of Kyma. The  <strong>name</strong> and <strong>namespace</strong>  fields in the <code>components</code> array define which components you install and Namespaces in which you install them.</p>\n<blockquote>\n<p><strong>NOTE:</strong> See the <code>installer-cr.yaml.tpl</code> file in the <code>/installation/resources</code> directory for the complete list of Kyma components.</p>\n</blockquote>\n<pre><code>apiVersion: &quot;installer.kyma-project.io/v1alpha1&quot;\nkind: Installation\nmetadata:\n  name: kyma-installation\n  labels:\n    action: install\n  finalizers:\n    - finalizer.installer.kyma-project.io\nspec:\n  version: &quot;1.0.0&quot;\n  url: &quot;https://sample.url.com/kyma_release.tar.gz&quot;\n  components:\n    - name: &quot;cluster-essentials&quot;\n      namespace: &quot;kyma-system&quot;\n    - name: &quot;istio&quot;\n      namespace: &quot;istio-system&quot;\n    - name: &quot;prometheus-operator&quot;\n      namespace: &quot;kyma-system&quot;\n    - name: &quot;provision-bundles&quot;\n    - name: &quot;dex&quot;\n      namespace: &quot;kyma-system&quot;\n    - name: &quot;core&quot;\n      namespace: &quot;kyma-system&quot;\n</code></pre><h2 id=\"custom-resource-parameters\">Custom resource parameters</h2>\n<p>This table lists all the possible parameters of a given resource together with their descriptions:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Field</th>\n<th style=\"text-align:center\">Mandatory</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>metadata.name</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specifies the name of the CR.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>metadata.labels.action</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Defines the behavior of the Kyma Installer. Available options are <code>install</code> and <code>uninstall</code>.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>metadata.finalizers</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Protects the CR from deletion. Read <a href=\"https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#finalizers\" target=\"_blank\">this</a> Kubernetes document to learn more about finalizers.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.version</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">When manually installing Kyma on a cluster, specify any valid <a href=\"https://semver.org/\" target=\"_blank\">SemVer</a> notation string.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.url</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specifies the location of the Kyma sources <code>tar.gz</code> package. For example, for the <code>master</code> branch of Kyma, the address is <code>https://github.com/kyma-project/kyma/archive/master.tar.gz</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.components</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Lists which components of Helm chart components to install or update.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.components.name</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specifies the name of the component which is the same as the name of the component subdirectory in the <code>resources</code> directory.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.components.namespace</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Defines the Namespace in which you want the Installer to install, or update the component.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.components.release</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Provides the name of the Helm release. The default parameter is the component name.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"related-resources-and-components\">Related resources and components</h2>\n<p>These components use this CR:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Component</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Installer</td>\n<td style=\"text-align:left\">The CR triggers the Installer to install, update or delete of the specified components.</td>\n</tr>\n</tbody>\n</table>\n"
    },
    {
      "order": "08-01-sample-service-deployment-to-local",
      "title": "Sample service deployment on local",
      "type": "Tutorials",
      "source": "<p>This tutorial is intended for the developers who want to quickly learn how to deploy a sample service and test it with Kyma installed locally on Mac.</p>\n<p>This tutorial uses a standalone sample service written in the <a href=\"http://golang.org\" target=\"_blank\">Go</a> language .</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>To use the Kyma cluster and install the example, download these tools:</p>\n<ul>\n<li><a href=\"https://kubernetes.io/docs/tasks/tools/install-kubectl/\" target=\"_blank\">kubectl</a> 1.10.0</li>\n<li><a href=\"https://github.com/curl/curl\" target=\"_blank\">curl</a></li>\n</ul>\n<h2 id=\"steps\">Steps</h2>\n<h3 id=\"deploy-and-expose-a-sample-standalone-service\">Deploy and expose a sample standalone service</h3>\n<p>Follow these steps:</p>\n<ol>\n<li><p>Deploy the sample service to any of your Namespaces. Use the <code>stage</code> Namespace for this guide:</p>\n<pre><code class=\"lang-bash\">kubectl create -n stage -f https://raw.githubusercontent.com/kyma-project/examples/master/http-db-service/deployment/deployment.yaml\n</code></pre>\n</li>\n<li><p>Create an unsecured API for your example service:</p>\n<pre><code class=\"lang-bash\">kubectl apply -n stage -f https://raw.githubusercontent.com/kyma-project/examples/master/gateway/service/api-without-auth.yaml\n</code></pre>\n</li>\n<li><p>Add the IP address of Minikube to the <code>hosts</code> file on your local machine for your APIs:</p>\n<pre><code class=\"lang-bash\">$ echo &quot;$(minikube ip) http-db-service.kyma.local&quot; | sudo tee -a /etc/hosts\n</code></pre>\n</li>\n<li><p>Access the service using the following call:</p>\n<pre><code class=\"lang-bash\">curl -ik https://http-db-service.kyma.local/orders\n</code></pre>\n<p>The system returns a response similar to the following:</p>\n<pre><code>HTTP/2 200\ncontent-type: application/json;charset=UTF-8\nvary: Origin\ndate: Mon, 01 Jun 2018 00:00:00 GMT\ncontent-length: 2\nx-envoy-upstream-service-time: 131\nserver: envoy\n\n[]\n</code></pre></li>\n</ol>\n<h3 id=\"update-your-service-s-api-to-secure-it\">Update your service&#39;s API to secure it</h3>\n<p>Run the following command:</p>\n<pre><code class=\"lang-bash\">   kubectl apply -n stage -f https://raw.githubusercontent.com/kyma-project/examples/master/gateway/service/api-with-auth.yaml\n</code></pre>\n<p>After you apply this update, you must include a valid bearer ID token in the Authorization header to access the service.</p>\n<blockquote>\n<p><strong>NOTE:</strong> The update might take some time.</p>\n</blockquote>\n"
    },
    {
      "order": "08-02-sample-service-deployment-to-cluster",
      "title": "Sample service deployment on a cluster",
      "type": "Tutorials",
      "source": "<p>This tutorial is intended for the developers who want to quickly learn how to deploy a sample service and test it with the Kyma cluster.</p>\n<p>This tutorial uses a standalone sample service written in the <a href=\"http://golang.org\" target=\"_blank\">Go</a> language.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>To use the Kyma cluster and install the example, download these tools:</p>\n<ul>\n<li><a href=\"https://kubernetes.io/docs/tasks/tools/install-kubectl/\" target=\"_blank\">kubectl</a> 1.10.0</li>\n<li><a href=\"https://github.com/curl/curl\" target=\"_blank\">curl</a></li>\n</ul>\n<h2 id=\"steps\">Steps</h2>\n<h3 id=\"download-configuration-for-kubectl\">Download configuration for kubectl</h3>\n<p>Follow these steps to download <strong>kubeconfig</strong> and configure kubectl to access the Kyma cluster:</p>\n<ol>\n<li>Access the Console UI and download the <strong>kubectl</strong> file from the settings page.</li>\n<li>Place downloaded file in the following location: <code>$HOME/.kube/kubeconfig</code>.</li>\n<li>Point <strong>kubectl</strong> to the configuration file using the terminal: <code>export KUBECONFIG=$HOME/.kube/kubeconfig</code>.</li>\n<li>Confirm <strong>kubectl</strong> is configured to use your cluster: <code>kubectl cluster-info</code>.</li>\n</ol>\n<h3 id=\"set-the-cluster-domain-variable\">Set the cluster domain variable</h3>\n<p>The commands throughout this guide use URLs that require you to provide the domain of the cluster which you are using. To complete this configuration, set the variable <code>yourClusterDomain</code> to the domain of your cluster.</p>\n<p>For example, if your cluster&#39;s domain is <code>demo.cluster.kyma.cx</code>, run the following command:</p>\n<pre><code class=\"lang-bash\">   export yourClusterDomain=&#39;demo.cluster.kyma.cx&#39;\n</code></pre>\n<h3 id=\"deploy-and-expose-a-sample-standalone-service\">Deploy and expose a sample standalone service</h3>\n<p>Follow these steps:</p>\n<ol>\n<li><p>Deploy the sample service to any of your Namespaces. Use the <code>stage</code> Namespace for this guide:</p>\n<pre><code class=\"lang-bash\">kubectl create -n stage -f https://raw.githubusercontent.com/kyma-project/examples/master/http-db-service/deployment/deployment.yaml\n</code></pre>\n</li>\n<li><p>Create an unsecured API for your service:</p>\n<pre><code class=\"lang-bash\">curl -k https://raw.githubusercontent.com/kyma-project/examples/master/gateway/service/api-without-auth.yaml |  sed &quot;s/.kyma.local/.$yourClusterDomain/&quot; | kubectl apply -n stage -f -\n</code></pre>\n</li>\n<li><p>Access the service using the following call:</p>\n<pre><code class=\"lang-bash\">curl -ik https://http-db-service.$yourClusterDomain/orders\n</code></pre>\n<p>The system returns a response similar to the following:</p>\n<pre><code>HTTP/2 200\ncontent-type: application/json;charset=UTF-8\nvary: Origin\ndate: Mon, 01 Jun 2018 00:00:00 GMT\ncontent-length: 2\nx-envoy-upstream-service-time: 131\nserver: envoy\n\n[]\n</code></pre></li>\n</ol>\n<h3 id=\"update-your-service-s-api-to-secure-it\">Update your service&#39;s API to secure it</h3>\n<p>Run the following command:</p>\n<pre><code class=\"lang-bash\">   curl -k https://raw.githubusercontent.com/kyma-project/examples/master/gateway/service/api-with-auth.yaml |  sed &quot;s/.kyma.local/.$yourClusterDomain/&quot; | kubectl apply -n stage -f -\n</code></pre>\n<p>After you apply this update, you must include a valid bearer ID token in the Authorization header to access the service.</p>\n<blockquote>\n<p><strong>NOTE:</strong> The update might take some time.</p>\n</blockquote>\n"
    },
    {
      "order": "08-03-local-develop-no-docker",
      "title": "Develop a service locally without using Docker",
      "type": "Tutorials",
      "source": "<p>You can develop services in the local Kyma installation without extensive Docker knowledge or a need to build and publish a Docker image. The <code>minikube mount</code> feature allows you to mount a directory from your local disk into the local Kubernetes cluster.</p>\n<p>This tutorial shows how to use this feature, using the service example implemented in Golang.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>Install <a href=\"https://golang.org/dl/\" target=\"_blank\">Golang</a>.</p>\n<h2 id=\"steps\">Steps</h2>\n<h3 id=\"install-the-example-on-your-local-machine\">Install the example on your local machine</h3>\n<ol>\n<li>Install the example:<pre><code class=\"lang-shell\">go get -insecure github.com/kyma-project/examples/http-db-service\n</code></pre>\n</li>\n<li>Navigate to installed example and the <code>http-db-service</code> folder inside it:<pre><code class=\"lang-shell\">cd ~/go/src/github.com/kyma-project/examples/http-db-service\n</code></pre>\n</li>\n<li>Build the executable to run the application:<pre><code class=\"lang-shell\">CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .\n</code></pre>\n</li>\n</ol>\n<h3 id=\"mount-the-example-directory-into-minikube\">Mount the example directory into Minikube</h3>\n<p>For this step, you need a running local Kyma instance. Read <a href=\"#installation-install-kyma-locally-from-the-release\">this</a> document to learn how to install Kyma locally.</p>\n<ol>\n<li>Open the terminal window. Do not close it until the development finishes.</li>\n<li>Mount your local drive into Minikube:<pre><code class=\"lang-shell\"># Use the following pattern:\nminikube mount {LOCAL_DIR_PATH}:{CLUSTER_DIR_PATH}`\n# To follow this guide, call:\nminikube mount ~/go/src/github.com/kyma-project/examples/http-db-service:/go/src/github.com/kyma-project/examples/http-db-service\n</code></pre>\n</li>\n</ol>\n<p>See the example and expected result:</p>\n<pre><code class=\"lang-shell\"># Terminal 1\n$ minikube mount ~/go/src/github.com/kyma-project/examples/http-db-service:/go/src/github.com/kyma-project/examples/http-db-service\n\nMounting /Users/{USERNAME}/go/src/github.com/kyma-project/examples/http-db-service into /go/src/github.com/kyma-project/examples/http-db-service on the minikube VM\nThis daemon process must stay alive for the mount to still be accessible...\nufs starting\n</code></pre>\n<h3 id=\"run-your-local-service-inside-minikube\">Run your local service inside Minikube</h3>\n<ol>\n<li>Create Pod that uses the base Golang image to run your executable located on your local machine:<pre><code class=\"lang-shell\"># Terminal 2\nkubectl run mydevpod --image=golang:1.9.2-alpine --restart=Never -n stage --overrides=&#39;\n{\n&quot;spec&quot;:{\n   &quot;containers&quot;:[\n      {\n         &quot;name&quot;:&quot;mydevpod&quot;,\n         &quot;image&quot;:&quot;golang:1.9.2-alpine&quot;,\n         &quot;command&quot;: [&quot;./main&quot;],\n         &quot;workingDir&quot;:&quot;/go/src/github.com/kyma-project/examples/http-db-service&quot;,\n         &quot;volumeMounts&quot;:[\n            {\n               &quot;mountPath&quot;:&quot;/go/src/github.com/kyma-project/examples/http-db-service&quot;,\n               &quot;name&quot;:&quot;local-disk-mount&quot;\n            }\n         ]\n      }\n   ],\n   &quot;volumes&quot;:[\n      {\n         &quot;name&quot;:&quot;local-disk-mount&quot;,\n         &quot;hostPath&quot;:{\n            &quot;path&quot;:&quot;/go/src/github.com/kyma-project/examples/http-db-service&quot;\n         }\n      }\n   ]\n}\n}\n&#39;\n</code></pre>\n</li>\n<li>Expose the Pod as a service from Minikube to verify it:<pre><code class=\"lang-shell\">kubectl expose pod mydevpod --name=mypodservice --port=8017 --type=NodePort -n stage\n</code></pre>\n</li>\n<li>Check the Minikube IP address and Port, and use them to access your service.<pre><code class=\"lang-shell\"># Get the IP address.\nminikube ip\n# See the example result: 192.168.64.44\n# Check the Port.\nkubectl get services -n stage\n# See the example result: mypodservice  NodePort 10.104.164.115  &lt;none&gt;  8017:32226/TCP  5m\n</code></pre>\n</li>\n<li>Call the service from your terminal.<pre><code class=\"lang-shell\">curl {minikube ip}:{port}/orders -v\n# See the example: curl http://192.168.64.44:32226/orders -v\n# The command returns an empty array.\n</code></pre>\n</li>\n</ol>\n<h3 id=\"modify-the-code-locally-and-see-the-results-immediately-in-minikube\">Modify the code locally and see the results immediately in Minikube</h3>\n<ol>\n<li>Edit the <code>main.go</code> file by adding a new <code>test</code> endpoint to the <code>startService</code> function<pre><code class=\"lang-go\">router.HandleFunc(&quot;/test&quot;, func (w http.ResponseWriter, r *http.Request) {\n w.Write([]byte(&quot;test&quot;))\n})\n</code></pre>\n</li>\n<li>Build a new executable to run the application inside Minikube:<pre><code class=\"lang-shell\">CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .\n</code></pre>\n</li>\n<li>Replace the existing Pod with the new version:<pre><code class=\"lang-shell\">kubectl get pod mydevpod -n stage -o yaml | kubectl replace --force -f -\n</code></pre>\n</li>\n<li>Call the new <code>test</code> endpoint of the service from your terminal. The command returns the <code>Test</code> string:<pre><code class=\"lang-shell\">curl http://192.168.64.44:32226/test -v\n</code></pre>\n</li>\n</ol>\n"
    },
    {
      "order": "08-04-publish-service-image-and-deploy",
      "title": "Publish a service Docker image and deploy it to Kyma",
      "type": "Tutorials",
      "source": "<p>In the tutorial for local development of a service, you can learn how to develop a service locally. You can immediately see all the changes made in the local Kyma installation based on Minikube, without building a Docker image and publishing it to a Docker registry, such as the Docker Hub.</p>\n<p>Using the same example service, this guide explains how to build a Docker image for your service, publish it to the Docker registry, and deploy it to the local Kyma installation. The instructions base on Minikube, but you can also use the image that you create, and the Kubernetes resource definitions that you use on the Kyma cluster.</p>\n<blockquote>\n<p><strong>NOTE:</strong> The deployment works both on local Kyma installation and on the Kyma cluster.</p>\n</blockquote>\n<h2 id=\"steps\">Steps</h2>\n<h3 id=\"build-a-docker-image\">Build a Docker image</h3>\n<p>The <code>http-db-service</code> example used in this guide provides you with the <code>Dockerfile</code> necessary for building Docker images. Examine the <code>Dockerfile</code> to learn how it looks and how it uses the Docker Multistaging feature, but do not use it one-to-one for production. There might be custom <code>LABEL</code> attributes with values to override.</p>\n<ol>\n<li>In your terminal, go to the <code>examples/http-db-service</code> directory. If you did not follow the <a href=\"#tutorials-sample-service-deployment-on-local\">Sample service deployment on local</a> guide and you do not have this directory locally, get the <code>http-db-service</code> example from the <a href=\"https://github.com/kyma-project/examples\" target=\"_blank\"><code>examples</code></a> repository.</li>\n<li>Run the build with <code>./build.sh</code>.</li>\n</ol>\n<blockquote>\n<p><strong>NOTE:</strong> Ensure that the new image builds and is available in your local Docker registry by calling <code>docker images</code>. Find an image called <code>example-http-db-service</code> and tagged as <code>latest</code>.</p>\n</blockquote>\n<h3 id=\"register-the-image-in-the-docker-hub\">Register the image in the Docker Hub</h3>\n<p>This guide bases on Docker Hub. However, there are many other Docker registries available. You can use a private Docker registry, but it must be available in the Internet. For more details about using a private Docker registry, see the <a href=\"#tutorials-publish-a-service-docker-image-and-deploy-it-to-kyma\">this</a> document.</p>\n<ol>\n<li>Open the <a href=\"https://hub.docker.com/\" target=\"_blank\">Docker Hub</a> webpage.</li>\n<li>Provide all of the required details and sign up.</li>\n</ol>\n<h3 id=\"sign-in-to-the-docker-hub-registry-in-the-terminal\">Sign in to the Docker Hub registry in the terminal</h3>\n<ol>\n<li>Call <code>docker login</code>.</li>\n<li>Provide the username and password, and select the <code>ENTER</code> key.</li>\n</ol>\n<h3 id=\"push-the-image-to-the-docker-hub\">Push the image to the Docker Hub</h3>\n<ol>\n<li>Tag the local image with a proper name required in the registry: <code>docker tag example-http-db-service {username}/example-http-db-service:0.0.1</code>.</li>\n<li>Push the image to the registry: <code>docker push {username}/example-http-db-service:0.0.1</code>.\n<code>`</code>shell\n#This is how it looks in the terminal</li>\n</ol>\n<p>The push refers to repository [docker.io/{username}/example-http-db-service]\n4302273b9e11: Pushed\n5835bd463c0e: Pushed\n0.0.1: digest: sha256:9ec28342806f50b92c9b42fa36d979c0454aafcdda6845b362e2efb9816d1439 size: 734\n<code>`</code></p>\n<blockquote>\n<p><strong>NOTE:</strong> To verify if the image is successfully published, check if it is available online at the following address: <code>https://hub.docker.com/r/{username}/example-http-db-service/</code></p>\n</blockquote>\n<h3 id=\"deploy-to-kyma\">Deploy to Kyma</h3>\n<p>The <code>http-db-service</code> example contains sample Kubernetes resource definitions needed for the basic Kyma deployment. Find them in the <code>deployment</code> folder. Perform the following modifications to use your newly-published image in the local Kyma installation:</p>\n<ol>\n<li>Go to the <code>deployment</code> directory.</li>\n<li>Edit the <code>deployment.yaml</code> file. Change the <strong>image</strong> attribute to <code>{username}/example-http-db-service:0.0.1</code>.</li>\n<li>Create the new resources in local Kyma using these commands: <code>kubectl create -f deployment.yaml -n stage &amp;&amp; kubectl create -f ingress.yaml -n stage</code>.</li>\n<li>Edit your <code>/etc/hosts</code> to add the new <code>http-db-service.kyma.local</code> host to the list of hosts associated with your <code>minikube ip</code>. Follow these steps:<ul>\n<li>Open a terminal window and run: <code>sudo vim /etc/hosts</code></li>\n<li>Select the <strong>i</strong> key to insert a new line at the top of the file.</li>\n<li>Add this line: <code>{YOUR.MINIKUBE.IP} http-db-service.kyma.local</code></li>\n<li>Type <code>:wq</code> and select the <strong>Enter</strong> key to save the changes.</li>\n</ul>\n</li>\n<li>Run this command to check if you can access the service: <code>curl https://http-db-service.kyma.local/orders</code>. The response should return an empty array.</li>\n</ol>\n"
    },
    {
      "order": "08-05-installation-overrides",
      "title": "Helm overrides for Kyma installation",
      "type": "Tutorials",
      "source": "<p>Kyma packages its components into <a href=\"https://github.com/helm/helm/tree/master/docs\" target=\"_blank\">Helm</a> charts that the <a href=\"https://github.com/kyma-project/kyma/tree/master/components/installer\" target=\"_blank\">Installer</a> uses.\nThis document describes how to configure the Installer with override values for Helm <a href=\"https://github.com/helm/helm/blob/master/docs/charts.md\" target=\"_blank\">charts</a>.</p>\n<h2 id=\"overview\">Overview</h2>\n<p>The Installer is a Kubernetes Operator that uses Helm to install Kyma components.\nHelm provides an overrides feature to customize the installation of charts, such as to configure environment-specific values.\nWhen using Installer for Kyma installation, users can&#39;t interact with Helm directly. The installation is not an interactive process.</p>\n<p>To customize the Kyma installation, the Installer exposes a generic mechanism to configure Helm overrides called <strong>user-defined</strong> overrides.</p>\n<h2 id=\"user-defined-overrides\">User-defined overrides</h2>\n<p>The Installer finds user-defined overrides by reading the ConfigMaps and Secrets deployed in the <code>kyma-installer</code> Namespace and marked with the <code>installer:overrides</code> Label.</p>\n<p>The Installer constructs a single override by inspecting the ConfigMap or Secret entry key name. The key name should be a dot-separated sequence of strings corresponding to the structure of keys in the chart&#39;s <code>values.yaml</code> file or the entry in chart&#39;s template. See the examples below.</p>\n<p>Installer merges all overrides recursively into a single YAML stream and passes it to Helm during the Kyma installation/upgrade operation.</p>\n<h2 id=\"common-vs-component-overrides\">Common vs component overrides</h2>\n<p>The Installer looks for available overrides each time a component installation or update operation is due.\nOverrides for the component are composed from two sets: <strong>common</strong> overrides and <strong>component-specific</strong> overrides.</p>\n<p>Kyma uses common overrides for the installation of all components. ConfigMaps and Secrets marked with the label <code>installer:overrides</code>, contain the definition. They require no additional label.</p>\n<p>Kyma uses component-specific overrides only for the installation of specific components. ConfigMaps and Secrets marked with both <code>installer:overrides</code> and <code>component: &lt;name&gt;</code> Labels, where <code>&lt;name&gt;</code> is the component name, contain the definition. Component-specific overrides have precedence over Common ones in case of conflicting entries.</p>\n<h2 id=\"overrides-examples\">Overrides Examples</h2>\n<h3 id=\"top-level-charts-overrides\">Top-level charts overrides</h3>\n<p>Overrides for top-level charts are straightforward. Just use the template value from the chart (without leading &quot;.Values.&quot; prefix) as the entry key in the ConfigMap or Secret.</p>\n<p>Example:</p>\n<p>The Installer uses a <code>core</code> top-level chart that contains a template with the following value reference:</p>\n<pre><code>memory: {{ .Values.test.acceptance.ui.requests.memory }}\n</code></pre><p>The chart&#39;s default value <code>test.acceptance.ui.requests.memory</code> in the <code>values.yaml</code> file resolves the template.\nThe following fragment of <code>values.yaml</code> shows this definition:</p>\n<pre><code>test:\n  acceptance:\n    ui:\n      requests:\n        memory: &quot;1Gi&quot;\n</code></pre><p>To override this value, for example to &quot;2Gi&quot;, proceed as follows:</p>\n<ul>\n<li>Create a ConfigMap in the <code>kyma-installer</code> Namespace, labelled with: <code>installer:overrides</code> (or reuse an existing one).</li>\n<li>Add an entry <code>test.acceptance.ui.requests.memory: 2Gi</code> to the map.</li>\n</ul>\n<p>Once the installation starts, the Installer generates overrides based on the map entries. The system uses the value of &quot;2Gi&quot; instead of the default &quot;1Gi&quot; from the chart <code>values.yaml</code> file.</p>\n<p>For overrides that the system should keep in Secrets, just define a Secret object instead of a ConfigMap with the same key and a base64-encoded value. Be sure to label the Secret with <code>installer:overrides</code>.</p>\n<h3 id=\"sub-chart-overrides\">Sub-chart overrides</h3>\n<p>Overrides for sub-charts follow the same convention as top-level charts. However, overrides require additional information about sub-chart location.</p>\n<p>When a sub-chart contains the <code>values.yaml</code> file, the information about the chart location is not necessary because the chart and it&#39;s <code>values.yaml</code> file are on the same level in the directory hierarchy.</p>\n<p>The situation is different when the Installer installs a chart with sub-charts.\nAll template values for a sub-chart must be prefixed with a sub-chart &quot;path&quot; that is relative to the top-level &quot;parent&quot; chart.</p>\n<p>This is not an Installer-specific requirement. The same considerations apply when you provide overrides manually using the <code>helm</code> command-line tool.</p>\n<p>Here is an example.\nThere&#39;s a <code>core</code> top-level chart, that the Installer installs.\nThere&#39;s an <code>application-connector</code> sub-chart in <code>core</code> with another nested sub-chart: <code>connector-service</code>.\nIn one of its templates there&#39;s a following fragment (shortened):</p>\n<pre><code>spec:\n  containers:\n  - name: {{ .Chart.Name }}\n    args:\n      - &quot;/connectorservice&quot;\n      - &#39;--appName={{ .Chart.Name }}&#39;\n      - &quot;--domainName={{ .Values.global.domainName }}&quot;\n      - &quot;--tokenExpirationMinutes={{ .Values.deployment.args.tokenExpirationMinutes }}&quot;\n</code></pre><p>The following fragment of the <code>values.yaml</code> file in <code>connector-service</code> chart defines the default value for <code>tokenExpirationMinutes</code>:</p>\n<pre><code>deployment:\n  args:\n    tokenExpirationMinutes: 60\n</code></pre><p>To override this value, such as to change &quot;60 to &quot;90&quot;, do the following:</p>\n<ul>\n<li>Create a ConfigMap in the <code>kyma-installer</code> Namespace labeled with <code>installer:overrides</code> or reuse existing one.</li>\n<li>Add an entry <code>application-connector.connector-service.deployment.args.tokenExpirationMinutes: 90</code> to the map.</li>\n</ul>\n<p>Notice that the user-provided override key now contains two parts:</p>\n<ul>\n<li>The chart &quot;path&quot; inside the top-level <code>core</code> chart: <code>application-connector.connector-service</code></li>\n<li>The original template value reference from the chart without the .Values. prefix: <code>deployment.args.tokenExpirationMinutes</code>.</li>\n</ul>\n<p>Once the installation starts, the Installer generates overrides based on the map entries. The system uses the value of &quot;90&quot; instead of the default value of &quot;60&quot; from the <code>values.yaml</code> chart file.</p>\n<h2 id=\"global-overrides\">Global overrides</h2>\n<p>There are several important parameters usually shared across the charts.\nHelm convention to provide these requires the use of the <code>global</code> override key.\nFor example, to define the <code>global.domain</code> override, just use &quot;global.domain&quot; as the name of the key in ConfigMap or Secret for the Installer.</p>\n<p>Once the installation starts, the Installer merges all of the map entries and collects all of the global entries under the <code>global</code> top-level key to use for installation.</p>\n<h2 id=\"values-and-types\">Values and types</h2>\n<p>Installer generally recognizes all override values as strings. It internally renders overrides to Helm as a YAML stream with only string values.</p>\n<p>There is one exception to this rule with respect to handling booleans:\nThe system converts &quot;true&quot; or &quot;false&quot; strings that it encounters to a corresponding boolean value (true/false).</p>\n<h2 id=\"merging-and-conflicting-entries\">Merging and conflicting entries</h2>\n<p>When the Installer encounters two overrides with the same key prefix, it tries to merge them.\nIf both of them represent a map (they have nested sub-keys), their nested keys are recursively merged.\nIf at least one of keys points to a final value, the Installer performs the merge in a non-deterministic order, so either one of the overrides is rendered in the final YAML data.</p>\n<p>It is important to avoid overrides having the same keys for final values.</p>\n<h3 id=\"example-of-non-conflicting-merge-\">Example of non-conflicting merge:</h3>\n<p>Two overrides with a common key prefix (&quot;a.b&quot;):</p>\n<pre><code>&quot;a.b.c&quot;: &quot;first&quot;\n&quot;a.b.d&quot;: &quot;second&quot;\n</code></pre><p>The Installer yields correct output:</p>\n<pre><code>a:\n  b:\n    c: first\n    d: second\n</code></pre><h3 id=\"example-of-conflicting-merge-\">Example of conflicting merge:</h3>\n<p>Two overrides with the same key (&quot;a.b&quot;):</p>\n<pre><code>&quot;a.b&quot;: &quot;first&quot;\n&quot;a.b&quot;: &quot;second&quot;\n</code></pre><p>The Installer yields either:</p>\n<pre><code>a:\n  b: &quot;first&quot;\n</code></pre><p>Or (due to non-deterministic merge order):</p>\n<pre><code>a:\n  b: &quot;second&quot;\n</code></pre>"
    },
    {
      "order": "12-01-try-out-kyma",
      "title": "Kyma features and concepts in practice",
      "type": "Examples",
      "source": "<p>The table contains a list of examples that demonstrate Kyma functionalities. You can run all of them locally or on a cluster. Examples are organized by a feature or concept they showcase. Each of them contains ready-to-use code snippets and the instructions in <code>README.md</code> documents.</p>\n<p>Follow the links to examples&#39; code and content sources, and try them on your own.</p>\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n<th>Technology</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/kyma-project/examples/blob/master/http-db-service/README.md\" target=\"_blank\">HTTP DB Service</a></td>\n<td>Test the service that exposes an HTTP API to access a database on the cluster.</td>\n<td>Go, MSSQL</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/kyma-project/examples/blob/master/event-subscription/service/README.md\" target=\"_blank\">Event Service Subscription</a></td>\n<td>Test the example that demonstrates the <code>publish</code> and <code>consume</code> features of the Event Bus.</td>\n<td>Go</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/kyma-project/examples/blob/master/event-subscription/lambda/README.md\" target=\"_blank\">Event Lambda Subscription</a></td>\n<td>Create functions, trigger them on Events, and bind them to services.</td>\n<td>Kubeless</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/kyma-project/examples/blob/master/gateway/README.md\" target=\"_blank\">Gateway</a></td>\n<td>Expose APIs for functions or services.</td>\n<td>Kubeless</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/kyma-project/examples/blob/master/service-binding/lambda/README.md\" target=\"_blank\">Service Binding</a></td>\n<td>Bind a Redis service to a lambda function.</td>\n<td>Kubeless, Redis, NodeJS</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/kyma-project/examples/blob/master/call-ec/README.md\" target=\"_blank\">Call SAP Commerce</a></td>\n<td>Call SAP Commerce in the context of the end user.</td>\n<td>Kubeless, NodeJS</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/kyma-project/examples/blob/master/monitoring-alert-rules/README.md\" target=\"_blank\">Alert Rules</a></td>\n<td>Configure alert rules in Kyma.</td>\n<td>Prometheus</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/kyma-project/examples/blob/master/monitoring-custom-metrics/README.md\" target=\"_blank\">Custom Metrics in Kyma</a></td>\n<td>Expose custom metrics in Kyma.</td>\n<td>Go, Prometheus</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/kyma-project/examples/blob/master/event-email-service/README.md\" target=\"_blank\">Event Email Service</a></td>\n<td>Send an automated email upon receiving an Event.</td>\n<td>NodeJS</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/kyma-project/examples/blob/master/tracing/README.md\" target=\"_blank\">Tracing</a></td>\n<td>Configure tracing for a service in Kyma.</td>\n<td>Go</td>\n</tr>\n</tbody>\n</table>\n"
    }
  ]
}
