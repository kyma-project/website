{
  "id": "application-connector",
  "displayName": "Application Connector",
  "description": "Overal documentation for Application Connector",
  "type": "Components",
  "docs": [
    {
      "order": "001-overview-application-connector",
      "title": "Overview",
      "source": "<p>The Application Connector is a proprietary Kyma implementation that allows you to connect with external solutions. The Application Connector consists of four\ncomponents that ensure the security of the connection and the access to all of the external solution&#39;s Events and APIs. The implementation handles routing of the calls and Events coming from an external solution to Kyma, and the API calls sent from Kyma to the connected external solution.</p>\n<p>These are the components of the Application Connector:</p>\n<ul>\n<li>The <strong>Connector Service</strong> generates the required certificates and ensures a secure and trusted connection between Kyma and an external solution. This is a global service that works in the context of\na given Remote Environment.</li>\n<li>The <strong>Metadata Service</strong> allows you to register all of the external solution&#39;s APIs and Event catalogs which Kyma consumes. You can register the APIs along with additional documentation and Swagger files.\nThis is a global service that works in the context of a given Remote Environment.</li>\n<li>The <strong>Gateway Service</strong> proxies the API calls sent from Kyma to the connected external solution and handles OAuth2 tokens. A new instance of this service is deployed for every Remote Environment.</li>\n<li>The <strong>Event Service</strong> delivers the Events sent from a connected external solution to Kyma. A new instance of this service is deployed for every Remote Environment.</li>\n</ul>\n<p>To ensure maximum security and separation, a single Remote Environment allows you to connect only to a single external solution.</p>\n"
    },
    {
      "order": "005-architecture-application-connector",
      "title": "Architecture",
      "source": "<p>The Application Connector consists of the following components:</p>\n<ul>\n<li><strong>Ingress-Gateway controller</strong> validating certificates and exposing multiple Application Connectors to the external world.</li>\n<li><strong>Gateway</strong> proxying calls to the registered solution.</li>\n<li><strong>Remote Environment CRD instance</strong> storing a solution&#39;s metadata.</li>\n<li><strong>Remote Environtment Controller</strong> provisioning and de-provisioning necessary deployments for the created Remote Environments.</li>\n<li><strong>Minio bucket</strong> storing API specifications, Event Catalogs, and documentations.</li>\n</ul>\n<p>To connect a new external solution, you must install and set up a new Remote Environment. Every external solution connected to Kyma is a separate Remote Environment with a dedicated Gateway Service and a dedicated Event Service. See the <strong>Set up a Remote Environment on local Kyma installation</strong> getting started guide to learn how to connect an external solution to Kyma.</p>\n<p><img src=\"assets/001-application-connector.png\" alt=\"Architecture Diagram\"></p>\n"
    },
    {
      "order": "006-details-ingress-gateway",
      "title": "Ingress-Gateway controller",
      "type": "Details",
      "source": "<p>The Ingress-Gateway controller exposes the Kyma gateways to the outside world by the public IP address/DNS name.\nThe DNS name of the Ingress is <code>gateway.[cluster-dns]</code>. For example: <code>gateway.servicemanager.cluster.kyma.cx</code>.</p>\n<p>A particular Remote Environment is exposed as a path. For example, to reach the Gateway for the Remote Environment named <code>ec-default</code>, use the following URL: <code>gateway.servicemanager.cluster.kyma.cx/ec-default</code></p>\n<p>This is an example of how to get all ServiceClasses:</p>\n<pre><code class=\"lang-console\">http GET https://gateway.servicemanager.cluster.kyma.cx/ec-default/v1/metadata/services --cert=ec-default.pem\n</code></pre>\n"
    },
    {
      "order": "010-details-ac-deployment",
      "title": "Deploy a new Remote Environment",
      "type": "Details",
      "source": "<p>The Remote Environment Controller provisions and de-provisions necessary deployments for the created Remote Environments.</p>\n<p>The following operations are available:</p>\n<ul>\n<li>Create a new Remote Environment</li>\n<li>Delete the Remote Environment</li>\n<li>Update the Remote Environment configuration</li>\n</ul>\n<p>You can perform all these operations using the Console UI or kubectl.</p>\n<p>All Remote Environments are installed in the <code>kyma-integration</code> Namespace.</p>\n<blockquote>\n<p><strong>NOTE:</strong> A Remote Environment represents a single connected external solution.</p>\n</blockquote>\n<h2 id=\"install-a-remote-environment\">Install a Remote Environment</h2>\n<p>You can install a Remote Environment using either the Console UI or kubectl</p>\n<h3 id=\"using-console-\">Using Console:</h3>\n<ul>\n<li>Go to the Kyma Console.</li>\n<li>Select <strong>Administration</strong>.</li>\n<li>Select the <strong>Remote Environments</strong> from the <strong>Integration</strong> section.</li>\n<li>Click <strong>Create Remote Environment</strong>..</li>\n</ul>\n<p><img src=\"./assets/create-re.png\" alt=\"Add RE\"></p>\n<ul>\n<li>Provide the following details:<ul>\n<li>Name</li>\n<li>Description</li>\n<li>Optional labels of your choice which are key-value pairs</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"./assets/edit-re.png\" alt=\"Update RE\"></p>\n<ul>\n<li>Click <strong>Create</strong>.</li>\n</ul>\n<p>The new Remote Environment is created. You can check its status in the <strong>Remote Environment</strong> view.</p>\n<h3 id=\"using-kubectl\">Using kubectl</h3>\n<p>You can create a new Remote Environment using the kubectl <code>apply</code> command for the <code>re-production-1.yaml</code> file:</p>\n<p>re-production-1.yaml:</p>\n<pre><code class=\"lang-yaml\">apiVersion: applicationconnector.kyma-project.io/v1alpha1\nkind: RemoteEnvironment\nmetadata:\n  name: production-1\nspec:\n  description: This is a Remote Environment for connecting production system 1.\n  labels:\n    region: us\n    kind: production\n</code></pre>\n<p>Run the following command:</p>\n<pre><code class=\"lang-bash\">kubectl apply -f ./re-production-1.yaml\n</code></pre>\n<h3 id=\"how-to-check-if-your-remote-environment-was-successfully-created-\">How to check if your remote environment was successfully created.</h3>\n<p>The new Remote Environment appears on the <strong>Remote Environments</strong> list with the <code>Serving</code> status`.</p>\n<h2 id=\"delete-a-remote-environment\">Delete a Remote Environment</h2>\n<p>You can remove a Remote Environment from Kyma using either the Console UI or kubectl.</p>\n<h3 id=\"using-console-\">Using Console:</h3>\n<ul>\n<li>Go to the Kyma console UI.</li>\n<li>Select <strong>Administration</strong>.</li>\n<li>Select the <strong>Remote Environments</strong> from the <strong>Integration</strong> section.</li>\n<li>Choose the Remote Environment you want to delete.</li>\n<li>Click <strong>Delete</strong>.</li>\n</ul>\n<p><img src=\"./assets/delete-re.png\" alt=\"Delete RE\"></p>\n<h3 id=\"using-kubectl\">Using kubectl</h3>\n<p>Delete the Remote Environment using the following command:</p>\n<pre><code class=\"lang-bash\">kubectl delete re name-of-remote-environment\n</code></pre>\n<h2 id=\"update-a-remote-environment\">Update a Remote Environment</h2>\n<p>You can update a Remote Environment using either the Console UI or kubectl.</p>\n<blockquote>\n<p><strong>NOTE:</strong> You cannot change the name of a Remote Environment.</p>\n</blockquote>\n<h3 id=\"using-console-\">Using Console:</h3>\n<ul>\n<li>Go to the Kyma Console UI.</li>\n<li>Select <strong>Administration</strong>.</li>\n<li>Select the <strong>Remote Environments</strong> from the <strong>Integration</strong> section.</li>\n<li>Choose the Remote Environment to which you want to update.</li>\n<li>Change the description and labels.</li>\n<li>Click <strong>Save</strong>.</li>\n</ul>\n<h3 id=\"using-kubectl\">Using kubectl</h3>\n<p>Update the <code>re-production-1.yaml</code> file</p>\n<pre><code class=\"lang-yaml\">apiVersion: applicationconnector.kyma-project.io/v1alpha1\nkind: RemoteEnvironment\nmetadata:\n  name: production-1\nspec:\n  description: This is a new description.\n  labels:\n    region: new-region\n    kind: production\n</code></pre>\n<p>Run the following command:</p>\n<pre><code class=\"lang-bash\">kubectl apply -f ./re-production-1.yaml\n</code></pre>\n"
    },
    {
      "order": "011-details-ac-security",
      "title": "Application Connector security",
      "type": "Details",
      "source": "<p>To provide maximum security, the Application Connector uses TLS protocol with Client Authentication enabled. As a result, whoever wants to connect to the Application Connector must present a valid client certificate, which is dedicated to a specific Remote Environment. In this way, the traffic is fully encrypted and the client has a valid identity.</p>\n<h2 id=\"disable-ssl-certificate-verification\">Disable SSL certificate verification</h2>\n<p>You can disable the SSL certificate verification in the communication between Kyma and a Remote Environment to allow Kyma to send requests and data to an unsecured Remote Environment. Disabling the certificate verification can be useful in certain testing scenarios.</p>\n<blockquote>\n<p><strong>NOTE:</strong> By default, the SSL certificate verification is enabled when sending data and requests to every Remote Environment.</p>\n</blockquote>\n<ul>\n<li><p>Disable SSL certificate verification for communication between Kyma and an existing Remote Environment</p>\n<ul>\n<li>Edit the <code>ec-default-gateway</code> Deployment in the <code>kyma-integration</code> Namespace. Run:<pre><code>kubectl -n kyma-integration edit deployment ec-default-gateway\n</code></pre></li>\n<li>Edit the Deployment in Vim. Select <code>i</code> to start editing.</li>\n<li>Find the <strong>skipVerify</strong> parameter and change its value to <code>true</code>.</li>\n<li>Select <code>esc</code>, type <code>:wq</code>, and select <code>enter</code> to write and quit.</li>\n</ul>\n</li>\n</ul>\n"
    },
    {
      "order": "012-details-serviceclass-documentation",
      "title": "Consuming applications through the Service Catalog",
      "type": "Details",
      "source": "<p>To consume the external solutions, referred to as Remote Environments, register them in Kyma. As a result of registering the external solutions, ClusterServiceClasses are created in the Service Catalog.</p>\n<h2 id=\"how-an-external-solution-is-represented-in-the-service-catalog\">How an external solution is represented in the Service Catalog</h2>\n<p>This document presents the example referring to the Order API ClusterServiceClass. This class is registered in Kyma with a <code>targetUrl</code> pointing to <code>https://www.orders.com/v1/orders</code>. The response <code>id</code> during the registration is <code>01a702b8-e302-4e62-b678-8d361b627e49</code>.</p>\n<p>As a result, the Remote Environment Broker, which provides ServiceClasses to the Service Catalog, contains the class with the following <code>id</code>:</p>\n<pre><code>re-{remote-environment-name}-gateway-{service-id}\n</code></pre><p>The <code>{service-id}</code> is an identifier returned in the process of registration. The <code>{remote-environment-name}</code> is the name of the Remote Environment created in Kyma. It represents an instance of the external solution that owns the registered service. Such an <code>id</code> in the Service Broker is referred to as a <code>name</code> of the ClusterServiceClass in the Service Catalog.\nExample <code>name</code>:</p>\n<pre><code>re-ec-default-gateway-01a702b8-e302-4e62-b678-8d361b627e49\n</code></pre><h2 id=\"service-consumption\">Service consumption</h2>\n<p>After provisioning the Order API in the environment using the Service Catalog, you can bind it to your application and consume it by calling the <code>url</code> provided during the binding operation.</p>\n<p>The following example shows the Gateway <code>url</code> provided for your applications:</p>\n<pre><code>re-ec-default-gateway-01a702b8-e302-4e62-b678-8d361b627e49.kyma-integration/orders\n</code></pre><p>The Gateway proxies all your requests to <code>https://www.orders.com/v1/orders</code>, in the case of the Order API example. You do not have to obtain the OAuth token in your application to access the API because the Gateway does it for you.</p>\n"
    },
    {
      "order": "013-details-api",
      "title": "API",
      "type": "Details",
      "source": "<p>Find the Application Connector API documentation in the included Swagger files.</p>\n<ul>\n<li>See <a href=\"assets/eventsapi.yaml\">this file</a> for the Events API specification.</li>\n<li>See <a href=\"assets/metadataapi.yaml\">this file</a> for the Metadata API specification.</li>\n<li>See <a href=\"assets/connectorapi.yaml\">this file</a> for the Connector API specification.</li>\n</ul>\n<p>You can acquire the API specification of the Metadata Service for a given version using the following command:</p>\n<pre><code>curl https://gateway.{CLUSTER_NAME}.kyma.cx/{RE_NAME}/v1/metadata/api.yaml\n</code></pre><p>To access the Metadata Service&#39;s API specification locally, provide the NodePort of the <code>core-nginx-ingress-controller</code>.</p>\n<p>To get the NodePort, run this command:</p>\n<pre><code>kubectl -n kyma-system get svc core-nginx-ingress-controller -o &#39;jsonpath={.spec.ports[?(@.port==443)].nodePort}&#39;\n</code></pre><p>To access the specification, run:</p>\n<pre><code>curl https://gateway.kyma.local:{NODE_PORT}/{RE_NAME}/v1/metadata/api.yaml\n</code></pre><p>You can acquire the API specification for a given version directly from the Connector Service:</p>\n<pre><code>curl https://connector-service.{CLUSTER_NAME}.kyma.cx/v1/api.yaml\n</code></pre><p>You can also access it locally:</p>\n<pre><code>curl https://connector-service.kyma.local/v1/api.yaml\n</code></pre>"
    },
    {
      "order": "015-details-one-click-configuration",
      "title": "Automatic connection configuration",
      "type": "Details",
      "source": "<p>Kyma Application Connector allows to authenticate and securely communicate with different external solutions. Kyma provides an easy way to set up such connection through the automatic connection configuration mechanism.</p>\n<h2 id=\"flow-description\">Flow description</h2>\n<p>The automatic connection configuration flow is presented in this diagram:\n<img src=\"./assets/002-automatic-configuration.png\" alt=\"Automatic Configuration Flow\"></p>\n<p>This example assumes that a new Remote Environment intended to connect the external solution already exists and is in the <code>disconnected</code> state, which means that there are no external solutions connected to it.</p>\n<p>On the diagram, the administrator on the Kyma side and on the external system side is the same person.</p>\n<ol>\n<li>The admin requests for a token using the CLI or the UI and receives a link with the token, which is valid for a limited period of time.</li>\n<li>The admin passes the token to the external system, which requests for information regarding the Kyma installation. In the response, it receives the following information:<ul>\n<li>the URL to which a third-party solution sends its Certificate Signing Request (CSR)</li>\n<li>URLs of the available APIs</li>\n<li>information required to generate a CSR</li>\n</ul>\n</li>\n<li>The external system generates a CSR based on the information provided by Kyma and sends the CSR to the designated URL. In the response, the external system receives a signed certificate. It can use the certificate to authenticate and safely communicate with Kyma.</li>\n</ol>\n<h2 id=\"configuration-steps\">Configuration steps</h2>\n<p>Follow these steps to configure the automatic connection between the Kyma Application Connector and an external solution:</p>\n<ol>\n<li><p>Get the configuration address URL with a valid token.</p>\n<p>Using the UI:</p>\n<ul>\n<li>Go to the Kyma console UI.</li>\n<li>Select <strong>Administration</strong>.</li>\n<li>Select the <strong>Remote Environments</strong> from the <strong>Integration</strong> section.</li>\n<li>Choose the Remote Environment to which you want to connect the external solution.</li>\n<li>Click <strong>Connect Remote Environment</strong>.</li>\n<li>Copy the token by clicking <strong>Copy to clipboard</strong>.</li>\n</ul>\n<p>Alternatively, get the configuration URL with a valid token using <code>kubectl port-forward</code> or <code>kubectl proxy</code>.</p>\n<ul>\n<li><p>Request:</p>\n<p> First, run:</p>\n<pre><code> kubectl -n=kyma-integration port-forward svc/connector-service-internal-api 8080:8080\n</code></pre><p> Send the request in a new terminal window:</p>\n<pre><code> curl -X POST http://localhost:8080/v1/remoteenvironments/{remote-environment-name}/tokens\n</code></pre></li>\n<li><p>Response:</p>\n<pre><code class=\"lang-json\"> {\n     &quot;url&quot;:&quot;{CONFIGURATION_URL_WITH_TOKEN}&quot;,\n     &quot;token&quot;:&quot;example-token-123&quot;\n }\n</code></pre>\n<p>When you connect an external solution to a local Kyma deployment, you must set the NodePort of the <code>core-nginx-ingress-controller</code> for the Gateway Service and for the Event Service.</p>\n</li>\n<li><p>To get the NodePort, run:</p>\n<pre><code> kubectl -n kyma-system get svc core-nginx-ingress-controller -o &#39;jsonpath={.spec.ports[?(@.port==443)].nodePort}&#39;\n</code></pre></li>\n<li>Set it for the Gateway Service and the Event Service using these calls:<pre><code> curl https://gateway.kyma.local:{NODE_PORT}/ec-default/v1/metadata/services --cert ec-default.crt --key ec-default.key -k\n</code></pre><pre><code> curl https://gateway.kyma.local:{NODE_PORT}/ec-default/v1/ec-default/v1/events --cert ec-default.crt --key ec-default.key -k\n</code></pre></li>\n</ul>\n</li>\n<li><p>Use the provided link to fetch information about the Kyma URLs and CSR configuration.</p>\n<ul>\n<li><p>Request:</p>\n<pre><code>curl {CONFIGURATION_URL_WITH_TOKEN}\n</code></pre><blockquote>\n<p><strong>NOTE:</strong> The URL you call in this step contains a token that is valid for a single call. If you need to get the configuration details once again, generate a new configuration URL with a valid token and call it again. You get a code <code>403</code> error if you call the same configuration URL more than once.</p>\n</blockquote>\n</li>\n<li><p>Response:</p>\n<pre><code class=\"lang-json\">{\n  &quot;csrUrl&quot;: &quot;https://connector-service.CLUSTER_NAME.kyma.cluster.cx/v1/remoteenvironments/{remote-environment-name}/client-certs?token=example-token-456&quot;,\n  &quot;api&quot;:{\n      &quot;metadataUrl&quot;:      &quot;https://gateway.CLUSTER_NAME.kyma.cluster.cx/{remote-environment-name}/v1/metadata/services&quot;,\n      &quot;eventsUrl&quot;:        &quot;https://gateway.CLUSTER_NAME.kyma.cluster.cx/{remote-environment-name}/v1/events&quot;,\n      &quot;certificatesUrl&quot;:  &quot;https://connector-service.CLUSTER_NAME.kyma.cluster.cx/v1/remoteenvironments/{remote-environment-name}&quot;,\n  },\n  &quot;certificate&quot;:{\n      &quot;subject&quot;:&quot;OU=Test,O=Test,L=Blacksburg,ST=Virginia,C=US,CN=ec-default&quot;,\n      &quot;extensions&quot;: &quot;&quot;,\n      &quot;key-algorithm&quot;: &quot;rsa2048&quot;,\n  }\n}\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>Use values received in the <code>certificate.subject</code> field to create a CSR.</p>\n<pre><code>   openssl req -new -out test.csr -key ec-default.key -subj &quot;/OU=OrgUnit/O=Organization/L=Waldorf/ST=Waldorf/C=DE/CN=ec-default&quot;\n</code></pre><p>After you create the CSR, make the following call:</p>\n<ul>\n<li><p>Request:</p>\n<pre><code>curl -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;csr&quot;:&quot;BASE64_ENCODED_CSR_HERE&quot;}&#39; https://connector-service.CLUSTER_NAME.kyma.cluster.cx/v1/remoteenvironments/{remote-environment-name}/client-certs?token=example-token-456\n</code></pre></li>\n<li><p>Response:</p>\n<pre><code>{\n    &quot;crt&quot;:&quot;BASE64_ENCODED_CRT&quot;\n}\n</code></pre></li>\n</ul>\n</li>\n<li><p>The <code>crt</code> field contains a valid base64-encoded PEM block of a certificate signed by the Kyma CA.</p>\n</li>\n<li><p>The external solution can now use the created certificate to securely authenticate and communicate with the Application Connector.</p>\n</li>\n</ol>\n"
    },
    {
      "order": "016-details-pass-access-token-in-request-header",
      "title": "Pass an access token in a request header",
      "type": "Details",
      "source": "<p>The Application Connector supports passing the access token directly in the request.</p>\n<h2 id=\"passing-the-access-token\">Passing the access token</h2>\n<p>If the user is already authenticated to the service deployed on Kyma, the access token can be passed in a custom <code>Access-token</code> header. If the Application Connector detects that the custom header is present, instead of obtaining a new token, it passes the received one as a <code>Bearer</code> token in the <code>Authorization</code> header.</p>\n<h2 id=\"example\">Example</h2>\n<p>Find the example of passing the EC access token to the Application Connector using Lambda in the <a href=\"https://github.com/kyma-project/examples/tree/master/call-ec\" target=\"_blank\"><code>examples</code></a> repository.</p>\n"
    },
    {
      "order": "031-gs-environment-mapping",
      "title": "Activate a RemoteEnvironment using EnvironmentMapping",
      "type": "Getting Started",
      "source": "<p>This Getting Started guide shows you how to perform operations on remote environments in the command line. For the Custom Resource Definition, see the <code>environment-mapping.crd.yaml</code> file under the <code>/resources/cluster-essentials/templates/</code> directory.\nAn instance of the EnvironmentMapping enables the RemoteEnvironment with the same name in a given Namespace. In this example, the EnvironmentMapping enables the <code>ec-prod</code> remote environment in the <code>production</code> Namespace:</p>\n<pre><code class=\"lang-yaml\">apiVersion: applicationconnector.kyma-project.io/v1alpha1\nkind: EnvironmentMapping\nmetadata:\n  name: ec-prod\n  namespace: production\n</code></pre>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>To follow this guide, run Kyma locally. For information on how to deploy Kyma locally, see the <strong>Local Kyma installation</strong> Getting Started guide.</p>\n<h2 id=\"details\">Details</h2>\n<p>Follow these steps to complete the Getting Started guide:</p>\n<ol>\n<li>List all RemoteEnvironments enabled in the <code>production</code> Environment:<pre><code class=\"lang-bash\"> &gt; kubectl get em -n production\n No resources found.\n</code></pre>\n</li>\n<li>Create a RemoteEnvironment:<pre><code class=\"lang-bash\"> &gt; kubectl apply -f docs/assets/crd/remote-environment-prod.yaml\n remoteenvironment &quot;ec-prod&quot; created\n</code></pre>\n</li>\n<li>Enable this RemoteEnvironment in the <code>production</code> Environment:<pre><code class=\"lang-bash\"> &gt; kubectl apply -f docs/assets/crd/mapping-prod.yaml\n environmentmapping &quot;ec-prod&quot; created\n</code></pre>\n</li>\n<li>List all RemoteEnvironments enabled in the <code>production</code> Environment again:<pre><code class=\"lang-bash\"> &gt; kubectl get em -n production\n NAME      AGE\n ec-prod   40s\n</code></pre>\n</li>\n<li>List all environments where <code>ec-prod</code> is enabled:<pre><code class=\"lang-bash\"> &gt; kubectl get em --all-namespaces -o jsonpath=&#39;{range .items[?(@.metadata.name==&quot;ec-prod&quot;)]}{@.metadata.namespace}{&quot;\n&quot;}{end}&#39;\n production\n</code></pre>\n</li>\n<li>Disable <code>ec-prod</code> in the <code>production</code> Environment:<pre><code class=\"lang-bash\"> &gt; kubectl delete -f docs/assets/crd/mapping-prod.yaml\n environmentmapping &quot;ec-prod&quot; deleted\n</code></pre>\n</li>\n<li>List all environments where <code>ec-prod</code> is enabled:<pre><code class=\"lang-bash\"> &gt; kubectl get em --all-namespaces -o jsonpath=&#39;{range .items[?(@.metadata.name==&quot;ec-prod&quot;)]}{@.metadata.namespace}{&quot;\n&quot;}{end}&#39;\n</code></pre>\n</li>\n<li>Delete all created resources:<pre><code class=\"lang-bash\"> &gt; kubectl delete -f docs/assets/crd/remote-environment-prod.yaml\n remoteenvironment &quot;ec-prod&quot; deleted\n</code></pre>\n</li>\n</ol>\n"
    },
    {
      "order": "040-cr-remote-evironment",
      "title": "RemoteEnvironment",
      "type": "Custom Resource",
      "source": "<p>The <code>remoteenvironments.applicationconnector.kyma-project.io</code> Custom Resource Definition (CRD) is a detailed description of the kind of data and the format used to register a Remote Environment in Kyma. The RemoteEnvironment resource defines APIs that the Remote Environment offers. As a result, the RemoteEnvironment is mapped to ServiceClasses in the Service Catalog. To get the up-to-date CRD and show the output in the <code>yaml</code> format, run this command:</p>\n<pre><code>kubectl get crd remoteenvironments.applicationconnector.kyma-project.io -o yaml\n</code></pre><h2 id=\"sample-custom-resource\">Sample custom resource</h2>\n<p>This is a sample resource that registers the <code>re-prod</code> Remote Environment which provides one service with the <code>ac031e8c-9aa4-4cb7-8999-0d358726ffaa</code> ID.</p>\n<pre><code>apiVersion: applicationconnector.kyma-project.io/v1alpha1\nkind: RemoteEnvironment\nmetadata:\n  name: re-prod\nspec:\n  description: &quot;RE description&quot;\n  accessLabel: &quot;re-access-label&quot;\n  services:\n    - id: &quot;ac031e8c-9aa4-4cb7-8999-0d358726ffaa&quot;\n      name: &quot;promotions-ac031e8c&quot;\n      displayName: &quot;Promotions&quot;\n      description: &quot;Short desc for Promotions APIs&quot;\n      longDescription: &quot;Long description for Promotions APIs&quot;\n      providerDisplayName: &quot;Organization name&quot;\n\n      tags:\n      - occ\n      - Promotions\n      labels:\n        connected-app: &quot;ec-prod&quot;\n      entries:\n      - type: API\n        gatewayUrl: &quot;http://promotions-gateway.production.svc.cluster.local&quot;\n        accessLabel: &quot;access-label-1&quot;\n        targetUrl: &quot;http://10.0.0.54:9932/occ/promotions&quot;\n        oauthUrl: &quot;http://10.0.0.55:10219/occ/token&quot;\n        credentialsSecretName: &quot;re-ac031e8c-9aa4-4cb7-8999-0d358726ffaa&quot;\n      - type: Events\n</code></pre><h2 id=\"custom-resource-parameters\">Custom resource parameters</h2>\n<p>This table lists all the possible parameters of a given resource together with their descriptions:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Parameter</th>\n<th style=\"text-align:center\">Mandatory?</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>metadata.name</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specifies the name of the CR.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.source</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Identifies the Remote Environment in the cluster.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.description</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Describes the connected Remote Environment.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.accessLabel</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Labels the environment when the <a href=\"041-cr-environment-mapping.md\">EnvironmentMapping</a> is created.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.labels</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Labels the identified Remote Environment&#39;s taxonomy.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Contains all services that the Remote Environment provides.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.id</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Identifies the service that the Remote Environment provides.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.identifier</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Provides an additional identifier of the ServiceClass.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.name</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specifies the CLI-friendly name of the Remote Environment service. It must contain only lowercase characters, numbers, and hyphens, with no spaces. This field must be unique across all service objects returned in the Remote Environment custom resource.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.displayName</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specifies a human-readable name of the Remote Environment service.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.description</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Provides a short, human-readable description of the Remote Environment service.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.longDescription</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Provides a detailed, human-readable description of the Remote Environment service.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.providerDisplayName</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specifies a human-readable name of the Remote Environment service provider.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.tags</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Specifies the categories of the Remote Environment service.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.labels</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Specifies labels used to add the additional meta-information to the Remote Environment service. This field must contain the <code>connected-app</code> label.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.entries</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Contains information about APIs and Events that the Remote Environment service provides.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.entries.type</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specifies whether the entry is of API or Event type.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.entries.gatewayUrl</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Specifies the URL of the Application Connector. This field is required for the API entry type.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.entries.accessLabel</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Specifies the label used in Istio rules in the Application Connector. This field is required for the API entry type.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.entries.targetUrl</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Specifies the URL to a given API. This field is required for the API entry type.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.entries.oauthUrl</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Specifies the URL used to authorize with a given API. This field is required for the API entry type.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.entries.credentialsSecretName</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Specifies the name of the Secret which allows you to make a call to a given API. This field is required if the <strong>spec.services.entries.oauthUrl</strong> is specified.</td>\n</tr>\n</tbody>\n</table>\n"
    },
    {
      "order": "041-cr-environment-mapping",
      "title": "EnvironmentMapping",
      "type": "Custom Resource",
      "source": "<p>The <code>environmentmappings.applicationconnector.kyma-project.io</code> Custom Resource Definition (CRD) is a detailed description of the kind of data and the format used to enable APIs and Events from a Remote Environment as a ServiceClass in a given Namespace. To get the up-to-date CRD and show the output in the <code>yaml</code> format, run this command:</p>\n<pre><code>kubectl get crd environmentmappings.applicationconnector.kyma-project.io -o yaml\n</code></pre><h2 id=\"sample-custom-resource\">Sample custom resource</h2>\n<p>This is a sample resource in which the EnvironmentMapping enables the <code>ec-prod</code> Remote Environment in the <code>production</code> Namespace:</p>\n<pre><code>apiVersion: applicationconnector.kyma-project.io/v1alpha1\nkind: EnvironmentMapping\nmetadata:\n  name: ec-prod\n  namespace: production\n</code></pre><h2 id=\"custom-resource-parameters\">Custom resource parameters</h2>\n<p>This table lists all the possible parameters of a given resource together with their descriptions:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Parameter</th>\n<th style=\"text-align:center\">Mandatory?</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>metadata.name</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specifies the name of the CR and the Remote Environment.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>metadata.namespace</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specifies the Namespace in which the Remote Environment is enabled.</td>\n</tr>\n</tbody>\n</table>\n"
    }
  ]
}
