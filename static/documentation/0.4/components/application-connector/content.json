{
  "id": "application-connector",
  "displayName": "Application Connector",
  "description": "Overal documentation for Application Connector",
  "type": "Components",
  "docs": [
    {
      "order": "001-overview-application-connector",
      "title": "Overview",
      "source": "<p>The Application Connector (AC) is a proprietary Kyma implementation that allows you to connect with external solutions. No matter if you want to integrate an on-premise or a cloud system, the integration process doesn&#39;t change, which allows to avoid any configuration and network-related problems.</p>\n<p>The external solution you connect to Kyma using the AC is represented as a Remote Environment (RE). There is always a one-to-one relationship between a connected solution and a Kyma RE, which helps to ensure the highest level of security and separation. This means that you must create five separate REs in your cluster to connect five different external solutions and use their APIs and Event catalogs in Kyma.</p>\n<p>The AC gives you the following:</p>\n<ul>\n<li>Manages the lifecycle of REs.</li>\n<li>Establishes a secure connection and generates the client certificate used by the connected external solution.</li>\n<li>Registers the APIs and the Event catalogs of the connected external solution.</li>\n<li>Delivers the Events from the connected external solution to the Kyma Event Bus.</li>\n<li>Proxies calls sent from Kyma to external APIs registered by the connected external solution.</li>\n<li>Allows to map a RE to a Kyma Environment and use its registered APIs and Event catalogs in the context of that Environment.</li>\n<li>Integrates the registered APIs and Event catalogs with the Kyma Service Catalog.</li>\n</ul>\n<p>All of the AC components scale independently, which allows to adjust it to fit the needs of the implementation built using Kyma.</p>\n<blockquote>\n<p><strong>NOTE:</strong> To learn more about the Environments in Kyma, read the <strong>Environments</strong> document in the <strong>Kyma</strong> documentation topic.</p>\n</blockquote>\n"
    },
    {
      "order": "004-architecture-application-connector",
      "title": "Application Connector components",
      "type": "Architecture",
      "source": "<p><img src=\"assets/001-application-connector.svg\" alt=\"Architecture Diagram\"></p>\n<h2 id=\"nginx-ingress-controller\">Nginx Ingress Controller</h2>\n<p>The Nginx Ingress Controller exposes the Application Connector by assigning a public IP address and a DNS name to it.\nThe DNS name of the Ingress is cluster-dependant and follows the <code>gateway.{cluster-dns}</code> format, for example <code>gateway.servicemanager.cluster.kyma.cx</code>.\nYou can access every exposed Remote Environment through its Gateway by using the assigned path. For example, to reach the Gateway for the <code>ec-default</code> Remote Environment, use this URL: <code>gateway.servicemanager.cluster.kyma.cx/ec-default</code>. The Nginx Ingress Controller secures the endpoint with certificate validation. Each call must include a valid client certificate which is Remote Environment-specific.</p>\n<h2 id=\"connector-service\">Connector Service</h2>\n<p>The Connector Service:</p>\n<ul>\n<li>Handles the exchange of client certificates for a given RE.</li>\n<li>Provides the Metadata Service and Event Service endpoints.</li>\n<li>Signs client certificates using the server side certificate stored in Kubernetes Secrets.</li>\n</ul>\n<h2 id=\"metadata-service\">Metadata Service</h2>\n<p>The Metadata Service stores all registered APIs and Event Catalog exposed by a connected external solution. The APIs and Event catalogs metadata are stored in RemoteEnvironment Custom Resource.\nThe system creates a new Kubernetes service for each registered API. Additionally, a new Service Classes is registered in the Service Catalog.</p>\n<blockquote>\n<p><strong>NOTE:</strong> Using the Metadata Service, you can register an API along with its OAuth credentials. The credentials are stored in a Kubernetes Secret.</p>\n</blockquote>\n<h2 id=\"event-service\">Event Service</h2>\n<p>The Event Service sends events to the Kyma Event Bus and enriches the events with metadata that indicates the source of the Event.\nThis allows to route the events to Lambda functions and Services based on their source Remote Environment.</p>\n<h2 id=\"remote-environment\">Remote Environment</h2>\n<p>A Remote Environment (RE) represents an external solution connected to Kyma. It handles the integration with other components, such as the Service Catalog or the Event Bus.\nUsing the components of the Application Connector, the RE creates a coherent identity for a connected external solution and ensures its separation.\nAll REs are created through the RemoteEnvironment Custom Resource, which also stores all of the relevant metadata. You can map a RE to many Kyma Environments and use the APIs and the Event Catalogs of the connected external solution within their context.</p>\n<h2 id=\"remote-environment-controller\">Remote Environment controller</h2>\n<p>The controller listens for creating or deleting the RemoteEnvironment Custom Resources and acts accordingly, either provisioning or de-provisioning an instance of Proxy Service and Event Service for every Custom Resource.         </p>\n<blockquote>\n<p><strong>NOTE:</strong> Every RemoteEnvironment Custom Resource corresponds to a single RE to which you can connect an external solution.</p>\n</blockquote>\n<h2 id=\"proxy-service\">Proxy Service</h2>\n<p>The Proxy Service is an intermediary component between a lambda function or a service and an external API registered with the Metadata Service. It acts as a proxy and can acquire OAuth tokens.</p>\n<h2 id=\"access-service\">Access Service</h2>\n<p>The Access Service exposes the Proxy Service and manages the access from the Lambda functions and services deployed in Kyma to the external APIs over the Proxy Service.</p>\n<h2 id=\"minio-bucket\">Minio bucket</h2>\n<p>The Minio bucket stores the documentation of the connected external solution&#39;s registered APIs and Event catalogs.</p>\n<h2 id=\"kubernetes-secret\">Kubernetes Secret</h2>\n<p>The Kubernetes Secret is a Kubernetes object which stores sensitive data, such as the OAuth credentials.</p>\n"
    },
    {
      "order": "008-details-ac-security",
      "title": "Security",
      "type": "Details",
      "source": "<h2 id=\"client-certificates\">Client certificates</h2>\n<p>To provide maximum security, the Application Connector uses TLS protocol with Client Authentication enabled. As a result, whoever wants to connect to the Application Connector must present a valid client certificate, which is dedicated to a specific Remote Environment. In this way, the traffic is fully encrypted and the client has a valid identity.</p>\n<h2 id=\"disable-ssl-certificate-verification\">Disable SSL certificate verification</h2>\n<p>You can disable the SSL certificate verification in the communication between Kyma and a Remote Environment to allow Kyma to send requests and data to an unsecured Remote Environment. Disabling the certificate verification can be useful in certain testing scenarios.</p>\n<blockquote>\n<p><strong>NOTE:</strong> By default, the SSL certificate verification is enabled when sending data and requests to every Remote Environment.</p>\n</blockquote>\n<p>Follow these steps to disable SSL certificate verification for communication between Kyma and an existing Remote Environment:</p>\n<ol>\n<li>Edit the <code>ec-default-gateway</code> Deployment in the <code>kyma-integration</code> Namespace. Run:<pre><code>kubectl -n kyma-integration edit deployment ec-default-gateway\n</code></pre></li>\n<li>Edit the Deployment in Vim. Select <code>i</code> to start editing.</li>\n<li>Find the <strong>skipVerify</strong> parameter and change its value to <code>true</code>.</li>\n<li>Select <code>esc</code>, type <code>:wq</code>, and select <code>enter</code> to write and quit.</li>\n</ol>\n"
    },
    {
      "order": "010-architecture-connector-service",
      "title": "Connector Service",
      "type": "Architecture",
      "source": "<p>The Connector Service generates client certificates which secure the communication between Kyma and the connected external solutions.        </p>\n<p>Generating a new client certificate is the first step in the process of configuring a Remote Environment (RE). Kyma stores the root certificate and serves as the Certificate Authority when you configure a new RE. When you generate a new client certificate, the Connector Service returns it along with the root certificate to allow validation.  </p>\n<p>This diagram illustrates the client certificate generation flow in details:\n<img src=\"assets/002-automatic-configuration.svg\" alt=\"Client certificate generation operation flow\"></p>\n<ol>\n<li>The administrator requests for a token using the CLI or the UI and receives a link with the token, which is valid for a limited period of time.</li>\n<li>The administrator passes the token to the external system, which requests for information regarding the Kyma installation. In the response, it receives the following information:<ul>\n<li>the URL to which a third-party solution sends its Certificate Signing Request (CSR)</li>\n<li>URLs of the available APIs</li>\n<li>information required to generate a CSR</li>\n</ul>\n</li>\n<li>The external system generates a CSR based on the information provided by Kyma and sends the CSR to the designated URL. In the response, the external system receives a signed certificate. It can use the certificate to authenticate and safely communicate with Kyma.</li>\n</ol>\n"
    },
    {
      "order": "011-api-connector-service",
      "title": "Connector Service",
      "type": "API",
      "source": "<p>The Connector Service exposes two separate APIs:</p>\n<ul>\n<li>An internal API available in the Kyma cluster used to initiate certificate generation.</li>\n<li>An external API exposed through Ingress used to finalize certificate generation.</li>\n</ul>\n<p>Find the specification of both of these APIs <a href=\"assets/connectorapi.yaml\">here</a>.</p>\n<p>Alternatively, get the API specification directly from the Connector Service:</p>\n<pre><code>https://connector-service.{CLUSTER_DOMAIN}/v1/api.yaml\n</code></pre><p>Run this command to access the API specification on a local Kyma deployment:</p>\n<pre><code>curl https://connector-service.kyma.local/v1/api.yaml\n</code></pre>"
    },
    {
      "order": "012-details-consume-services",
      "title": "Consume applications through the Service Catalog",
      "type": "Details",
      "source": "<p>To consume an external solution connected to Kyma, you must register it as a Remote Environment. As a result of registering the external solution, ClusterServiceClasses are created in the Service Catalog.</p>\n<h2 id=\"external-solution-s-services-in-the-service-catalog\">External solution&#39;s services in the Service Catalog</h2>\n<p>The Example API is registered in Kyma with the <code>targetUrl</code> pointing to <code>https://www.orders.com/v1/orders</code>. The ID assigned to the API in the registration process is <code>01a702b8-e302-4e62-b678-8d361b627e49</code>.</p>\n<p>The Remote Environment Broker, which provides ServiceClasses to the Service Catalog, follows this naming convention for its objects:</p>\n<pre><code>re-{remote-environment-name}-gateway-{service-id}\n</code></pre><p>The <code>{service-id}</code> is the service identifier assigned in the process of registration. The <code>{remote-environment-name}</code> is the name of the Remote Environment created in Kyma. It represents an instance of the connected external solution that owns the registered service. Such identifier used by the Remote Environment Broker is referred to as the <code>name</code> of a ClusterServiceClass in the Service Catalog.</p>\n<p>This an example of a full ClusterServiceClass <code>name</code>:</p>\n<pre><code>re-ec-default-gateway-01a702b8-e302-4e62-b678-8d361b627e49\n</code></pre><h2 id=\"service-consumption\">Service consumption</h2>\n<p>After you provision the Example API in the Environment of your choice using the Service Catalog, you can bind it to your application and consume it by calling the URL you get as a result of a successful binding.</p>\n<p>This is a sample URL for the Example API:</p>\n<pre><code>re-ec-default-gateway-01a702b8-e302-4e62-b678-8d361b627e49.kyma-integration/orders\n</code></pre><p>When you call this URL, the Gateway Service proxies all requests to the <code>https://www.orders.com/v1/orders</code> address, which is the <code>targetUrl</code> registered for the Example API. You do not have to get an OAuth token and manually include it in the call as the Gateway service does it for you automatically.</p>\n"
    },
    {
      "order": "014-details-metadata-service",
      "title": "Metadata Service",
      "type": "Details",
      "source": "<p>The Metadata Service allows you to register the APIs and Event catalogs of the services exposed by the connected external solution.         </p>\n<p>The Metadata Service stores the data of all registered services in:</p>\n<ul>\n<li>Remote Environment Custom Resource (CR), which stores the metadata of the service.</li>\n<li>Minio bucket, which stores the API specification, Event catalog and documentation.</li>\n<li>Kubernetes secrets, which stores sensitive data, such as OAuth credentials.</li>\n</ul>\n<h2 id=\"kubernetes-apis-interaction\">Kubernetes APIs interaction</h2>\n<p>The Metadata Service interacts with Kubernetes APIs to perform these tasks:</p>\n<ul>\n<li>Modify the Remote Environment CR instance.</li>\n<li>Create Secrets which contain client ID and client secret used to access OAuth-secured APIs.</li>\n<li>Create the Access Service.</li>\n</ul>\n"
    },
    {
      "order": "015-api-metadata-service",
      "title": "Metadata Service",
      "type": "API",
      "source": "<p>You can get the API specification of the Metadata Service for a given version of the service using this command:</p>\n<pre><code>curl https://gateway.{CLUSTER_DOMAIN}/{RE_NAME}/v1/metadata/api.yaml\n</code></pre><p>To access the API specification of the Metadata Service locally, provide the NodePort of the <code>core-nginx-ingress-controller</code>.</p>\n<p>To get the NodePort, run this command:</p>\n<pre><code>kubectl -n kyma-system get svc core-nginx-ingress-controller -o &#39;jsonpath={.spec.ports[?(@.port==443)].nodePort}&#39;\n</code></pre><p>To access the specification, run:</p>\n<pre><code>curl https://gateway.kyma.local:{NODE_PORT}/{RE_NAME}/v1/metadata/api.yaml\n</code></pre>"
    },
    {
      "order": "016-api-event-service",
      "title": "Event Service",
      "type": "API",
      "source": "<p>See <a href=\"assets/eventsapi.yaml\">this file</a> for the Event Service API specification.</p>\n"
    },
    {
      "order": "018-architecture-proxy-service",
      "title": "Proxy Service",
      "type": "Architecture",
      "source": "<p>The Proxy Service sends the requests from Lambda functions and services in Kyma to external APIs registered with the Metadata Service. The Proxy Service works in conjunction with the Access Service, which exposes the Proxy Service.</p>\n<blockquote>\n<p><strong>NOTE:</strong> The system creates an Access Service for every external API registered by the Metadata Service.</p>\n</blockquote>\n<p>The following diagram illustrates how the Proxy Service interacts with other components and external APIs secured with OAuth.</p>\n<p><img src=\"assets/003-architecture-proxy-service.svg\" alt=\"Proxy Service Diagram\"></p>\n<ol>\n<li>A Lambda function calls the Access Service. The name of every Access Service follows this format: <code>re-{remote-environment-name}-gateway-{service-id}</code></li>\n<li>The Access Service exposes the Proxy Service.</li>\n<li>The Proxy Service extracts the Remote Environment (RE) name and the service ID from the name of the Access Service name. Using the extracted RE name, the Proxy Service finds the respective RemoteEnvironment Custom Resource and obtains the information about the registered external API, such as the API URL and the OAuth server URL.</li>\n<li>The Proxy Service gets a token from the OAuth server.</li>\n<li>The Proxy Service calls the target API using the OAuth token.  </li>\n</ol>\n<h2 id=\"caching\">Caching</h2>\n<p>To ensure optimal performance, the Proxy Service caches the OAuth tokens it obtains. If the service doesn&#39;t find a token valid for the call it makes, it gets a new token from the OAuth server.\nAdditionally, the service caches ReverseProxy objects used to proxy the requests to the underlying URL.</p>\n"
    },
    {
      "order": "020-details-pass-access-token-in-request-header",
      "title": "Pass an access token in a request header",
      "type": "Details",
      "source": "<p>The Application Connector supports passing the access token directly in the request.</p>\n<h2 id=\"passing-the-access-token\">Passing the access token</h2>\n<p>If the user is already authenticated to the service deployed on Kyma, the access token can be passed in a custom <code>Access-token</code> header. If the Application Connector detects that the custom header is present, instead of obtaining a new token, it passes the received one as a <code>Bearer</code> token in the <code>Authorization</code> header.</p>\n<h2 id=\"example\">Example</h2>\n<p>Find the example of passing the EC access token to the Application Connector using Lambda in the <a href=\"https://github.com/kyma-project/examples/tree/master/call-ec\" target=\"_blank\"><code>examples</code></a> repository.</p>\n"
    },
    {
      "order": "032-gs-create-remote-environment",
      "title": "Create a new Remote Environment",
      "type": "Getting Started",
      "source": "<p>The Remote Environment Controller provisions and de-provisions the necessary deployments for the created Remote Environment (RE).</p>\n<blockquote>\n<p><strong>NOTE:</strong> A Remote Environment represents a single connected external solution.</p>\n</blockquote>\n<p>To create a new RE, run this command:</p>\n<pre><code>cat &lt;&lt;EOF | kubectl apply -f -\napiVersion: applicationconnector.kyma-project.io/v1alpha1\nkind: RemoteEnvironment\nmetadata:\n  name: {RE_NAME}\nspec:\n  description: {RE_DESCRIPTION}\n  labels:\n    region: us\n    kind: production\nEOF\n</code></pre>"
    },
    {
      "order": "034-gs-get-client-certificate",
      "title": "Get the client certificate",
      "type": "Getting Started",
      "source": "<p>After you create a Remote Environment (RE) in Kyma, it&#39;s time to connect it with an external solution, which allows to consume external APIs and Event catalogs of this solution. To accomplish this you must get the client certificate for the external solution and register its services.</p>\n<p>This guide shows you how to get the client certificate.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<ul>\n<li><a href=\"https://www.openssl.org/docs/man1.0.2/apps/openssl.html\" target=\"_blank\">OpenSSL toolkit</a> to create a Certificate Signing Request (CSR), keys, and certificates which fulfil high security standards.</li>\n</ul>\n<h2 id=\"get-the-configuration-url-with-a-token\">Get the configuration URL with a token</h2>\n<p>Get the configuration URL with a token which allows you to get Kyma CSR configuration and URLs in Kyma required to connect your external solution to a created Remote Environment.\nFollow this steps to get it using the CLI:</p>\n<ul>\n<li><p>Expose the Connector Service outside of Kubernetes using <code>kubectl port-forward</code>:</p>\n<pre><code>kubectl -n=kyma-integration port-forward svc/connector-service-internal-api 8080:8080\n</code></pre></li>\n<li><p>Make a POST request to the <code>tokens</code> endpoint:</p>\n<pre><code>curl -X POST http://localhost:8080/v1/remoteenvironments/{RE_NAME}/tokens\n</code></pre></li>\n</ul>\n<p>A successful call returns the following response:</p>\n<pre><code>  {\n    &quot;url&quot;:&quot;{CONFIGURATION_URL_WITH_TOKEN}&quot;,\n    &quot;token&quot;:&quot;example-token-123&quot;\n  }\n</code></pre><h2 id=\"get-the-csr-information-and-configuration-details-from-kyma\">Get the CSR information and configuration details from Kyma</h2>\n<p>Use the link you got in the previous step to fetch the CSR information and configuration details required to connect your external solution. Run:</p>\n<pre><code>curl {CONFIGURATION_URL_WITH_TOKEN}\n</code></pre><blockquote>\n<p><strong>NOTE:</strong> The URL you call in this step contains a token that is valid for a single call. If you need to get the configuration details once again, generate a new configuration URL with a valid token and call it again. You get a code <code>403</code> error if you call the same configuration URL more than once.</p>\n</blockquote>\n<p>A successful call returns the following response:</p>\n<pre><code>{\n    &quot;csrUrl&quot;: &quot;{CSR_SIGNING_URL_WITH_TOKEN}&quot;,\n    &quot;api&quot;:{\n        &quot;metadataUrl&quot;:      &quot;https://gateway.{CLUSTER_DOMAIN}/{RE_NAME}/v1/metadata/services&quot;,\n        &quot;eventsUrl&quot;:        &quot;https://gateway.{CLUSTER_DOMAIN}/{RE_NAME}/v1/events&quot;,\n        &quot;certificatesUrl&quot;:  &quot;https://connector-service.{CLUSTER_DOMAIN}/v1/remoteenvironments/{RE_NAME}&quot;,\n    },\n    &quot;certificate&quot;:{\n        &quot;subject&quot;:&quot;OU=Test,O=Test,L=Blacksburg,ST=Virginia,C=US,CN={RE_NAME}&quot;,\n        &quot;extensions&quot;: &quot;&quot;,\n        &quot;key-algorithm&quot;: &quot;rsa2048&quot;,\n    }\n}\n</code></pre><p>When you connect an external solution to a local Kyma deployment, you must set the NodePort of the <code>core-nginx-ingress-controller</code> for the Gateway Service and for the Event Service.</p>\n<ul>\n<li>To get the NodePort, run:<pre><code>kubectl -n kyma-system get svc core-nginx-ingress-controller -o &#39;jsonpath={.spec.ports[?(@.port==443)].nodePort}&#39;\n</code></pre></li>\n<li>Set it for the Gateway Service and the Event Service using these calls:<pre><code>curl https://gateway.kyma.local:{NODE_PORT}/ec-default/v1/metadata/services --cert ec-default.crt --key ec-default.key -k\n</code></pre><pre><code>curl https://gateway.kyma.local:{NODE_PORT}/ec-default/v1/ec-default/v1/events --cert ec-default.crt --key ec-default.key -k\n</code></pre></li>\n</ul>\n<h2 id=\"generate-a-csr-and-send-it-to-kyma\">Generate a CSR and send it to Kyma</h2>\n<p>Generate a CSR using the values obtained in the previous step:</p>\n<pre><code>openssl genrsa -out generated.key 2048\nopenssl req -new -sha256 -out generated.csr -key generated.key -subj &quot;/OU=OrgUnit/O=Organization/L=Waldorf/ST=Waldorf/C=DE/CN={RE_NAME}&quot;\nopenssl base64 -in generated.csr\n</code></pre><p>Send the encoded CSR to Kyma. Run:</p>\n<pre><code>curl -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;csr&quot;:&quot;BASE64_ENCODED_CSR_HERE&quot;}&#39; https://connector-service.{CLUSTER_DOMAIN}/v1/remoteenvironments/{RE_NAME}/client-certs?token=example-token-456\n</code></pre><p>The response contains a valid client certificate signed by the Kyma Certificate Authority:</p>\n<pre><code>{\n    &quot;crt&quot;:&quot;BASE64_ENCODED_CRT&quot;\n}\n</code></pre><p>After you receive the certificate, decode it and use it in your application. Register the services of your external solution through the Metadata Service.</p>\n"
    },
    {
      "order": "036-gs-register-manage-services",
      "title": "Register a service",
      "type": "Getting Started",
      "source": "<p>This guide shows you how to register a service of your external solution in Kyma.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>Valid certificate signed by the Kyma Certificate Authority.</p>\n<h2 id=\"register-a-service\">Register a service</h2>\n<p>To register a service, follow this template to prepare the request body:</p>\n<pre><code>{\n  &quot;provider&quot;: &quot;example-provider&quot;,\n  &quot;name&quot;: &quot;example-name&quot;,\n  &quot;description&quot;: &quot;This is the long description of your service&quot;,\n  &quot;shortDescription&quot;: &quot;Short description&quot;,\n  &quot;labels&quot;: {\n    &quot;example&quot;: &quot;true&quot;\n  },\n  &quot;api&quot;: {\n    &quot;targetUrl&quot;: &quot;https://httpbin.org/&quot;,\n    &quot;spec&quot;: {}\n  },\n  &quot;events&quot;: {\n    &quot;spec&quot;: {\n      &quot;asyncapi&quot;: &quot;1.0.0&quot;,\n      &quot;info&quot;: {\n        &quot;title&quot;: &quot;PetStore Events&quot;,\n        &quot;version&quot;: &quot;1.0.0&quot;,\n        &quot;description&quot;: &quot;Description of all the events&quot;\n      },\n      &quot;baseTopic&quot;: &quot;stage.com.some.company.system&quot;,\n      &quot;topics&quot;: {\n        &quot;petCreated.v1&quot;: {\n          &quot;subscribe&quot;: {\n            &quot;summary&quot;: &quot;Event containing information about new pet added to the Pet Store.&quot;,\n            &quot;payload&quot;: {\n              &quot;type&quot;: &quot;object&quot;,\n              &quot;properties&quot;: {\n                &quot;pet&quot;: {\n                  &quot;type&quot;: &quot;object&quot;,\n                  &quot;required&quot;: [\n                    &quot;id&quot;,\n                    &quot;name&quot;\n                  ],\n                  &quot;example&quot;: {\n                    &quot;id&quot;: &quot;4caad296-e0c5-491e-98ac-0ed118f9474e&quot;,\n                    &quot;category&quot;: &quot;mammal&quot;,\n                    &quot;name&quot;: &quot;doggie&quot;\n                  },\n                  &quot;properties&quot;: {\n                    &quot;id&quot;: {\n                      &quot;title&quot;: &quot;Id&quot;,\n                      &quot;description&quot;: &quot;Resource identifier&quot;,\n                      &quot;type&quot;: &quot;string&quot;\n                    },\n                    &quot;name&quot;: {\n                      &quot;title&quot;: &quot;Name&quot;,\n                      &quot;description&quot;: &quot;Pet name&quot;,\n                      &quot;type&quot;: &quot;string&quot;\n                    },\n                    &quot;category&quot;: {\n                      &quot;title&quot;: &quot;Category&quot;,\n                      &quot;description&quot;: &quot;Animal category&quot;,\n                      &quot;type&quot;: &quot;string&quot;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  &quot;documentation&quot;: {\n    &quot;displayName&quot;: &quot;Documentation&quot;,\n    &quot;description&quot;: &quot;Description&quot;,\n    &quot;type&quot;: &quot;some type&quot;,\n    &quot;tags&quot;: [&quot;tag1&quot;, &quot;tag2&quot;],\n    &quot;docs&quot;: [\n        {\n        &quot;title&quot;: &quot;Documentation title...&quot;,\n        &quot;type&quot;: &quot;type&quot;,\n        &quot;source&quot;: &quot;source&quot;\n        }\n    ]\n  }\n}\n</code></pre><p>Include the request body you prepared in this call:</p>\n<pre><code>curl -X POST -d &#39;{YOUR_REQUEST_BODY}&#39; https://gateway.{CLUSTER_DOMAIN}/{RE_NAME}/v1/metadata/services --cert {CERT_FILE_NAME}.crt --key {KEY_FILE_NAME}.key -k\n</code></pre><p>On a local deployment run:</p>\n<pre><code>curl -X POST -d &#39;{YOUR_REQUEST_BODY}&#39; https://gateway.kyma.local:$NODE_PORT/{RE_NAME}/v1/metadata/services --cert {CERT_FILE_NAME}.crt --key {KEY_FILE_NAME}.key -k\n</code></pre><p>A successful response returns the ID of the registered service:</p>\n<pre><code>{&quot;id&quot;:&quot;{YOUR_SERVICE_ID}&quot;}\n</code></pre><p>To check the details of a registered service, send this request:</p>\n<pre><code>curl https://gateway.{CLUSTER_DOMAIN}/{RE_NAME}/v1/metadata/services/{YOUR_SERVICE_ID} --cert {CERT_FILE_NAME}.crt --key {KEY_FILE_NAME}.key -k\n</code></pre><p>On a local deployment run:</p>\n<pre><code>curl https://gateway.{kyma.local:$NODE_PORT}/{RE_NAME}/v1/metadata/services/{YOUR_SERVICE_ID} --cert {CERT_FILE_NAME}.crt --key {KEY_FILE_NAME}.key -k\n</code></pre>"
    },
    {
      "order": "039-gs-environment-mapping",
      "title": "Bind a Remote Environment to an Environment",
      "type": "Getting Started",
      "source": "<p>This guide shows you how to bind a Remote Environment (RE) to an Environment in Kyma. To execute the binding, create an EnvironmentMapping Custom Resource in the cluster. Follow the instructions to bind your Remote Environment to the <code>production</code> Environment.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>To complete this guide, your cluster must have at least one Remote Environment created.</p>\n<h2 id=\"steps\">Steps</h2>\n<ol>\n<li><p>List all Remote Environments bound to the <code>production</code> Environment:</p>\n<pre><code>kubectl get em -n production\n</code></pre></li>\n<li><p>Bind a RE to an Environment. Run this command to create  EnvironmentMapping Custom Resource (CR) and apply it to the cluster:</p>\n<pre><code>cat &lt;&lt;EOF | kubectl apply -f -\napiVersion: applicationconnector.kyma-project.io/v1alpha1\nkind: EnvironmentMapping\nmetadata:\n name: {NAME_OF_RE_TO_BIND}\n namespace: production\nEOF\n</code></pre></li>\n<li><p>Check if the operation is successful. List all Environments to which your RE is bound:</p>\n<pre><code>kubectl get em --all-namespaces -o jsonpath=&#39;{range .items[?(@.metadata.name==&quot;{NAME_OF_YOUR_RE}&quot;)]}{@.metadata.namespace}{&quot;\n&quot;}{end}&#39;\n</code></pre></li>\n</ol>\n"
    },
    {
      "order": "044-remote-evironment-custom-resource",
      "title": "RemoteEnvironment",
      "type": "Custom Resource",
      "source": "<p>The <code>remoteenvironments.applicationconnector.kyma-project.io</code> Custom Resource Definition (CRD) is a detailed description of the kind of data and the format used to register a Remote Environment (RE) in Kyma. The <code>RemoteEnvironment</code> Custom Resource defines the APIs that the RE offers. After creating a new Custom Resource for a given RE, the RE is mapped to appropriate ServiceClasses in the Service Catalog. To get the up-to-date CRD and show the output in the <code>yaml</code> format, run this command:</p>\n<pre><code>kubectl get crd remoteenvironments.applicationconnector.kyma-project.io -o yaml\n</code></pre><h2 id=\"sample-custom-resource\">Sample custom resource</h2>\n<p>This is a sample resource that registers the <code>re-prod</code> Remote Environment which offers one service.</p>\n<pre><code>apiVersion: applicationconnector.kyma-project.io/v1alpha1\nkind: RemoteEnvironment\nmetadata:\n  name: system_prod\nspec:\n  description: This is the system_production Remote Environment.\n  labels:\n    region: us\n    kind: production\n</code></pre><h2 id=\"custom-resource-parameters\">Custom resource parameters</h2>\n<p>This table lists all the possible parameters of a given resource together with their descriptions:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Parameter</th>\n<th style=\"text-align:center\">Mandatory</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>metadata.name</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specifies the name of the CR.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.source</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Identifies the Remote Environment in the cluster.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.description</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Describes the connected Remote Environment.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.accessLabel</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Labels the RE when an EnvironmentMapping is created.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.labels</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Defines the labels of the RE.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Contains all services that the Remote Environment provides.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.id</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Identifies the service that the Remote Environment provides.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.identifier</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Provides an additional identifier of the ServiceClass.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.name</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Represents a unique name of the service used by the Service Catalog.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.displayName</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specifies a human-readable name of the Remote Environment service. Parameter provided by the Metadata Service, do not edit.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.description</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Provides a short, human-readable description of the service offered by the RE. Parameter provided by the Metadata Service, do not edit.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.longDescription</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Provides a longer, human-readable description of the service offered by the RE. Parameter provided by the Metadata Service, do not edit.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.providerDisplayName</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specifies a human-readable name of the Remote Environment service provided. Parameter provided by the Metadata Service, do not edit.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.tags</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Specifies additional tags used for better documentation of the available APIs. Parameter provided by the Metadata Service, do not edit.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.labels</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Specifies additional labels for the service offered by the RE. Parameter provided by the Metadata Service, do not edit.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.entries</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Contains the information about the APIs and Events that the service offered by the RE provides. Parameter provided by the Metadata Service, do not edit.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.entries.type</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specify the entry type: API or Event. Parameter provided by the Metadata Service, do not edit.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.entries.gatewayUrl</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Specifies the URL of the Application Connector. This field is required for the API entry type. Parameter provided by the Metadata Service, do not edit.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.entries.accessLabel</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Specifies the label used in Istio rules in the Application Connector. This field is required for the API entry type.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.entries.targetUrl</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Specifies the URL to a given API. This field is required for the API entry type. Parameter provided by the Metadata Service, do not edit.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.entries.oauthUrl</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Specifies the URL used to authorize with a given API. This field is required for the API entry type. Parameter provided by the Metadata Service, do not edit.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.services.entries.credentialsSecretName</strong></td>\n<td style=\"text-align:center\"><strong>NO</strong></td>\n<td style=\"text-align:left\">Specifies the name of the Secret which allows you to a call to a given API. This field is required if the <strong>spec.services.entries.oauthUrl</strong> is specified. Parameter provided by the Metadata Service, do not edit.</td>\n</tr>\n</tbody>\n</table>\n"
    },
    {
      "order": "048-environment-mapping-custom-resource",
      "title": "EnvironmentMapping",
      "type": "Custom Resource",
      "source": "<p>The <code>environmentmappings.remoteenvironment.kyma.cx</code> Custom Resource Definition (CRD) is a detailed description of the kind of data and the format used to enable APIs and Events from a Remote Environment as a ServiceClass in a given Namespace. To get the up-to-date CRD and show the output in the <code>yaml</code> format, run this command:</p>\n<pre><code>kubectl get crd environmentmappings.applicationconnector.kyma-project.io -o yaml\n</code></pre><h2 id=\"sample-custom-resource\">Sample custom resource</h2>\n<p>This is a sample resource in which the EnvironmentMapping enables the <code>test</code> Remote Environment in the <code>production</code> Environment:</p>\n<pre><code>apiVersion: applicationconnector.kyma-project.io/v1alpha1\nkind: EnvironmentMapping\nmetadata:\n  name: test\n  namespace: production\n</code></pre><h2 id=\"custom-resource-parameters\">Custom resource parameters</h2>\n<p>This table lists all the possible parameters of a given resource together with their descriptions:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Parameter</th>\n<th style=\"text-align:center\">Mandatory?</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>metadata.name</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specifies the name of the CR and the Remote Environment.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>metadata.namespace</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specifies the Namespace in which the Remote Environment is enabled.</td>\n</tr>\n</tbody>\n</table>\n"
    }
  ]
}
