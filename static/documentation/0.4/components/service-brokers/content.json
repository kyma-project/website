{
  "id": "service-brokers",
  "displayName": "Service Brokers",
  "description": "Overal documentation for Service Brokers",
  "type": "Components",
  "docs": [
    {
      "order": "001-overview-service-brokers",
      "title": "Overview",
      "type": "Overview",
      "source": "<p>A Service Broker is a server compatible with the <a href=\"https://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md\" target=\"_blank\">Open Service Broker API</a> specification. A Service Broker manages the lifecycle of one or more services. It advertises a catalog of service offerings and service plans to a platform.</p>\n<p>The Service Catalog lists all services that the Service Brokers offer. Use the Service Brokers to:</p>\n<ul>\n<li>Provision and de-provision an instance of a service</li>\n<li>Create and delete a service binding</li>\n</ul>\n<p>Create a service binding to link a service instance to an application. During this process, credentials are delivered in Secrets to provide you with the information necessary to connect to the service instance. The process of deleting a service binding is known as unbinding.</p>\n<p>Each of the Service Brokers available in Kyma performs these operations in a different way. See the documentation for a given Service Broker to learn how it operates.</p>\n<p>Kyma provides these Service Brokers to use with the Service Catalog:</p>\n<ul>\n<li>Azure Broker</li>\n<li>Remote Environment Broker</li>\n<li>Helm Broker</li>\n</ul>\n<p>Follow the <a href=\"https://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md\" target=\"_blank\">Open Service Broker API</a> specification to build your own Service Broker.\nRegister every new Service Broker in the Service Catalog to make the services and plans available to the users. For more information on registering Service Brokers in the Service Catalog, see the <a href=\"https://github.com/kubernetes-incubator/service-catalog/blob/master/docs/walkthrough.md\" target=\"_blank\">Service Catalog Demonstration Walkthrough</a>.</p>\n"
    },
    {
      "order": "002-overview-azure-broker",
      "title": "Azure Broker",
      "type": "Overview",
      "source": "<p>The Microsoft Azure Broker is an open source, <a href=\"https://www.openservicebrokerapi.org/\" target=\"_blank\">Open Service Broker</a>-compatible API server that provisions managed services in the Microsoft Azure public cloud. The Azure Broker provides these Service Classes to use with the Service Catalog:</p>\n<ul>\n<li>Azure SQL Database</li>\n<li>Azure Database for MySQL</li>\n<li>Azure Redis Cache</li>\n</ul>\n<p>See the details of each Service Class and its specification in the Service Catalog UI.\nFor more information about the Service Brokers, see the Service Brokers <strong>Overview</strong> document.</p>\n<blockquote>\n<p><strong>NOTE:</strong> Kyma uses the Microsoft Azure Broker open source project. To ensure the best performance and stability of the product, Kyma uses a version of the Azure Broker that precedes the newest version released by Microsoft.</p>\n</blockquote>\n"
    },
    {
      "order": "003-overview-reb",
      "title": "Remote Environment Broker",
      "type": "Overview",
      "source": "<p>The Remote Environment Broker (REB) provides remote environments in the Service Catalog. A remote environment represents the environment connected to the Kyma instance. The Remote Environment Broker enables the integration of independent remote environments within Kyma. It also allows you to extend the functionality of existing systems.</p>\n<p>The REB observes all the remote environment custom resources and exposes their APIs and/or Events as ServiceClasses to the Service Catalog. When the list of remote environments&#39; ServiceClasses is available in the Service Catalog, you can create an EnvironmentMapping, provision those ServiceClasses, and enable them for Kyma services.</p>\n<p>The REB implements the Service Broker API. For more details about the Service Brokers, see the Service Brokers <strong>Overview</strong> documentation.</p>\n"
    },
    {
      "order": "004-overview-helm-broker",
      "title": "Helm Broker",
      "type": "Overview",
      "source": "<p>The Helm Broker is an implementation of a service broker which runs in the Kyma cluster and deploys Kubernetes native resources using <a href=\"https://github.com/kubernetes/helm\" target=\"_blank\">Helm</a> and Kyma bundles. A bundle is an abstraction layer over a Helm chart which allows you to represent it as a ClusterServiceClass in the Service Catalog. For example, a bundle can provide plan definitions or binding details. The Helm Broker fetches bundle definitions from an HTTP server. By default, the Helm Broker contains an embedded HTTP server which serves bundles from the Kyma bundles directory.</p>\n<p>The Helm Broker implements the Service Broker API. For more information about the Service Brokers, see the <strong>Service Brokers overview</strong> document.</p>\n"
    },
    {
      "order": "011-configuration-helm-broker",
      "title": "Configure Helm Broker",
      "type": "Configuration",
      "source": "<p>The Helm Broker fetches bundle definitions from an HTTP server defined in the <code>values.yaml</code> file. The <strong>config.repository.baseURL</strong> attribute defines the HTTP server URL. By default, the Helm Broker contains an embedded HTTP server which serves bundles from the Kyma <code>bundles</code> directory.</p>\n<h3 id=\"configuring-the-helm-broker-on-the-embedded-http-server\">Configuring the Helm Broker on the embedded HTTP server</h3>\n<p>By default, the Helm Broker contains an embedded HTTP server which serves bundles from the <code>bundles</code> directory. Deploying Kyma automatically populates the bundles.</p>\n<p>To add a yBundle to the Helm Broker, place your yBundle directory in the <code>bundles</code> folder.</p>\n<blockquote>\n<p><strong>NOTE:</strong> The name of the yBundle directory in the <code>bundles</code> folder must follow this pattern: {bundle_name}-{bundle_version}.</p>\n</blockquote>\n<h3 id=\"configuring-the-helm-broker-externally\">Configuring the Helm Broker externally</h3>\n<p>Follow these steps to change the configuration and make the Helm Broker fetch bundles from a remote HTTP server:</p>\n<ol>\n<li><p>Create a remote bundles repository. Your remote bundle repository must include the following resources:</p>\n<ul>\n<li><p>An <code>index.yaml</code> file which defines available bundles.\nThis file must have the following structure:</p>\n<pre><code class=\"lang-text\">apiVersion: v1\nentries:\n  {bundle_name}:\n    - name: {bundle_name}\n      description: {bundle_description}\n      version: {bundle_version}\n</code></pre>\n<p>This is an example of an <code>index.yaml</code> file for the Redis bundle:</p>\n<pre><code class=\"lang-text\">apiVersion: v1\nentries:\n  redis:\n    - name: redis\n      description: Redis service\n      version: 0.0.1\n</code></pre>\n</li>\n<li><p>A <code>{bundle_name}-{bundle_version}.tgz</code> file for each bundle version defined in the <code>index.yaml</code> file. The <code>.tgz</code> file is an archive of your bundle&#39;s directory.</p>\n</li>\n</ul>\n</li>\n<li><p>In the <code>values.yaml</code> located in the <code>/resources/core/charts/helm-broker/</code> directory, set the <strong>embeddedRepository.provision</strong> attribute to <code>false</code> to disable the embedded server. Provide your server&#39;s URL in the <strong>config.repository.baseURL</strong> attribute:</p>\n<pre><code class=\"lang-yaml\">embeddedRepository:\n# Defines whether to provision the embedded bundle repository.\n# To provision, specify this value to true\nprovision: true\n\nconfig:\n repository:\n   baseURL: &quot;http://custom.bundles-repository&quot;\n</code></pre>\n</li>\n<li><p>Install Kyma on Minikube. See the <strong>Local Kyma installation</strong> document to learn how.</p>\n</li>\n</ol>\n"
    },
    {
      "order": "012-configuration-helm-broker-bundles",
      "title": "How to create a yBundle",
      "type": "Configuration",
      "source": "<p>To create your own yBundle, you must create a directory with the following structure:</p>\n<pre><code>sample-ybundle/\n  ├── meta.yaml                             # A file which contains the metadata information about this yBundle\n  ├── chart/                                # A directory which contains a Helm chart that installs your Kubernetes resources\n  │    └── &lt;chart-name&gt;/                    # A Helm chart directory\n  │         └── ....                        # Helm chart files\n  └── plans/                                # A directory which contains the possible plans for an installed chart\n       ├── example-enterprise               # A directory of files for a specific plan\n       │   ├── meta.yaml                    # A file which contains the metadata information about this plan\n       │   ├── bind.yaml                    # A file which contains information about the values that the Helm Broker returns when it receives the bind request\n       │   ├── create-instance-schema.json  # The JSON Schema definitions for creating a service instance\n       │   └── values.yaml                  # The default configuration values in this plan for a chart defined in chart directory\n       └── ....\n</code></pre><blockquote>\n<p><strong>NOTE:</strong> All the file names in the yBundle directory are case-sensitive.</p>\n</blockquote>\n<h3 id=\"the-ybundle-meta-yaml-file\">The yBundle meta.yaml file</h3>\n<p>The <code>meta.yaml</code> file is mandatory as it contains information about the yBundle. Set the following fields to create service objects which comply with the <a href=\"https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/spec.md#service-object\" target=\"_blank\" title=\"OSB Spec Service Objects\">Open Service Broker API</a>.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Field Name</th>\n<th style=\"text-align:center\">Required</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>name</strong></td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">The yBundle name. It has the same restrictions as defined in the <a href=\"https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/spec.md#service-object\" target=\"_blank\" title=\"OSB Spec Service Objects\">Open Service Broker API</a>.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>version</strong></td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">The yBundle version. It is a broker service identifier. It has the same restrictions as defined in the <a href=\"https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/spec.md#service-object\" target=\"_blank\" title=\"OSB Spec Service Objects\">Open Service Broker API</a>.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>id</strong></td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">A broker service identifier. It has the same restrictions as defined in the <a href=\"https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/spec.md#service-object\" target=\"_blank\" title=\"OSB Spec Service Objects\">Open Service Broker API</a>.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>description</strong></td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">A short description of the service. It has the same restrictions as defined in the <a href=\"https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/spec.md#service-object\" target=\"_blank\" title=\"OSB Spec Service Objects\">Open Service Broker API</a>.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>tags</strong></td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">The keywords describing the provided service, separated by commas.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>bindable</strong></td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">The bindable field described in the <a href=\"https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/profile.md#service-metadata\" target=\"_blank\" title=\"OSB Spec Service Metadata\">Open Service Broker API</a>.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>displayName</strong></td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">The <strong>displayName</strong> field described in the <a href=\"https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/profile.md#service-metadata\" target=\"_blank\" title=\"OSB Spec Service Metadata\">Open Service Broker API</a>.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>providerDisplayName</strong></td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">The <strong>providerDisplayName</strong> field described in the <a href=\"https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/profile.md#service-metadata\" target=\"_blank\" title=\"OSB Spec Service Metadata\">Open Service Broker API</a>.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>longDescription</strong></td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">The <strong>longDescription</strong> field described in the <a href=\"https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/profile.md#service-metadata\" target=\"_blank\" title=\"OSB Spec Service Metadata\">Open Service Broker API</a>.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>documentationURL</strong></td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">The <strong>documentationURL</strong> field described in the <a href=\"https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/profile.md#service-metadata\" target=\"_blank\" title=\"OSB Spec Service Metadata\">Open Service Broker API</a>.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>supportURL</strong></td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">The <strong>supportURL</strong> field described in the <a href=\"https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/profile.md#service-metadata\" target=\"_blank\" title=\"OSB Spec Service Metadata\">Open Service Broker API</a>.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>imageURL</strong></td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">The <strong>imageURL</strong> field described in the <a href=\"https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/profile.md#service-metadata\" target=\"_blank\" title=\"OSB Spec Service Metadata\">Open Service Broker API</a>. You must provide the image as an SVG.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"the-chart-directory\">The chart directory</h3>\n<p>In the mandatory <code>chart</code> directory, create a folder with the same name as your chart. Put all the files related to your chart in this folder. The system supports chart version 2.6.</p>\n<p>If you are not familiar with the chart definitions, see the <a href=\"https://github.com/kubernetes/helm/blob/release-2.6/docs/charts.md\" target=\"_blank\">Charts</a> specification.</p>\n<blockquote>\n<p><strong>NOTE:</strong> Helm Broker uses the <a href=\"https://github.com/kubernetes/helm/blob/release-2.6/docs/using_helm.md#helpful-options-for-installupgraderollback\" target=\"_blank\">helm wait</a> option to ensure that all the resources that a chart creates are available. If you set your Deployment <strong>replicas</strong> to <code>1</code>, you must set <strong>maxUnavailable</strong> to <code>0</code> as a part of the rolling update strategy.</p>\n</blockquote>\n<h3 id=\"the-plans-directory\">The plans directory</h3>\n<p>The mandatory <code>plans</code> directory must contain at least one plan.\nA directory for a specific plan must contain the <code>meta.yaml</code> file. Other files, such as <code>create-instance-schema.json</code>, <code>bind.yaml</code> and <code>values.yaml</code> are not mandatory.</p>\n<h4 id=\"the-meta-yaml-file\">The meta.yaml file</h4>\n<p>The <code>meta.yaml</code> file contains information about a yBundle plan. Set the following fields to create the plan objects, which comply with the <a href=\"https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/spec.md#plan-object\" target=\"_blank\" title=\"OSB Spec Plan Objects\">Open Service Broker API</a>.</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Field Name</th>\n<th style=\"text-align:center\">Required</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>name</strong></td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">The plan name. It has the same restrictions as defined in the <a href=\"https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/spec.md#plan-object\" target=\"_blank\" title=\"OSB Spec Plan Objects\">Open Service Broker API</a>.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>id</strong></td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">The plan ID. It has the same restrictions as defined in the <a href=\"https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/spec.md#plan-object\" target=\"_blank\" title=\"OSB Spec Plan Objects\">Open Service Broker API</a>.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>description</strong></td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">The plan description. It has the same restrictions as defined in the <a href=\"https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/spec.md#plan-object\" target=\"_blank\" title=\"OSB Spec Plan Objects\">Open Service Broker API</a>.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>displayName</strong></td>\n<td style=\"text-align:center\">true</td>\n<td style=\"text-align:center\">The plan display name. It has the same restrictions as defined in the <a href=\"https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/spec.md#plan-object\" target=\"_blank\" title=\"OSB Spec Plan Objects\">Open Service Broker API</a>.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>bindable</strong></td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">The plan bindable attribute. It has the same restrictions as defined in the <a href=\"https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/spec.md#plan-object\" target=\"_blank\" title=\"OSB Spec Plan Objects\">Open Service Broker API</a>.</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"the-bind-yaml-file\">The bind.yaml file</h4>\n<p>The <code>bind.yaml</code> file contains the information required for the <a href=\"https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/spec.md#binding\" target=\"_blank\" title=\"OSB Spec Binding\">binding action</a> in a specific plan.\nIf you defined in the <code>meta.yaml</code> file that your plan is bindable, you must also create a <code>bind.yaml</code> file.\nFor more information about the content of the <code>bind.yaml</code> file, see the <strong>Binding yBundles</strong> document.</p>\n<h4 id=\"the-values-yaml-file\">The values.yaml file</h4>\n<p>The <code>values.yaml</code> file provides the default configuration values in a concrete plan for the chart definition located in the <code>chart</code> directory.\nThis file is not required.\nFor more information about the content of the <code>values.yaml</code> file, see the <a href=\"https://github.com/kubernetes/helm/blob/release-2.6/docs/chart_template_guide/values_files.md\" target=\"_blank\">Values Files</a> specification.</p>\n<h4 id=\"the-create-instance-schema-json-file\">The create-instance-schema.json file</h4>\n<p>The <code>create-instance-schema.json</code> file contains a schema used to define the parameters. Each input parameter is expressed as a property within a JSON object.\nThis file is not required.\nFor more information about the content of the <code>create-instance-schema.json</code> file, see the <a href=\"https://github.com/openservicebrokerapi/servicebroker/blob/v2.14/spec.md#input-parameters-schema-object\" target=\"_blank\">Input parameters</a> specification.</p>\n<h3 id=\"troubleshooting\">Troubleshooting</h3>\n<p>Use the dry-run mode to check the generated manifests of the chart without installing it.\nThe <strong>--debug</strong> option prints the generated manifests.\nAs a prerequisite, you must install <a href=\"https://github.com/kubernetes/helm\" target=\"_blank\">Helm</a> on your machine to run this command:</p>\n<pre><code> helm install --dry-run {path-to-chart} --debug\n</code></pre><p>For more details, read the Helm <a href=\"https://docs.helm.sh/chart_template_guide/#debugging-templates\" target=\"_blank\">official documentation</a>.</p>\n"
    },
    {
      "order": "013-configuration-helm-broker-bundles-binding",
      "title": "Binding yBundles",
      "type": "Configuration",
      "source": "<p>If you defined in the <code>meta.yaml</code> file that your plan is bindable, you must also create a <code>bind.yaml</code> file.\nThe <code>bind.yaml</code> file supports the <a href=\"https://github.com/kubernetes-incubator/service-catalog\" target=\"_blank\">Service Catalog</a> binding concept. The <code>bind.yaml</code> file contains information the system uses in the <a href=\"https://github.com/openservicebrokerapi/servicebroker/blob/v2.12/spec.md#binding\" target=\"_blank\" title=\"OSB Spec Binding\">binding process</a>.\nThe <code>bind.yaml</code> file is mandatory for all bindable plans. Currently, Kyma supports only the <a href=\"https://github.com/openservicebrokerapi/servicebroker/blob/v2.13/spec.md#types-of-binding\" target=\"_blank\">credentials</a>-type binding.   </p>\n<blockquote>\n<p><strong>NOTE:</strong> Resolving the values from the <code>bind.yaml</code> file is a post-provision action. If this operation ends with an error, the provisioning also fails.</p>\n</blockquote>\n<h2 id=\"details\">Details</h2>\n<p>This section provides an example of the <code>bind.yaml</code> file. It further describes the templating, the policy concerning credential name conflicts, and the detailed <code>bind.yaml</code> file specification.</p>\n<h3 id=\"example-usage\">Example usage</h3>\n<pre><code class=\"lang-yaml\"># bind.yaml\ncredential:\n  - name: HOST\n    value: redis.svc.cluster.local\n  - name: PORT\n    valueFrom:\n      serviceRef:\n        name: redis-svc\n        jsonpath: &#39;{ .spec.ports[?(@.name==&quot;redis&quot;)].port }&#39;\n  - name: REDIS_PASSWORD\n    valueFrom:\n      secretKeyRef:\n        name: redis-secrets\n        key: redis-password\n\ncredentialFrom:\n  - configMapRef:\n    name: redis-config\n  - secretRef:\n    name: redis-v2-secrets\n</code></pre>\n<p>In this example of the <a href=\"https://github.com/openservicebrokerapi/servicebroker/blob/v2.12/spec.md#binding\" target=\"_blank\" title=\"OSB Spec Binding\">binding action</a>, the Helm Broker returns the following values:</p>\n<ul>\n<li>A <code>HOST</code> key with the defined inlined value.</li>\n<li>A <code>PORT</code> key with the value from the field specified by the JSONPath expressions. The <code>redis-svc</code> Service runs this expression.</li>\n<li>A <code>REDIS_PASSWORD</code> key with a value selected by the <code>redis-password</code> key from the <code>redis-secrets</code> Secret.</li>\n<li>All the key-value pairs fetched from the <code>redis-config</code> ConfigMap.</li>\n<li>All the key-value pairs fetched from the <code>redis-v2-secrets</code> Secrets.</li>\n</ul>\n<h3 id=\"templating\">Templating</h3>\n<p>In the <code>bind.yaml</code> file, you can use the Helm Chart templates directives.</p>\n<pre><code class=\"lang-yaml\"># bind.yaml\ncredential:\n  - name: HOST\n    value: {{ template &quot;redis.fullname&quot; . }}.{{ .Release.Namespace }}.svc.cluster.local\n{{- if .Values.usePassword }}\n  - name: REDIS_PASSWORD\n    valueFrom:\n      secretKeyRef:\n        name: {{ template &quot;redis.fullname&quot; . }}\n        key: redis-password\n{{- end }}\n</code></pre>\n<p>In this example, the system renders the <code>bind.yaml</code> file. The system resolves all the directives enclosed in the double curly braces in the same way as in the files located in the <code>templates</code> directory in your Helm chart.</p>\n<h3 id=\"credential-name-conflicts-policy\">Credential name conflicts policy</h3>\n<p>The following rules apply in cases of credential name conflicts:</p>\n<ul>\n<li>When the <code>credential</code> and the <code>credentialFrom</code> sections have duplicate values, the system uses the values from the <code>credential</code> section.</li>\n<li>When you duplicate a key in the <code>credential</code> section, an error appears and informs you about the name of the key that the conflict refers to.</li>\n<li>When a key exists in the multiple sources defined by the <code>credentialFrom</code> section, the value associated with the last source takes precedence.</li>\n</ul>\n<h3 id=\"file-specification\">File specification</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Field Name</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"#credential\">credential</a></td>\n<td style=\"text-align:center\">The list of the credential variables to return during the binding action.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#credentialfrom\">credentialFrom</a></td>\n<td style=\"text-align:center\">The list of the sources to populate the credential variables on the binding action. When the key exists in multiple sources, the value associated with the last source takes precedence. The variables from the <code>credential</code> section override the values if duplicate keys exist.</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"credential\">Credential</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Field Name</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>name</strong></td>\n<td style=\"text-align:center\">The name of the credential variable.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>value</strong></td>\n<td style=\"text-align:center\">A variable value. You can also use the Helm Chart templating directives.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#valuefrom\">valueFrom</a></td>\n<td style=\"text-align:center\">The source of the credential variable&#39;s value. You cannot use it if the value is not empty.</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"valuefrom\">ValueFrom</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Field Name</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"#configmapkeyref\">configMapKeyRef</a></td>\n<td style=\"text-align:center\">Selects a ConfigMap key in the Helm chart release Namespace.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#secretkeyref\">secretKeyRef</a></td>\n<td style=\"text-align:center\">Selects a Secret key in the Helm Chart release Namespace.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#serviceref\">serviceRef</a></td>\n<td style=\"text-align:center\">Selects a Service resource in the Helm Chart release Namespace.</td>\n</tr>\n</tbody>\n</table>\n<h6 id=\"configmapkeyref\">ConfigMapKeyRef</h6>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Field Name</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>name</strong></td>\n<td style=\"text-align:center\">The name of the ConfigMap.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>key</strong></td>\n<td style=\"text-align:center\">The name of the key from which the value is retrieved.</td>\n</tr>\n</tbody>\n</table>\n<h6 id=\"secretkeyref\">SecretKeyRef</h6>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Field Name</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>name</strong></td>\n<td style=\"text-align:center\">The name of the Secret.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>key</strong></td>\n<td style=\"text-align:center\">The name of the key from which the value is retrieved.</td>\n</tr>\n</tbody>\n</table>\n<h6 id=\"serviceref\">ServiceRef</h6>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Field Name</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>name</strong></td>\n<td style=\"text-align:center\">The name of the Service.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>jsonpath</strong></td>\n<td style=\"text-align:center\">The JSONPath expression used to select the specified field value. For more information, see the <a href=\"https://kubernetes.io/docs/user-guide/jsonpath/\" target=\"_blank\">User Guide</a>.</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"credentialfrom\">CredentialFrom</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Field Name</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"#configmapref\">configMapRef</a></td>\n<td style=\"text-align:center\">The ConfigMap to retrieve the values from. It must be available in the Helm Chart release Namespace.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#secretref\">secretRef</a></td>\n<td style=\"text-align:center\">The Secret to retrieve the values from. It must be available in the Helm Chart release Namespace.</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"configmapref\">ConfigMapRef</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Field Name</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>name</strong></td>\n<td style=\"text-align:center\">The name of the ConfigMap.</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"secretref\">SecretRef</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Field Name</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>name</strong></td>\n<td style=\"text-align:center\">The name of the Secret.</td>\n</tr>\n</tbody>\n</table>\n"
    },
    {
      "order": "014-configuration-enable-azure-broker",
      "title": "Enable the Azure Broker for local deployment",
      "type": "Configuration",
      "source": "<blockquote>\n<p><strong>NOTE:</strong> To enable the Azure Broker, you need a <a href=\"https://azure.microsoft.com/en-us\" target=\"_blank\">Microsoft Azure</a> subscription.</p>\n</blockquote>\n<p>By default, the Azure Broker is disabled for local installation and does not install along with other Kyma core components.\nTo enable the installation of the Azure Broker, export these Azure Broker-specific environment variables before you install Kyma:  </p>\n<ul>\n<li><code>AZURE_BROKER_TENANT_ID</code></li>\n<li><code>AZURE_BROKER_SUBSCRIPTION_ID</code></li>\n<li><code>AZURE_BROKER_CLIENT_ID</code></li>\n<li><code>AZURE_BROKER_CLIENT_SECRET</code></li>\n</ul>\n<p>Export these variables using the details of your <a href=\"https://azure.microsoft.com/en-us\" target=\"_blank\">Microsoft Azure</a> subscription, for example:</p>\n<pre><code>export AZURE_BROKER_TENANT_ID=&#39;{YOUR_TENANT_ID}&#39;\n</code></pre>"
    },
    {
      "order": "020-architecture-reb",
      "title": "The Remote Environment Broker architecture",
      "type": "Architecture",
      "source": "<p>The Remote Environment Broker (REB) workflow starts with the registration process, during which a remote environment (RE) is registered on the Kyma cluster.</p>\n<h3 id=\"remote-environment-registration-process\">Remote environment registration process</h3>\n<p>The registration process of the remote environment consists of the following steps:</p>\n<ol>\n<li>Kyma administrator registers the remote environment&#39;s APIs and Events definitions to the Kyma cluster through the Application Connector which creates a remote environment custom resource inside the cluster.</li>\n<li>The Remote Environment Broker observes and registers all the remote environment custom resources.</li>\n<li>Whenever services (APIs and/or Events) appear in a given remote environment, the REB registers them as ServiceClasses in the Service Catalog.</li>\n</ol>\n<p><img src=\"assets/001-REB-registration.png\" alt=\"REB registration\"></p>\n<h3 id=\"enable-the-provisioning-process\">Enable the provisioning process</h3>\n<p>After the registration, trigger the provisioning of a given ServiceClass by creating a ServiceInstance. Before you create a ServiceInstance of a given ServiceClass, you must create the EnvironmentMapping. The EnvironmentMapping enables the remote environment offering in a given Environment. Creating a ServiceInstance without the EnvironmentMapping ends with failure. For more details about the EnvironmentMapping, see the <strong>Examples</strong> document.</p>\n<p><img src=\"assets/002-REB-envmapping.png\" alt=\"REB envmapping\"></p>\n<p>Provisioning and binding work differently for API, Event, and both the API and Event ServiceClass. Because of that, these operations are described in separate sections. In relation to the nature of remote environment ServiceClasses, you can provision them just once in a given Environment.</p>\n<h3 id=\"provisioning-and-binding-for-an-api-serviceclass\">Provisioning and binding for an API ServiceClass</h3>\n<p>This ServiceClass has a <strong>bindable</strong> flag set to <code>true</code> which means that you have to provision a ServiceInstance and bind it to the service or lambda to connect to the given API. The provisioning and binding workflow for an API ServiceClass consists of the following steps:</p>\n<ol>\n<li>Select a given API ServiceClass from the Service Catalog.</li>\n<li>Provision this ServiceClass by creating its ServiceInstance in the given Environment.</li>\n<li>Bind your ServiceInstance to the service or lambda. During the binding process, ServiceBinding and ServiceBindingUsage resources are created.<ul>\n<li>ServiceBinding contains a Secret with a GatewayURL needed to connect to the given API.</li>\n<li>ServiceBindingUsage injects the Secret, together with the label given during the registration process, to the lambda or service.</li>\n</ul>\n</li>\n<li>The service or lambda calls the API through the Application Connector. The Application Connector verifies the label to check if you have the authorization to access this API.</li>\n<li>After verifying the label, the Application Connector allows you to access the remote environment API.</li>\n</ol>\n<p><img src=\"assets/003-REB-API-service-class.png\" alt=\"API Service Class\"></p>\n<h3 id=\"provisioning-and-binding-for-an-event-serviceclass\">Provisioning and binding for an Event ServiceClass</h3>\n<p>This ServiceClass has a <strong>bindable</strong> flag set to <code>false</code> which means that after provisioning a ServiceClass in the Environment, given Events are ready to use for all services. The provisioning workflow for an Event ServiceClass consists of the following steps:</p>\n<ol>\n<li>Select a given Event ServiceClass from the Service Catalog.</li>\n<li>Provision this ServiceClass by creating a ServiceInstance in the given Environment.</li>\n<li>During the provisioning process, the EventActivation resource is created together with the ServiceInstance. EventActivation allows you to create an Event Bus Subscription.</li>\n<li>A Subscription is a custom resource by which an Event Bus triggers the lambda for a particular type of Event in this step.</li>\n<li>The Remote Environment (RE2) sends an Event to the Application Connector.</li>\n<li>The Application Connector sends an Event to the lambda through the Event Bus.</li>\n</ol>\n<p><img src=\"assets/004-REB-event-service-class.png\" alt=\"Event Service Class\"></p>\n<h3 id=\"provisioning-and-binding-for-both-the-api-and-event-serviceclass\">Provisioning and binding for both the API and Event ServiceClass</h3>\n<p>This ServiceClass has a <strong>bindable</strong> flag set to <code>true</code>.\nThe provisioning and binding workflow for both the API and Event ServiceClass is a combination of steps described for an <a href=\"#provisioning-and-binding-for-an-api-serviceclass\">API ServiceClass</a> and an <a href=\"#provisioning-and-binding-for-an-event-serviceclass\">Event ServiceClass</a>.</p>\n"
    },
    {
      "order": "021-architecture-helm-broker",
      "title": "Helm Broker architecture",
      "type": "Architecture",
      "source": "<p>The Helm Broker workflow starts with the registration process, during which the Helm Broker fetches yBundles from the Kyma bundles directory, or from a remote HTTP server.</p>\n<h3 id=\"registration-process\">Registration process</h3>\n<p>The registration process in the case of the Helm Broker consists of the following steps:</p>\n<ol>\n<li>The Helm Broker fetches yBundles from the Kyma bundles directory, or from the remote HTTP server.</li>\n<li>The Helm Broker registers yBundles as ServiceClasses in the Service Catalog.</li>\n</ol>\n<p><img src=\"assets/010-helm-registration.png\" alt=\"Helm Broker registration\"></p>\n<h3 id=\"ybundles-provisioning-and-binding\">yBundles provisioning and binding</h3>\n<p>After the registration, the process of yBundle provisioning and binding takes place. It consists of the following steps:</p>\n<ol>\n<li>Select a given bundle ServiceClass from the Service Catalog.</li>\n<li>Provision this ServiceClass by creating its ServiceInstance in the given Environment.</li>\n<li>Bind your ServiceInstance to the service or lambda. During the binding process, ServiceBinding and ServiceBindingUsage resources are created.</li>\n<li>The service or lambda calls yBundle.</li>\n</ol>\n<p><img src=\"assets/011-helm-architecture.png\" alt=\"Helm Broker architecture\"></p>\n"
    },
    {
      "order": "040-cr-event-activation",
      "title": "EventActivation",
      "type": "Custom Resource",
      "source": "<p>The <code>eventactivations.applicationconnector.kyma-project.io</code> Custom Resource Definition (CRD) is a detailed description of the kind of data and the format used to create an Event Bus Subscription and to get an Event schema. To get the up-to-date CRD and show the output in the <code>yaml</code> format, run this command:</p>\n<pre><code>kubectl get crd eventactivations.applicationconnector.kyma-project.io -o yaml\n</code></pre><h2 id=\"sample-custom-resource\">Sample custom resource</h2>\n<p>This is a sample resource that allows you to consume Events sent from the service with the <code>ac031e8c-9aa4-4cb7-8999-0d358726ffaa</code> ID in a <code>production</code> Namespace.</p>\n<pre><code>apiVersion: applicationconnector.kyma-project.io/v1alpha1\nkind: EventActivation\nmetadata:\n  name: &quot;ac031e8c-9aa4-4cb7-8999-0d358726ffaa&quot;\n  namespace: production\nspec:\n  displayName: &quot;Orders&quot;\n  sourceId: &quot;prod&quot;\n</code></pre><h2 id=\"custom-resource-parameters\">Custom resource parameters</h2>\n<p>This table lists all the possible parameters of a given resource together with their descriptions:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Parameter</th>\n<th style=\"text-align:center\">Mandatory?</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong>metadata.name</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specifies the name of the CR and the ID of the Remote Environment service. This field is also used to fetch Event schemas from the Minio storage.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>metadata.namespace</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specifies the Namespace in which the CR is created.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.displayName</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Specifies a human-readable name of the Remote Environment service.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>spec.sourceId</strong></td>\n<td style=\"text-align:center\"><strong>YES</strong></td>\n<td style=\"text-align:left\">Used to construct a Publish-Subscribe (Pub/Sub) topic name where the Events are send and from where the Events are consumed.</td>\n</tr>\n</tbody>\n</table>\n"
    }
  ]
}
