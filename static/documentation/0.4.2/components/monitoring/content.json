{
  "id": "monitoring",
  "displayName": "Monitoring",
  "description": "Overal documentation for Monitoring",
  "type": "Components",
  "docs": [
    {
      "order": "001-overview-monitoring",
      "title": "Overview",
      "source": "<p>To enrich Kyma with monitoring functionality, third-party resources come by default as packaged tools. The <code>kube-prometheus</code> package is a Prometheus operator from CoreOS responsible for delivering these tools. Monitoring in Kyma includes three primary elements:</p>\n<ul>\n<li>Prometheus, an open-source system monitoring toolkit.</li>\n<li>Grafana, a user interface that allows you to query and visualize statistics and metrics.  </li>\n<li>AlertManager, a Prometheus component that handles alerts that originate from Prometheus. AlertManager performs needed deduplicating, grouping, and routing based on rules defined by the Prometheus server.</li>\n</ul>\n<p>Convenience and efficiency are the main advantages to using the <code>kube-prometheus</code> package. <code>kube-prometheus</code> delivers a level of monitoring options that would otherwise involve extensive development effort to acquire. Prometheus, Grafana, and AlertManager installed on their own would require the developer to perform customization to achieve the same results as the operator alone. <code>kube-prometheus</code> is configured to run on Kubernetes and monitor clusters without additional configuration.</p>\n"
    },
    {
      "order": "020-architecture-monitoring",
      "title": "Architecture",
      "source": "<p>This document outlines the monitoring architecture of Kyma, highlighting information sources that Prometheus polls for data to process.</p>\n<p><img src=\"assets/monitoring.png\" alt=\"Monitoring architecture in Kyma\"></p>\n<h2 id=\"the-prometheus-operator\">The Prometheus Operator</h2>\n<p>The Prometheus Operator is a CoreOS component integrated into Kyma that enables Prometheus deployments to be decoupled from the configuration of the entities they monitor. The task of the Operator is to ensure that Prometheus servers with the specified configuration are always running. If the developer does not specify a configuration for Prometheus instances, the Operator is able to generate and deploy one. The Prometheus instance is responsible for the monitoring of services.</p>\n<h2 id=\"the-service-monitor\">The Service Monitor</h2>\n<p>The Service Monitor works in orchestration with the Prometheus resource that the Operator watches. It dictates to a Prometheus resource how to retrieve metrics and enables exposure of those metrics in a standard manner. It also specifies services the Prometheus instance should monitor. Using labels, the Prometheus resource includes a Service Monitor.  </p>\n<h2 id=\"monitored-data-sources\">Monitored Data sources</h2>\n<p>Prometheus contains the flexibility to poll data from a variety of sources. Virtual machines on which Kubernetes runs make time-stamped data available, reporting on jobs started, workload, CPU performance, capacity, and more. In this case, the Service Monitor watches the Kubernetes API master to detect any job creation. The job produces time-stamped data that Prometheus consumes.</p>\n<p>Pods may contain applications with custom metrics that Prometheus can poll through the Prometheus exporter.</p>\n<h2 id=\"grafana\">Grafana</h2>\n<p>Kyma employs Grafana as a third-party resource in <code>kube-prometheus</code> to deliver a feature-rich metrics dashboard and graph editor.</p>\n<p>To access the Grafana UI, use the following URL: <code>https://grafana.{DOMAIN}</code>. Replace DOMAIN with the domain of your Kyma cluster.</p>\n<h2 id=\"alertmanager\">Alertmanager</h2>\n<p>Alertmanager receives harvested metrics from Prometheus and forwards this data on to the configured channels, such as email or incident management systems.</p>\n"
    },
    {
      "order": "030-gs-monitoring-custom-metrics",
      "title": "Expose Custom Metrics in Kyma",
      "type": "Getting Started",
      "source": "<p>This Getting Started guide shows how to expose custom metrics to Prometheus with a Golang service in Kyma. To do so, follow these steps:</p>\n<ol>\n<li>Configure Istio.</li>\n<li>Expose a sample application serving metrics on <code>8081</code> port.</li>\n<li>Access the exposed metrics in Prometheus.</li>\n</ol>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<ul>\n<li>Kyma as the target deployment environment</li>\n<li>Istio 0.8<ul>\n<li>sidecar injection enabled</li>\n<li>mutual TLS enabled</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"installation\">Installation</h2>\n<h3 id=\"configure-istio\">Configure Istio</h3>\n<p>For the <code>default</code> Namespace, the sidecar injection must be enabled. To enable the sidecar injection for all Pods in the <code>default</code> Namespace, run the following command:</p>\n<pre><code class=\"lang-bash\">kubectl label namespace default istio-injection=enabled\nnamespace &quot;default&quot; labeled\n</code></pre>\n<p>For more details on deploying your application with Istio, read <a href=\"https://istio.io/docs/setup/kubernetes/quick-start#deploy-your-application\" target=\"_blank\">this</a> documentation.</p>\n<p>You must also add the <strong>sidecar.istio.io/inject</strong> annotation with the value set to <code>true</code> to the Pod template specification, to enable the injection as shown in <a href=\"https://github.com/kyma-project/examples/blob/master/monitoring-custom-metrics/deployment/deployment.yaml#L12\" target=\"_blank\">this</a> example.</p>\n<pre><code class=\"lang-yaml\">spec:\n  template:\n    metadata:\n      annotations:\n        sidecar.istio.io/inject: &quot;true&quot;\n</code></pre>\n<p>For more details on installing the Istio sidecar, read <a href=\"https://istio.io/docs/setup/kubernetes/sidecar-injection/#policy\" target=\"_blank\">this</a> documentation.</p>\n<p>The following ports are used in the Pod:</p>\n<ul>\n<li><p><code>8080</code> - Envoy captures the traffic only for ports listed in Pod&#39;s <strong>containerPorts</strong> (<code>containerPort: 8080</code>), or in the <strong>traffic.sidecar.istio.io/includeInboundPorts</strong> annotation. Thus, this port is a part of the Service Mesh and can be used for application&#39;s needs.</p>\n</li>\n<li><p><code>8081</code> - This is the excluded port from the Service Mesh, which is used for exposing metrics only. The network traffic bypasses Envoy and goes straight to the container. In Kyma, use the suggested <code>8081</code> port to expose metrics.</p>\n</li>\n</ul>\n<h3 id=\"expose-a-sample-metrics-application\">Expose a sample metrics application</h3>\n<p>To expose Prometheus metrics in Golang, the Prometheus community provides <a href=\"https://github.com/prometheus/client_golang\" target=\"_blank\">this</a> library.</p>\n<p>This is a basic example where <code>Gauge</code> and <code>Counter</code> metrics are exported using the <code>prometheus</code> package.</p>\n<ol>\n<li><p>Deploy the sample metrics application.</p>\n<pre><code class=\"lang-bash\"> kubectl apply -f https://raw.githubusercontent.com/kyma-project/examples/master/monitoring-custom-metrics/deployment/deployment.yaml\n\n kubectl apply -f https://raw.githubusercontent.com/kyma-project/examples/master/monitoring-custom-metrics/deployment/service-8080.yaml\n\n kubectl apply -f https://raw.githubusercontent.com/kyma-project/examples/master/monitoring-custom-metrics/deployment/service-8081.yaml\n\n kubectl apply -f https://raw.githubusercontent.com/kyma-project/examples/master/monitoring-custom-metrics/deployment/service-monitor.yaml\n</code></pre>\n<pre><code class=\"lang-bash\"> kubectl get pods\n NAME                             READY     STATUS    RESTARTS   AGE\n sample-metrics-c9f998959-jd2fz   2/2       Running   0          2m\n sample-metrics-c9f998959-kfbp8   2/2       Running   0          2m\n sample-metrics-c9f998959-nnp2n   2/2       Running   0          2m\n sample-metrics-c9f998959-vdnkn   2/2       Running   0          2m\n</code></pre>\n</li>\n<li><p>Run the <code>port-forward</code> command on the <code>sample-metrics-8081</code> service for the<code>8081</code> port to check the metrics.</p>\n<pre><code class=\"lang-bash\"> kubectl port-forward svc/sample-metrics-8081 8081:8081\n</code></pre>\n<p> Open a browser and access <a href=\"http://localhost:8081/metrics\" target=\"_blank\"><code>http://localhost:8081/metrics</code></a></p>\n<p> <img src=\"assets/sample-metrics-2.png\" alt=\"metrics on port 8081\"></p>\n</li>\n</ol>\n<p>Find the source code for the sample application <a href=\"https://github.com/kyma-project/examples/blob/master/monitoring-custom-metrics/main.go\" target=\"_blank\">here</a>. See the <a href=\"https://godoc.org/github.com/prometheus/client_golang/prometheus\" target=\"_blank\">package prometheus</a> for the reference documentation. Read <a href=\"https://prometheus.io/docs/concepts/metric_types/\" target=\"_blank\">this</a> documentation to learn more about the Prometheus metric types.</p>\n<h3 id=\"access-the-exposed-metrics-in-prometheus\">Access the exposed metrics in Prometheus</h3>\n<p> Run the <code>port-forward</code> command on the <code>core-prometheus</code> service:</p>\n<pre><code class=\"lang-bash\">kubectl port-forward svc/core-prometheus -n kyma-system 9090:9090\nForwarding from 127.0.0.1:9090 -&gt; 9090\nForwarding from [::1]:9090 -&gt; 9090\n</code></pre>\n<p>All the <strong>sample-metrics</strong> endpoints appear as the <a href=\"http://localhost:9090/targets#job-sample-metrics-8081\" target=\"_blank\"><code>Targets</code></a> list.</p>\n<p><img src=\"assets/pm-dashboard-1.png\" alt=\"Prometheus Dashboard\"></p>\n<p>Use either the <code>cpu_temperature_celsius</code> or <code>hd_errors_total</code> in the <a href=\"http://localhost:9090/graph\" target=\"_blank\"><strong>expression</strong></a> field. Click the <strong>Execute</strong> button to check the values scrapped by Prometheus.</p>\n<p><img src=\"assets/pm-dashboard-2.png\" alt=\"Prometheus Dashboard\"></p>\n<h3 id=\"servicemonitor\">ServiceMonitor</h3>\n<p>Prometheus can reach the service using ServiceMonitor. ServiceMonitor is a specific CRD used by the Prometheus operator to monitor services.</p>\n<p>In Kyma, the Prometheus server discovers all ServiceMonitors through the <strong>serviceMonitorSelector</strong> matching the <code>prometheus: core</code> label.</p>\n<pre><code class=\"lang-yaml\">  serviceMonitorSelector:\n    matchLabels:\n      prometheus: {{ .Values.prometheusLabelValue | default .Release.Name | quote }}\n{{- end }}\n</code></pre>\n<p>In this example, the ServiceMonitor selects a <strong>selector</strong> with all services matching the <code>k8s-app: metrics</code> label. Find the complete yaml <a href=\"https://github.com/kyma-project/examples/blob/master/monitoring-custom-metrics/deployment/service-monitor.yaml\" target=\"_blank\">here</a>.</p>\n<p>In Kyma, there is a <a href=\"https://github.com/kyma-project/kyma/blob/master/resources/core/charts/monitoring/charts/prometheus/templates/servicemonitors.yaml\" target=\"_blank\">template</a> which serves to discover a list of ServiceMonitors.</p>\n<h3 id=\"add-a-custom-dashboard-in-grafana\">Add a Custom Dashboard in Grafana</h3>\n<p>Out of the box, Kyma includes a set of dashboards. The users can create their own <strong>Grafana Dashboard</strong> by using the Grafana UI. The dashboards persist even after the Pod restarts.</p>\n<p>For details on how to create dashboards in Grafana, see the following documents:</p>\n<ul>\n<li><a href=\"https://github.com/kyma-project/kyma/blob/master/resources/core/charts/monitoring/charts/grafana/README.md\" target=\"_blank\">Grafana in Kyma</a></li>\n<li><a href=\"http://docs.grafana.org/guides/getting_started/\" target=\"_blank\">Grafana - Getting started</a></li>\n<li><a href=\"http://docs.grafana.org/reference/export_import/\" target=\"_blank\">Export and Import dashboards</a></li>\n<li><a href=\"http://docs.grafana.org/http_api/dashboard/\" target=\"_blank\">Grafana - Dashboard API</a></li>\n</ul>\n<h3 id=\"cleanup\">Cleanup</h3>\n<p>Run the following commands to completely remove the example and all its resources from the cluster:</p>\n<ol>\n<li>Remove the <strong>istio-injection</strong> label from the <code>default</code> Namespace.<pre><code class=\"lang-bash\"> kubectl label namespace default istio-injection-\n</code></pre>\n</li>\n<li>Remove <strong>ServiceMonitor</strong> in the <code>kyma-system</code> Namespace.<pre><code class=\"lang-bash\"> kubectl delete servicemonitor -l example=monitoring-custom-metrics -n kyma-system\n</code></pre>\n</li>\n<li>Remove the <code>sample-metrics</code> Deployments in the <code>default</code> Namespace.\n ```bash\n kubectl delete all -l example=monitoring-custom-metrics</li>\n</ol>\n"
    }
  ]
}
